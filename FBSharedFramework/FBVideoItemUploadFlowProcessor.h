//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBVideoItemUploadFlowProcessor_h
#define FBVideoItemUploadFlowProcessor_h
@import Foundation;

#include "FBMediaFileStreamListenerAnnouncerWrapper.h"
#include "FBMediaItemUploadLogging-Protocol.h"
#include "FBMediaProcessing-Protocol.h"
#include "FBMediaProcessingDelegate-Protocol.h"
#include "FBVideoItemRawExportData.h"
#include "FBVideoUploadSettings.h"
#include "METAMediaSource.h"

@class AVAsset, AVVideoComposition, NSArray, NSDictionary, NSMutableArray, NSString;
@protocol FBVideoTranscoderOutputAdapter, FBVideoTranscoding, OS_dispatch_queue;

@interface FBVideoItemUploadFlowProcessor : NSObject<FBMediaProcessing> {
  /* instance variables */
  AVAsset *_asset;
  AVVideoComposition *_videoComposition;
  FBVideoItemRawExportData *_rawExportData;
  METAMediaSource *_mediaSource;
  BOOL _canUploadRaw;
  NSObject<FBVideoTranscoding> *_transcoder;
  unsigned long long _endOffsetLastExportedSegment;
  BOOL _segmentationFinished;
  BOOL _didCalculateUploadMosCs;
  NSObject<FBMediaItemUploadLogging> *_logger;
  id /* block */ _transcoderFactory;
  id /* block */ _transcoderFactoryAsync;
  NSObject<FBVideoTranscoderOutputAdapter> *_outputAdapter;
  FBVideoUploadSettings *_settings;
  FBMediaFileStreamListenerAnnouncerWrapper *_streamAnnouncer;
  float _lastUpdatedProgress;
  NSObject<OS_dispatch_queue> *_queue;
  struct FBVideoItemUploadFlowProcessOptions { BOOL logTranscodeTraceInfo; BOOL resumeTranscoderOnForeground; BOOL streamingUpload; BOOL trackVideoTrimMismatch; BOOL trackVideoMuteMismatch; BOOL supportCloudMediaFetching; BOOL isH264BaselineProfile; BOOL fixAvCompositionFileSize; BOOL canUploadHDR; BOOL canUploadRaw; BOOL enableAudioTrimAlarmFix; BOOL enableEventExtraDebugLogging; BOOL stripLocationMetadata; BOOL enableUnifiedVideoProcessor; BOOL skipTranscoding; BOOL transcodingOnly; BOOL createTranscoderInBackground; BOOL cleanUpTranscoderFactoryOnComplete; BOOL enableRetryForMissingAsset; BOOL enableMissingAssetAssetRetryOnce; BOOL uploadMosClientSideCalculationEnabled; BOOL shouldCalculateUnifiedUploadMosClientSideUseV2; BOOL notifyOnRenderSuspended; struct { double intercept; double coeffIsTargetHdr; double coeffIsPassthroughUpload; double coeffIsTargetCodecHEVC; double coeffSourceResolutionLog; double coeffArClassV2Log; double coeffTargetBitrateBpsLog; double coeffKeyFrameSizeLog; double coeffPartialFrameSizeLog; double coeffFrameRateLog; double coeffRatioOfSrcTargetBitrate; double coeffRatioOfSrcTargetResolution; } uploadMosClientSideCoefficients; struct { double v2Intercept; double v2CoeffIsTargetHdr; double v2CoeffSourceBitrateSigmoid; double v2CoeffSourceFramerate; double v2CoeffSourceResolutionSigmoid; double v2CoeffSourceToUploadBitrateSigmoid; double v2CoeffSpatialSsimPow; double v2CoeffUploadFramerate; double v2CoeffUploadResolutionSigmoid; double v2PowerTransformExponentSpatialSsim; double v2PowerTransformScale; } uploadMosClientSideCoefficientsV2; BOOL uploadMosClientSideCalculationLoggingEnabled; float progressUpdateInterval; } _options;
  NSArray *_timeStamps;
  NSMutableArray *_events_info;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastVideoSegmentPresentationTime;
  NSDictionary *_extraDebugInfo;
  unsigned long long _segmentIndex;
}

@property (weak, nonatomic) NSObject<FBMediaProcessingDelegate> *delegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithAsset:(id)asset videoComposition:(id)composition rawExportData:(id)data logger:(id)logger transcoderFactory:(id /* block */)factory transcoderFactoryAsync:(id /* block */)async queue:(id)queue extraDebugInfo:(id)info options:(struct FBVideoItemUploadFlowProcessOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x23; struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; } x24; BOOL x25; float x26; })options;
- (id)initWithAsset:(id)asset videoComposition:(id)composition rawExportData:(id)data logger:(id)logger transcoderFactory:(id /* block */)factory transcoderFactoryAsync:(id /* block */)async outputAdapter:(id)adapter queue:(id)queue extraDebugInfo:(id)info options:(struct FBVideoItemUploadFlowProcessOptions { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; } x23; struct { double x0; double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; } x24; BOOL x25; float x26; })options;
- (void)startProcessing:(id)processing;
- (void)cancel;
- (void)cleanup;
- (unsigned long long)estimatedOutputFileSize;
- (BOOL)shouldRestartUploadForNewMediaProcessor:(id)processor;
- (id)cloneProcessorForRetry;
- (void)_stripLocationData:(id)data asset:(id)asset rawExportGroup:(id)group completion:(id /* block */)completion;
- (void)_stripLocationData:(id)data asset:(id)asset;
- (void)_didFailProcessFlow:(id)flow shouldAttemptRawUpload:(BOOL)upload;
- (void)_maybeCalculateUploadMosClientSide;
- (void)_didBecomeActive;
@end

#endif /* FBVideoItemUploadFlowProcessor_h */
