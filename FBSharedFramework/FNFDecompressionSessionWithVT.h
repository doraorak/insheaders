//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFDecompressionSessionWithVT_h
#define FNFDecompressionSessionWithVT_h
@import Foundation;

#include "FNFDecompressionSession-Protocol.h"
#include "FNFDecompressionSessionDebuggerForAVC1.h"

@class NSMutableDictionary, NSString;
@protocol FNFDecompressionSessionDelegate, OS_dispatch_queue, {vector<std::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::tuple<unsigned long long, opaqueCMSampleBuffer *> *, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>>="__value_"^v}};

@interface FNFDecompressionSessionWithVT : NSObject<FNFDecompressionSession> {
  /* instance variables */
  NSObject<FNFDecompressionSessionDelegate> *_delegate;
  struct OpaqueVTDecompressionSession * _decompressionSession;
  NSObject<OS_dispatch_queue> *_decompressionSessionQueue;
  struct CGSize { double width; double height; } _inputSize;
  BOOL _firstFrameEnqueued;
  NSMutableDictionary *_destinationPixelBufferAttributes;
  FNFDecompressionSessionDebuggerForAVC1 *_debugger;
  BOOL _firstFrameDecoded;
  struct _fnf_avc1_frame_check_t { BOOL success; BOOL isKeyframe; int naluCount; } _firstFrameCheck;
  BOOL _didErrorOut;
  BOOL _didWarnOut;
  BOOL _invalidated;
  struct FNFDecompressionConfig { BOOL debuggingErrorEnabled; BOOL badFrameFix; unsigned int recoverDecodeFrameFailureTimes; unsigned int maxGopStoredFrameCount; unsigned int av1NumberOfDecoderThreads; unsigned int av1MaxFrameDelay; BOOL shouldReuseDav1dDecoder; unsigned int numOfPrewarmedDav1dDecoders; unsigned int decodingSlownessDetectionPeriod; unsigned int decodingSlownessDetectionThreshold; double decodingSlownessTimeLimit; BOOL enableAV1DecodingWithVT; BOOL enableDecompressionSessionTargetGlobalQueue; BOOL disableVTAsynchronousDecompression; BOOL disableVT1xRealTimePlayback; BOOL disableVTTemporalProcessing; BOOL enableAsyncVTDecompressionSessionCreation; BOOL disableAtomicThreadFence; } _config;
  struct vector<std::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>> { void *__begin_; void *__end_; struct __compressed_pair<std::tuple<unsigned long long, opaqueCMSampleBuffer *> *, std::allocator<std::tuple<unsigned long long, opaqueCMSampleBuffer *>>> { void *__value_; } __end_cap_; } _gopFrames;
  BOOL _gopOverflow;
  struct __CVPixelBufferPool * _pixelBufferPool;
  unsigned long long _codec;
  NSString *_transferFunction;
}

@property (readonly, nonatomic) struct opaqueCMFormatDescription * format;
@property (readonly, nonatomic) NSString *decompressionSessionType;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)errorDomain;

/* instance methods */
- (id)initWithDelegate:(id)delegate sampleBufferFormatDescription:(struct opaqueCMFormatDescription *)description videoSize:(struct CGSize { double x0; double x1; })size async:(BOOL)async config:(struct FNFDecompressionConfig { BOOL x0; BOOL x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; BOOL x6; unsigned int x7; unsigned int x8; unsigned int x9; double x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; })config;
- (int)createVTDecompressionSessionWithVideoSize:(struct CGSize { double x0; double x1; })size;
- (void)_setupPixelBufferPool;
- (void)_delegateErrorOut:(id)out frameIndex:(const unsigned long long *)index;
- (void)_delegateWarning:(int)warning isFirstFrame:(BOOL)frame sanityCheck:(struct _fnf_avc1_frame_sanity_t { struct _fnf_avc1_frame_check_t { BOOL x0; BOOL x1; int x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; })check fixResult:(BOOL)result;
- (int)_decodeFrame:(struct opaqueCMSampleBuffer *)frame index:(unsigned long long)index fixResult:(id)result frameCheck:(struct _fnf_avc1_frame_sanity_t { struct _fnf_avc1_frame_check_t { BOOL x0; BOOL x1; int x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; })check enqueueInfo:(id)info rotation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotation;
- (void)_handleDecodeResult:(int)result imageBuffer:(struct __CVBuffer *)buffer frameIndex:(unsigned long long)index presentationTimeStamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })stamp presentationDuration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration frameFixResult:(id)result frameCheck:(struct _fnf_avc1_frame_sanity_t { struct _fnf_avc1_frame_check_t { BOOL x0; BOOL x1; int x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; })check enqueueInfo:(id)info rotation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotation;
- (void)_destroyDecompressionSession;
- (int)_resetDecompressionSession;
- (void)_storeGopFrame:(struct opaqueCMSampleBuffer *)frame index:(unsigned long long)index isKeyframe:(BOOL)keyframe;
- (void)_clearGopFrames;
- (int)_feedGopFramesForRecovery;
- (int)_recoverDecodeFrameFailure;
- (void)closeSession;
- (void)enqueueSampleBuffer:(struct opaqueCMSampleBuffer *)buffer iFrame:(unsigned long long)frame enqueueInfo:(id)info rotation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotation;
- (void)_decodeSampleBuffer:(struct opaqueCMSampleBuffer *)buffer iFrame:(unsigned long long)frame enqueueInfo:(id)info rotation:(struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })rotation;
- (unsigned char)canAcceptFormatDescription:(struct opaqueCMFormatDescription *)description;
- (struct CGSize { double x0; double x1; })inputSize;
- (void)_dropFrame:(unsigned long long)frame enqueueInfo:(id)info;
- (BOOL)_codecIsAvcOrHevc;
- (BOOL)_debuggingErrorEnabled;
- (unsigned int)_pixelBufferPixelFormatType;
@end

#endif /* FNFDecompressionSessionWithVT_h */
