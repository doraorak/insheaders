//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef MOSImageRequest_h
#define MOSImageRequest_h
@import Foundation;

#include "MOSAdaptiveImageQueryStringComponents.h"
#include "MOSImageRequestInterfacing-Protocol.h"
#include "MSGEncryptedRequestPayload.h"

@class NSArray, NSData, NSString, NSURL;
@protocol FBFeatureAttributionContextProtocol, MOSImageProcessor, OS_dispatch_queue;

@interface MOSImageRequest : NSObject<MOSImageRequestInterfacing> {
  /* instance variables */
  NSURL *_url;
}

@property (nonatomic) long long imageFetchPriority;
@property (readonly, nonatomic) unsigned long long cacheBehavior;
@property (readonly, nonatomic) unsigned long long fetchBehavior;
@property (readonly, nonatomic) BOOL retrieveDiskCachePath;
@property (readonly, nonatomic) unsigned long long progressiveConfig;
@property (readonly, nonatomic) BOOL shouldBackgroundDecodeImage;
@property (readonly, nonatomic) int loggingRequestId;
@property (readonly, nonatomic) BOOL isPrefetchRequest;
@property (readonly, nonatomic) BOOL requiresPrefetchingCompletion;
@property (readonly, nonatomic) NSString *memoryCacheKey;
@property (readonly, nonatomic) NSString *processedMemoryCacheKey;
@property (readonly, nonatomic) unsigned long long desiredImageFlag;
@property (readonly, copy, nonatomic) id /* block */ imageCompletionBlock;
@property (readonly, copy, nonatomic) id /* block */ imageProgressBlock;
@property (readonly, copy, nonatomic) id /* block */ previewCompletionBlock;
@property BOOL isCancelled;
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *callbackQueue;
@property (readonly, copy, nonatomic) NSArray *analyticsContext;
@property (readonly, nonatomic) NSObject<FBFeatureAttributionContextProtocol> *attributionContext;
@property (readonly, nonatomic) MOSAdaptiveImageQueryStringComponents *adaptiveQueryComponents;
@property (readonly, nonatomic) NSObject<MOSImageProcessor> *imageProcessor;
@property (readonly, nonatomic) double requestStartTime;
@property (readonly, nonatomic) NSData *previewPayload;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } previewSize;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } viewPortSizeInPixels;
@property (readonly, nonatomic) long long requestedImageMaxPixelSize;
@property (readonly, nonatomic) long long productImageMaxPixelSize;
@property (readonly, nonatomic) BOOL isASmartFetchRequest;
@property (readonly, nonatomic) unsigned long long productMediaFormat;
@property (readonly, nonatomic) MSGEncryptedRequestPayload *encryptedRequestPayload;
@property (readonly, nonatomic) NSURL *smartFetchUrl;
@property (readonly, nonatomic) BOOL isSponsored;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithUrl:(id)url smartFetchUrl:(id)url isASmartFetchRequest:(BOOL)request memoryCacheKey:(id)key processedMemoryCacheKey:(id)key cacheBehavior:(unsigned long long)behavior fetchBehavior:(unsigned long long)behavior retrieveDiskCachePath:(BOOL)path imageFetchPriority:(long long)priority shouldBackgroundDecodeImage:(BOOL)image isPrefetchRequest:(BOOL)request requiresPrefetchingCompletion:(BOOL)completion progressiveConfig:(unsigned long long)config desiredImageFlag_deprecated:(unsigned long long)flag_deprecated requestStartTime:(double)time loggingRequestId:(int)id analyticsContext:(id)context attributionContext:(id)context previewPayload:(id)payload previewSize:(struct CGSize { double x0; double x1; })size viewPortSizeInPixels:(struct CGSize { double x0; double x1; })pixels requestedImageMaxPixelSize:(long long)size productImageMaxPixelSize:(long long)size adaptiveQueryComponents:(id)components imageProcessor:(id)processor productMediaFormat:(unsigned long long)format encryptedRequestPayload:(id)payload isSponsored:(BOOL)sponsored callbackQueue:(id)queue imageCompletionBlock:(id /* block */)block previewCompletionBlock:(id /* block */)block imageProgressBlock:(id /* block */)block;
- (void)begin;
- (void)cancel;
- (id)url;
- (id)module;
- (BOOL)shouldDispatchCallbackForCancelledRequest:(BOOL)request;
@end

#endif /* MOSImageRequest_h */
