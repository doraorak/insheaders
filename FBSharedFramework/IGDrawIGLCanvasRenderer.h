//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGDrawIGLCanvasRenderer_h
#define IGDrawIGLCanvasRenderer_h
@import Foundation;

#include "IGLContext.h"
#include "IGLView.h"
#include "NSObject-Protocol.h"

@class NSString;
@protocol {shared_ptr<igl::IFramebuffer>="__ptr_"^{IFramebuffer}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::drawable::Drawable>="__ptr_"^{Drawable}"__cntrl_"^{__shared_weak_count}}, {unique_ptr<iglu::renderpass::ForwardRenderPass, std::default_delete<iglu::renderpass::ForwardRenderPass>>="__ptr_"{__compressed_pair<iglu::renderpass::ForwardRenderPass *, std::default_delete<iglu::renderpass::ForwardRenderPass>>="__value_"^{ForwardRenderPass}}}, {unordered_map<std::string, std::shared_ptr<igl::IShaderLibrary>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::IShaderLibrary>>>>="__table_"{__hash_table<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}};

@interface IGDrawIGLCanvasRenderer : NSObject<NSObject> {
  /* instance variables */
  IGLView *_iglView;
  IGLContext *_iglContext;
  struct unique_ptr<iglu::renderpass::ForwardRenderPass, std::default_delete<iglu::renderpass::ForwardRenderPass>> { struct __compressed_pair<iglu::renderpass::ForwardRenderPass *, std::default_delete<iglu::renderpass::ForwardRenderPass>> { struct ForwardRenderPass *__value_; } __ptr_; } _renderPass;
  struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _offscreenFB;
  struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _onscreenFB;
  struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _activeFB;
  struct shared_ptr<iglu::drawable::Drawable> { struct Drawable *__ptr_; struct __shared_weak_count *__cntrl_; } _fullScreenDrawable;
  struct unordered_map<std::string, std::shared_ptr<igl::IShaderLibrary>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::IShaderLibrary>>>> { struct __hash_table<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::shared_ptr<igl::IShaderLibrary>>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _libraries;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)performBlockInContext:(id /* block */)context;
- (struct CGSize { double x0; double x1; })canvasSizeInPixels;
- (id)view;
- (id)currentDrawing;
- (long long)preferredFramesPerSecond;
- (void)setPreferredFramesPerSecond:(long long)second;
- (BOOL)onscreenBegin;
- (void)onscreenEnd;
- (void)offscreenClear;
- (void)offscreenBegin;
- (void)offscreenEnd;
- (void)offscreenDraw;
- (void)pause;
- (void)resume;
- (struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device;
@end

#endif /* IGDrawIGLCanvasRenderer_h */
