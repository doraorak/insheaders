//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef _FBMemoryDataCacheUsingFollyConcurrentHashMap_h
#define _FBMemoryDataCacheUsingFollyConcurrentHashMap_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSMutableOrderedSet, NSString;
@protocol OS_dispatch_queue, {ConcurrentHashMap<std::string, DataWrapper, std::hash<std::string>, std::equal_to<std::string>, std::allocator<unsigned char>, (unsigned char)'\b', std::atomic, std::mutex, folly::detail::concurrenthashmap::bucket::BucketTable>="load_factor_"f"segments_"[256{atomic<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *>="__a_"{__cxx_atomic_impl<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *, std::__cxx_atomic_base_impl<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *>>="__a_value"A^v}}]"size_"Q"max_size_"Q"cohort_"{atomic<folly::hazptr_obj_cohort<> *>="__a_"{__cxx_atomic_impl<folly::hazptr_obj_cohort<> *, std::__cxx_atomic_base_impl<folly::hazptr_obj_cohort<> *>>="__a_value"A^v}}"beginSeg_"{atomic<unsigned long long>="__a_"{__cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>>="__a_value"AQ}}"endSeg_"{atomic<unsigned long long>="__a_"{__cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>>="__a_value"AQ}}};

@interface _FBMemoryDataCacheUsingFollyConcurrentHashMap : NSObject<NSObject> {
  /* instance variables */
  struct ConcurrentHashMap<std::string, DataWrapper, std::hash<std::string>, std::equal_to<std::string>, std::allocator<unsigned char>, (unsigned char)'\b', std::atomic, std::mutex, folly::detail::concurrenthashmap::bucket::BucketTable> { float load_factor_; struct atomic<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *> { struct __cxx_atomic_impl<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *, std::__cxx_atomic_base_impl<folly::detail::ConcurrentHashMapSegment<std::string, DataWrapper, '\b'> *>> { atomic  __a_value; void * x0; } __a_; } x[256] segments_; unsigned long long size_; unsigned long long max_size_; struct atomic<folly::hazptr_obj_cohort<> *> { struct __cxx_atomic_impl<folly::hazptr_obj_cohort<> *, std::__cxx_atomic_base_impl<folly::hazptr_obj_cohort<> *>> { atomic  __a_value; void * x0; } __a_; } cohort_; struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> { atomic  __a_value; unsigned long long x0; } __a_; } beginSeg_; struct atomic<unsigned long long> { struct __cxx_atomic_impl<unsigned long long, std::__cxx_atomic_base_impl<unsigned long long>> { atomic  __a_value; unsigned long long x0; } __a_; } endSeg_; } _cache;
  unsigned long long _bytesUsed;
  NSMutableOrderedSet *_lru;
  NSObject<OS_dispatch_queue> *_lruUpdateQueue;
  id /* block */ _evictionCompletion;
}

@property (readonly, copy, nonatomic) NSString *name;
@property (readonly, nonatomic) unsigned long long capacityInBytes;
@property (readonly, nonatomic) unsigned long long maxFileCount;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithName:(id)name capacityInBytes:(unsigned long long)bytes maxFileCount:(unsigned long long)count evictionCompletion:(id /* block */)completion;
- (id)cachePathForKey:(id)key;
- (BOOL)containsDataForKey:(id)key;
- (id)dataForKey:(id)key;
- (unsigned long long)dataLengthForKey:(id)key;
- (id)inputStreamForKey:(id)key;
- (BOOL)isEmpty;
- (id)outputStreamForKey:(id)key append:(BOOL)append analyticsTags:(id)tags;
- (id)outputStreamForKey:(id)key append:(BOOL)append analyticsModule:(id)module;
- (id)removeAllDataWithDeletionBlock:(id /* block */)block;
- (void)removeDataForKey:(id)key;
- (void)setData:(id)data forKey:(id)key;
- (void)setData:(id)data forKey:(id)key atomically:(BOOL)atomically;
- (void)updateAccessTimeForKey:(id)key;
- (id)dataForKey:(id)key analyticsTags:(id)tags;
- (void)setData:(id)data forKey:(id)key analyticsTags:(id)tags;
- (void)removeAllData:(id /* block */)data;
- (id)dataInputStreamForKey:(id)key analyticsTags:(id)tags;
- (id)dataOutputStreamForKey:(id)key analyticsTags:(id)tags;
@end

#endif /* _FBMemoryDataCacheUsingFollyConcurrentHashMap_h */
