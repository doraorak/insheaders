//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGRealtimeMqttClient_h
#define IGRealtimeMqttClient_h
@import Foundation;

#include "FBMQTTChannelCoordinating-Protocol.h"
#include "FBTimer.h"
#include "IGAnalyticsEventLoggingProtocol-Protocol.h"
#include "IGApplicationWillEnterForegroundCriticalEventsListener-Protocol.h"
#include "IGRealtimeMqttClientLogger.h"
#include "IGRealtimeNetworkResourceManager.h"
#include "IGRealtimeOctaneSyncManager.h"
#include "IGRealtimeServerPayloadHandlerRegistry.h"
#include "IGScopeEnding-Protocol.h"
#include "IGUserLauncherSetProviding-Protocol.h"

@class NSArray, NSString;
@protocol IGRealtimeClientAnnouncer, IGRealtimeConnectionStatusAnnouncer, IGRealtimeOctaneAnnouncer, OS_dispatch_queue;

@interface IGRealtimeMqttClient : NSObject<IGScopeEnding, IGApplicationWillEnterForegroundCriticalEventsListener> {
  /* instance variables */
  NSObject<FBMQTTChannelCoordinating> *_mqttChannelCoordinator;
  IGRealtimeServerPayloadHandlerRegistry *_irisServerPayloadHandlerRegistry;
  IGRealtimeServerPayloadHandlerRegistry *_octaneServerPayloadHandlerRegistry;
  struct { BOOL sandboxEnabled; BOOL shouldSubscribeToLiveTopic; BOOL shouldAllow24hReplay; BOOL shouldLogRealtimeAnalytics; BOOL enableFizz; BOOL enableCallbackOffMainQueue; BOOL mqttPresenceAppForegroundReportingEnabled; BOOL mqttPresenceAppBackgroundReportingEnabled; BOOL msysPresenceConsumptionEnabled; BOOL shouldLogPresenceAppStateChange; BOOL publishTimeoutReconnectFixEnabled; BOOL mqttConnectionEnabled; BOOL mqttConnectionShouldShareEventBase; BOOL loadsheddingHandlingEnabled; BOOL enableEndpointRewriting; BOOL enableQPL; struct { BOOL enabled; BOOL connectEnabled; long long lowSpeedConnackLatencyInMs; long long midSpeedConnackLatencyInMs; long long highSpeedConnackLatencyInMs; long long lowSpeedConnectTimeoutInSeconds; long long midSpeedConnectTimeoutInSeconds; long long highSpeedConnectTimeoutInSeconds; long long lowSpeedPingIntervalInSeconds; long long midSpeedPingIntervalInSeconds; long long highSpeedPingIntervalInSeconds; long long lowSpeedPingLatencyInMs; long long midSpeedPingLatencyInMs; long long highSpeedPingLatencyInMs; long long lowSpeedPingTimeoutInSeconds; long long midSpeedPingTimeoutInSeconds; long long highSpeedPingTimeoutInSeconds; long long lowSpeedPublishTimeoutInSeconds; long long midSpeedPublishTimeoutInSeconds; long long highSpeedPublishTimeoutInSeconds; } personalizationConfig; struct { long long clientKeepAliveInSeconds; long long clientKeepAliveTimeoutInSeconds; long long serverKeepAliveScheduleDiff; unsigned char warmStartEarlyPingEnabled; double clientKeepAliveWarmStartTimeoutInSeconds; double clientKeepAliveWarmStartLastForegroundingDiff; } keepAliveConfig; struct { BOOL fastModeReconnectEnabled; BOOL publishPendingSendsOnConnAck; long long connectTimeoutInSeconds; long long validConnectionIntervalInSeconds; double initialReconnectBackoffInSeconds; double maxReconnectBackoffInSeconds; long long publishTimeoutInSeconds; long long publishTtlInMs; long long initialFastModeReconnectAttempts; } schedulingConfig; BOOL mqttFallbackEnabled; long long numFailuresForFallback; BOOL isMCPEnabled; } _clientConfiguration;
  IGRealtimeMqttClientLogger *_mqttClientLogger;
  NSObject<IGRealtimeClientAnnouncer> *_announcer;
  NSObject<IGRealtimeConnectionStatusAnnouncer> *_connectionStatusAnnouncer;
  IGRealtimeNetworkResourceManager *_networkResourceManager;
  NSArray *_topics;
  NSString *_userPK;
  int _connectingCount;
  double _lastConnectionStatusChangeTimestamp;
  NSObject<OS_dispatch_queue> *_mqttCallbackQueue;
  NSString *_clientSessionId;
  NSObject<IGAnalyticsEventLoggingProtocol> *_analyticsLogger;
  BOOL _mqttConnectionClientEnabled;
  IGRealtimeOctaneSyncManager *_octaneSyncManager;
  IGRealtimeOctaneSyncManager *_messageStreamingSyncManager;
  NSObject<IGRealtimeOctaneAnnouncer> *_octaneAnnouncer;
  NSObject<IGUserLauncherSetProviding> *_launcherSet;
  BOOL _shouldDisconnectInBackground;
  FBTimer *_mqttDisconnectionTimer;
  int _mqttIntervalBeforeDisconnection;
  BOOL _hasActiveCall;
  BOOL _hasStartedConnection;
}

@property (readonly) unsigned long long status;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithUserPK:(id)pk authHeader:(id)header appID:(id)id mqttHost:(id)host mqttFallbackHost:(id)host mqttDeliverySandboxHost:(id)host networkResourceManager:(id)manager analyticsLogger:(id)logger clientConfiguration:(struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; struct { BOOL x0; BOOL x1; long long x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; long long x10; long long x11; long long x12; long long x13; long long x14; long long x15; long long x16; long long x17; long long x18; long long x19; } x16; struct { long long x0; long long x1; long long x2; unsigned char x3; double x4; double x5; } x17; struct { BOOL x0; BOOL x1; long long x2; long long x3; double x4; double x5; long long x6; long long x7; long long x8; } x18; BOOL x19; long long x20; BOOL x21; })configuration launcherSet:(id)set userScopedObjects:(id)objects;
- (void)dealloc;
- (void)_mqttConnectStatusDidChange:(id)change;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (void)connect;
- (void)applicationWillEnterForegroundListener;
- (void)_didEnterBackground;
- (void)unsubscribe:(id)unsubscribe;
- (void)publishToTopic:(id)topic payload:(id)payload successBlock:(id /* block */)block failureBlock:(id /* block */)block timeoutBlock:(id /* block */)block;
- (void)registerIrisServerPayloadHandler:(id)handler forRoutingRule:(id)rule;
- (void)unregisterIrisServerPayloadHandler:(id)handler forRoutingRule:(id)rule;
- (void)registerOctaneServerPayloadHandler:(id)handler forRoutingRule:(id)rule;
- (void)unregisterOctaneServerPayloadHandler:(id)handler forRoutingRule:(id)rule;
- (void)scopeWillEnd;
- (void)requestSnapshot;
@end

#endif /* IGRealtimeMqttClient_h */
