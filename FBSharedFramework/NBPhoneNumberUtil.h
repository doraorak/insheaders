//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef NBPhoneNumberUtil_h
#define NBPhoneNumberUtil_h
@import Foundation;

@class NSDictionary, NSMutableDictionary;

@interface NBPhoneNumberUtil : NSObject

@property (readonly, nonatomic) NSMutableDictionary *coreMetaData;
@property (retain, nonatomic) NSMutableDictionary *mapCCode2CN;
@property (retain, nonatomic) NSMutableDictionary *mapCN2CCode;
@property (readonly, nonatomic) NSDictionary *DIGIT_MAPPINGS;

/* class methods */
+ (id)sharedInstance;
+ (id)sharedInstanceForTest;
+ (id)stringByTrimming:(id)trimming;

/* instance methods */
- (BOOL)hasValue:(id)value;
- (id)regularExpressionWithPattern:(id)pattern options:(unsigned long long)options error:(id *)error;
- (id)componentsSeparatedByRegex:(id)regex regex:(id)regex;
- (long long)stringPositionByRegex:(id)regex regex:(id)regex;
- (long long)indexOfStringByString:(id)string target:(id)target;
- (id)replaceFirstStringByRegex:(id)regex regex:(id)regex withTemplate:(id)template;
- (id)replaceStringByRegex:(id)regex regex:(id)regex withTemplate:(id)template;
- (id)matcheFirstByRegex:(id)regex regex:(id)regex;
- (id)matchesByRegex:(id)regex regex:(id)regex;
- (id)matchedStringByRegex:(id)regex regex:(id)regex;
- (BOOL)isStartingStringByRegex:(id)regex regex:(id)regex;
- (id)stringByReplacingOccurrencesString:(id)string withMap:(id)map removeNonMatches:(BOOL)matches;
- (BOOL)isNaN:(id)n;
- (id)getNationalSignificantNumber:(id)number;
- (id)regionCodeFromCountryCode:(unsigned int)code;
- (id)countryCodeFromRegionCode:(id)code;
- (id)init;
- (id)initWithPhoneNumberMetadata:(id)metadata;
- (id)initForTest;
- (id)loadMetadata:(id)metadata;
- (void)initRegularExpressionSet;
- (void)dealloc;
- (void)clearCC2CN;
- (void)clearCN2CC;
- (void)initNormalizationMappings;
- (void)initCC2CN;
- (id)extractPossibleNumber:(id)number;
- (BOOL)isViablePhoneNumber:(id)number;
- (id)normalizePhoneNumber:(id)number;
- (void)normalizeSB:(id *)sb;
- (id)normalizeDigitsOnly:(id)only;
- (id)convertAlphaCharactersInNumber:(id)number;
- (unsigned long long)getLengthOfGeographicalAreaCode:(id)code error:(id *)error;
- (unsigned long long)getLengthOfGeographicalAreaCode:(id)code;
- (unsigned long long)getLengthOfNationalDestinationCode:(id)code error:(id *)error;
- (unsigned long long)getLengthOfNationalDestinationCode:(id)code;
- (id)normalizeHelper:(id)helper normalizationReplacements:(id)replacements removeNonMatches:(BOOL)matches;
- (BOOL)formattingRuleHasFirstGroupOnly:(id)only;
- (BOOL)isNumberGeographical:(id)geographical;
- (BOOL)isValidRegionCode:(id)code;
- (BOOL)hasValidCountryCallingCode:(unsigned int)code;
- (id)format:(id)format numberFormat:(int)format error:(id *)error;
- (id)format:(id)format numberFormat:(int)format;
- (id)formatByPattern:(id)pattern numberFormat:(int)format userDefinedFormats:(id)formats error:(id *)error;
- (id)formatByPattern:(id)pattern numberFormat:(int)format userDefinedFormats:(id)formats;
- (id)formatNationalNumberWithCarrierCode:(id)code carrierCode:(id)code error:(id *)error;
- (id)formatNationalNumberWithCarrierCode:(id)code carrierCode:(id)code;
- (id)getMetadataForRegionOrCallingCode:(unsigned int)code regionCode:(id)code;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)code fallbackCarrierCode:(id)code error:(id *)error;
- (id)formatNationalNumberWithPreferredCarrierCode:(id)code fallbackCarrierCode:(id)code;
- (id)formatNumberForMobileDialing:(id)dialing regionCallingFrom:(id)from withFormatting:(BOOL)formatting error:(id *)error;
- (id)formatNumberForMobileDialing:(id)dialing regionCallingFrom:(id)from withFormatting:(BOOL)formatting;
- (id)formatOutOfCountryCallingNumber:(id)number regionCallingFrom:(id)from error:(id *)error;
- (id)formatOutOfCountryCallingNumber:(id)number regionCallingFrom:(id)from;
- (id)prefixNumberWithCountryCallingCode:(unsigned int)code phoneNumberFormat:(int)format formattedNationalNumber:(id)number formattedExtension:(id)extension;
- (id)formatInOriginalFormat:(id)format regionCallingFrom:(id)from error:(id *)error;
- (id)formatInOriginalFormat:(id)format regionCallingFrom:(id)from;
- (BOOL)rawInputContainsNationalPrefix:(id)prefix nationalPrefix:(id)prefix regionCode:(id)code;
- (BOOL)hasUnexpectedItalianLeadingZero:(id)zero;
- (BOOL)hasFormattingPatternForNumber:(id)number;
- (id)formatOutOfCountryKeepingAlphaChars:(id)chars regionCallingFrom:(id)from error:(id *)error;
- (id)formatOutOfCountryKeepingAlphaChars:(id)chars regionCallingFrom:(id)from;
- (id)formatNsn:(id)nsn metadata:(id)metadata phoneNumberFormat:(int)format carrierCode:(id)code;
- (id)chooseFormattingPatternForNumber:(id)number nationalNumber:(id)number;
- (id)formatNsnUsingPattern:(id)pattern formattingPattern:(id)pattern numberFormat:(int)format carrierCode:(id)code;
- (id)getExampleNumber:(id)number error:(id *)error;
- (id)getExampleNumber:(id)number;
- (id)getExampleNumberForType:(id)type type:(int)type error:(id *)error;
- (id)getExampleNumberForType:(id)type type:(int)type;
- (id)getExampleNumberForNonGeoEntity:(unsigned int)entity error:(id *)error;
- (id)getExampleNumberForNonGeoEntity:(unsigned int)entity;
- (id)maybeGetFormattedExtension:(id)extension metadata:(id)metadata numberFormat:(int)format;
- (id)getNumberDescByType:(id)type type:(int)type;
- (int)getNumberType:(id)type;
- (int)getNumberTypeHelper:(id)helper metadata:(id)metadata;
- (id)getMetadataForRegion:(id)region;
- (id)getMetadataForNonGeographicalRegion:(unsigned int)region;
- (BOOL)isNumberMatchingDesc:(id)desc numberDesc:(id)desc;
- (BOOL)isValidNumber:(id)number;
- (BOOL)isValidNumberForRegion:(id)region regionCode:(id)code;
- (id)getRegionCodeForNumber:(id)number;
- (id)getRegionCodeForNumberFromRegionList:(id)list regionCodes:(id)codes;
- (id)getRegionCodeForCountryCode:(unsigned int)code;
- (id)getRegionCodesForCountryCode:(unsigned int)code;
- (unsigned int)getCountryCodeForRegion:(id)region;
- (unsigned int)getCountryCodeForValidRegion:(id)region error:(id *)error;
- (unsigned int)getCountryCodeForValidRegion:(id)region;
- (id)getNddPrefixForRegion:(id)region stripNonDigits:(BOOL)digits;
- (BOOL)isNANPACountry:(id)nanpacountry;
- (BOOL)isLeadingZeroPossible:(unsigned int)possible;
- (BOOL)isAlphaNumber:(id)number;
- (BOOL)isPossibleNumber:(id)number error:(id *)error;
- (BOOL)isPossibleNumber:(id)number;
- (int)testNumberLengthAgainstPattern:(id)pattern number:(id)number;
- (int)isPossibleNumberWithReason:(id)reason error:(id *)error;
- (int)isPossibleNumberWithReason:(id)reason;
- (BOOL)isPossibleNumberString:(id)string regionDialingFrom:(id)from error:(id *)error;
- (BOOL)isPossibleNumberString:(id)string regionDialingFrom:(id)from;
- (BOOL)truncateTooLongNumber:(id)number error:(id *)error;
- (BOOL)truncateTooLongNumber:(id)number;
- (unsigned int)extractCountryCode:(id)code nationalNumber:(id *)number;
- (unsigned int)maybeExtractCountryCode:(id)code metadata:(id)metadata nationalNumber:(id *)number keepRawInput:(BOOL)input phoneNumber:(id *)number error:(id *)error;
- (unsigned int)maybeExtractCountryCode:(id)code metadata:(id)metadata nationalNumber:(id *)number keepRawInput:(BOOL)input phoneNumber:(id *)number;
- (BOOL)parsePrefixAsIdd:(id)idd sourceString:(id *)string;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)normalize possibleIddPrefix:(id)prefix error:(id *)error;
- (int)maybeStripInternationalPrefixAndNormalize:(id *)normalize possibleIddPrefix:(id)prefix;
- (BOOL)maybeStripNationalPrefixAndCarrierCode:(id *)code metadata:(id)metadata carrierCode:(id *)code error:(id *)error;
- (BOOL)maybeStripNationalPrefixAndCarrierCode:(id *)code metadata:(id)metadata carrierCode:(id *)code;
- (id)maybeStripExtension:(id *)extension;
- (BOOL)checkRegionForParsing:(id)parsing defaultRegion:(id)region;
- (id)parse:(id)parse defaultRegion:(id)region;
- (id)parse:(id)parse defaultRegion:(id)region error:(id *)error;
- (id)parseWithPhoneCarrierRegion:(id)region error:(id *)error;
- (id)countyCodeByCarrier;
- (id)parseAndKeepRawInput:(id)input defaultRegion:(id)region error:(id *)error;
- (id)parseAndKeepRawInput:(id)input defaultRegion:(id)region;
- (id)parseHelper:(id)helper defaultRegion:(id)region keepRawInput:(BOOL)input checkRegion:(BOOL)region error:(id *)error;
- (id)parseHelper:(id)helper defaultRegion:(id)region keepRawInput:(BOOL)input checkRegion:(BOOL)region;
- (void)buildNationalNumberForParsing:(id)parsing nationalNumber:(id *)number;
- (id)extractOptionalPauseComponent:(id)component numberLeftToParse:(id *)parse;
- (int)isNumberMatch:(id)match second:(id)second error:(id *)error;
- (int)isNumberMatch:(id)match second:(id)second;
- (BOOL)isNationalNumberSuffixOfTheOther:(id)other second:(id)second;
- (BOOL)canBeInternationallyDialled:(id)dialled error:(id *)error;
- (BOOL)canBeInternationallyDialled:(id)dialled;
- (BOOL)matchesEntirely:(id)entirely string:(id)string;
- (id)getAllMetadata;
@end

#endif /* NBPhoneNumberUtil_h */
