//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGAnimatedImageView_h
#define IGAnimatedImageView_h
@import Foundation;

#include "UIView.h"
#include "IGAnimatedImageRendering-Protocol.h"
#include "IGAnimatedImageViewDelegate-Protocol.h"
#include "IGAsyncTask.h"
#include "IGGIFView.h"
#include "IGImageRequest.h"
#include "IGStreamingVideoCacheRequest.h"
#include "NSObject-Protocol.h"

@class NSString, NSURL, UIActivityIndicatorView;
@protocol IGDirectInstamadilloMediaResolving;

@interface IGAnimatedImageView : UIView<NSObject> {
  /* instance variables */
  IGStreamingVideoCacheRequest *_currentRequest;
  IGImageRequest *_currentImageRequest;
  NSObject<IGDirectInstamadilloMediaResolving> *_mediaResolver;
  IGGIFView *_gifView;
  long long _maxDelay;
  UIActivityIndicatorView *_activityIndicatorView;
  IGAsyncTask *_imageFetchTask;
  double _memorySizeLimit;
  struct CGSize { double width; double height; } _renderSize;
  NSString *_stickerId;
  long long _qplInstanceKey;
}

@property (weak, nonatomic) NSObject<IGAnimatedImageViewDelegate> *delegate;
@property (retain, nonatomic) NSObject<IGAnimatedImageRendering> *renderer;
@property (readonly, nonatomic) BOOL isAnimating;
@property (retain, nonatomic) NSURL *animatedImageURL;
@property (nonatomic) BOOL shouldShowActivityIndicatorWhenLoading;
@property (nonatomic) BOOL shouldUseRichWebpRenderer;
@property (nonatomic) BOOL shouldRenderAsync;
@property (nonatomic) double playbackTime;
@property (nonatomic) double playbackRate;
@property (readonly, nonatomic) IGAsyncTask *animatedImageFetchTask;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame;
- (void)dealloc;
- (struct CGSize { double x0; double x1; })sizeThatFits:(struct CGSize { double x0; double x1; })fits;
- (void)layoutSubviews;
- (void)reset;
- (void)play;
- (void)pause;
- (void)setPlaybackRate:(double)rate time:(double)time atHostTime:(double)time;
- (void)setCutoutStickerAnimatedImageURL:(id)url withCacheIdentifier:(id)identifier stickerId:(id)id retimeModel:(id)model memorySizeLimit:(double)limit renderSize:(struct CGSize { double x0; double x1; })size;
- (void)_setAnimatedImageURL:(id)url withCacheIdentifier:(id)identifier shouldUseImageRequestForAnimatedImage:(BOOL)image retimeModel:(id)model;
- (void)setContentMode:(long long)mode;
- (void)gifViewDidStartPlayingLoop:(id)loop;
- (void)gifViewWillEndPlayingLoop:(id)loop;
- (void)gifViewDidEndPlayingLoop:(id)loop;
- (BOOL)_isCutoutVideoSticker;
- (void)_markQPLAnnotateForCutoutVideoStickerWithURL:(id)url andError:(id)error;
- (void)_markQPLDownloadingCutoutVideoStickerStarted;
- (void)_markQPLDownloadingCutoutVideoStickerCanceled;
@end

#endif /* IGAnimatedImageView_h */
