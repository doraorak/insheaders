//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef MOSImageTask_h
#define MOSImageTask_h
@import Foundation;

#include "FBCachedImage.h"
#include "MOSAdaptiveImageQueryStringComponents.h"
#include "MOSCachedImageFactory.h"
#include "MOSImageDownloaderCaching-Protocol.h"
#include "MOSImageTaskDelegate-Protocol.h"
#include "MOSImageTaskProtocol-Protocol.h"
#include "MOSQPLLogging-Protocol.h"
#include "MSGEncryptedRequestPayload.h"

@class NSData, NSMutableArray, NSString, NSURL, UIImage;
@protocol MOSAdaptiveImageDownloadStrategyProtocol, MOSImageEfficiencyLogging, MOSImageProcessor, MOSNetworkDownloadToken, MOSNetworkDownloading, MOSNetworkRequestSummary, OS_dispatch_queue, {atomic<double>="__a_"{__cxx_atomic_impl<double, std::__cxx_atomic_base_impl<double>>="__a_value"Ad}};

@interface MOSImageTask : NSObject<MOSImageTaskProtocol> {
  /* instance variables */
  NSMutableArray *_requests;
  NSURL *_url;
  NSURL *_smartFetchUrl;
  BOOL _isASmartFetchTask;
  unsigned long long _cacheBehavior;
  unsigned long long _fetchBehavior;
  BOOL _retrieveDiskCachePath;
  BOOL _shouldBackgroundDecodeImage;
  NSObject<MOSNetworkDownloading> *_networker;
  MOSCachedImageFactory *_cachedImageFactory;
  NSObject<MOSImageDownloaderCaching> *_imageCache;
  NSObject<MOSImageProcessor> *_imageProcessor;
  id /* block */ _taskCompletionBlock;
  BOOL _isWaitingForLoader;
  unsigned long long _progressiveConfig;
  double _lastProgressiveImageRefreshTime;
  struct atomic<double> { struct __cxx_atomic_impl<double, std::__cxx_atomic_base_impl<double>> { atomic  __a_value; double x0; } __a_; } _fractionCompleted;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<MOSNetworkDownloadToken> *_requestToken;
  unsigned long long _loadSource;
  BOOL _usesHighPriorityQueue;
  long long _previousScanNumber;
  long long _imageFetchPriority;
  struct MOSTaskExperimentConfig { struct FBImageCreateWithDataExperimentsConfig { BOOL skipsAllMetadata; } createImageExperimentsConfig; struct MOSProgressiveLoadingConfig { unsigned long long progressiveMinimumScanVersion; BOOL shouldNotifyAllIntermediateScans; BOOL isHttp3ProgressiveLoadSupported; BOOL isHttp3ProgressiveLoadSupportedForPrefetch; unsigned long long supportedScanForHttp3ProgressiveLoad; double progressiveImageRefreshThreshold; unsigned long long http3ProgressiveLoadPriorityDecent; } progressiveLoadingConfig; BOOL fastPathCacheKeyedOnURL; BOOL usesSharedTaskQueue; BOOL usesSerialSharedTask; BOOL usesConcurrentSharedTask; BOOL usesConcurrentHighPriorityQueueForSharedTask; BOOL bumpRequestPriorityWithoutSharedTaskQueue; BOOL isInstagramIntegrationEnabled; BOOL dontUsePJPEGForFullData; BOOL enableBasicMediaVariation; BOOL enableMediaVariationDownsampling; BOOL alwaysUseCachedImageMatchingUrlSize; BOOL restrictMediaVariationDownsamplingToSmartFetch; double mediaVariationInMemoryDownsamplingThresholdRatio; double mediaVariationOnCreationDownsamplingThresholdRatio; BOOL enableMediaVariationMultiplexingMonitoring; BOOL enableExpiredURLRefresh; BOOL enableFetchWithSmartFetchUrl; BOOL enableMediaValidation; } _experimentsConfig;
  NSString *_memoryCacheKey;
  NSString *_processedMemoryCacheKey;
  NSObject<MOSImageEfficiencyLogging> *_efficiencyLogger;
  NSObject<MOSQPLLogging> *_logger;
  int _primaryLoggingRequestId;
  unsigned long long _multiplexedRequestCount;
  UIImage *_resultPreviewImage;
  NSData *_previewPayload;
  struct CGSize { double width; double height; } _previewSize;
  struct CGSize { double width; double height; } _viewPortSizeInPixels;
  long long _requestedImageMaxPixelSize;
  long long _productImageMaxPixelSize;
  id /* block */ _dispatcher;
  NSData *_resultImageData;
  BOOL _decodedFirstPartialScanForHttp3ProgressiveLoad;
  MSGEncryptedRequestPayload *_encryptedRequestPayload;
  unsigned long long _productMediaFormat;
  MOSAdaptiveImageQueryStringComponents *_adaptiveQueryComponents;
  NSObject<MOSAdaptiveImageDownloadStrategyProtocol> *_adaptiveImageDownloadStrategy;
  NSObject<MOSNetworkRequestSummary> *_requestSummary;
  BOOL _isSponsored;
}

@property (readonly, weak, nonatomic) NSObject<MOSImageTaskDelegate> *delegate;
@property (retain, nonatomic) FBCachedImage *resultImage;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithRequest:(id)request cacheKey:(id)key networker:(id)networker imageCache:(id)cache cachedImageFactory:(id)factory dispatcher:(id /* block */)dispatcher sharedTaskQueue:(id)queue sharedHighPriorityTaskQueue:(id)queue sharedLowPriorityTaskQueue:(id)queue delegate:(id)delegate efficiencyLogger:(id)logger logger:(id)logger adaptiveImageDownloadStrategy:(id)strategy experimentsConfig:(const struct MOSTaskExperimentConfig *)config taskCompletionBlock:(id /* block */)block;
- (void)loadImage;
- (void)attachRequest:(id)request callback:(id /* block */)callback;
- (void)cancel:(id)cancel;
- (void)changeImageRequest:(id)request metadataTo:(struct { long long x0; })to;
- (void)_updateCachesWithNewCacheBehaviorIfRequired:(unsigned long long)required;
- (void)_tryDecodeImagePreview;
- (BOOL)_tryLoadingFromMemoryCache;
- (BOOL)_tryLoadingFromDiskCache;
- (id)_applyMediaVariationIfNeededToImageFromDiskCache:(id)cache;
- (void)_tryLoadingFromLoaderOrNetwork;
- (void)_tryLoadingFromNetworkLoader;
- (void)_tryLoadingFromNetworkLoaderV2;
- (void)_performValidationAndDispatchOnFailureWithImage:(id)image downloadedData:(id)data;
- (void)_validateAndUpdateCacheAndDispatchCompletionBlockWithImage:(id)image downloadedData:(id)data;
- (void)_updateCacheAndDispatchCompletionBlockWithImage:(id)image downloadedData:(id)data;
- (void)_logURLChangeForAdaptiveURL:(id)url;
- (void)_logURLChangeForFreshURL:(id)url withURLBeforeRefresh:(id)refresh;
- (id)_refreshURLIfExpired:(id)expired;
- (id)_finalURLToDownload;
- (void)_changeImageRequest:(id)request priorityTo:(long long)to;
- (id)cacheKey;
- (void)_logRequestValidity;
- (id)_attributionContextChain;
- (BOOL)_isFetch;
- (id)_analyticsTags;
- (id)_responseFromImage:(id)image imageRequest:(id)request source:(unsigned long long)source;
- (id)_invalidSessionResponseFromRequest:(id)request;
- (void)_callCompletionBlockSynchronouslyForRequest:(id)request response:(id)response;
- (void)_dispatchCallbackWithPreviewImage:(id)image;
- (void)_dispatchCallbackWithProgressiveImage:(id)image;
- (void)_dispatchCancellationForRequest:(id)request;
- (void)_dispatchCallbackWithImage:(id)image error:(id)error;
- (void)_dispatchCallbackProgressBlock;
- (void)_dispatchCallbackCacheLookupProgressBlockForRequests:(id)requests;
- (id)_cachedImageFromCompleteData:(id)data;
- (void)_storeInMemoryCache:(id)cache;
- (void)_storeInDiskCache:(id)cache;
- (BOOL)_hasCancelledOrRemovedAllRequests;
- (BOOL)_shouldDownsample;
- (void)invalidate;
- (void)_logEfficiencyEventWithRequest:(id)request status:(unsigned long long)status type:(unsigned long long)type;
- (struct { id x0; int x1; id x2; id x3; })_loggingContext;
- (struct { id x0; int x1; id x2; id x3; })_loggingContextForFastPathCacheKeyType:(id)type;
- (void)_logEvent:(unsigned long long)event data:(id)data;
- (void)_logCacheCompleteEvent:(id)event cacheType:(unsigned long long)type;
- (void)_logMultiplexedRequestEvent:(id)event;
- (void)_logMultiplexedRequestCountIfRequired;
@end

#endif /* MOSImageTask_h */
