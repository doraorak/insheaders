//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKThreadSafeLayoutController_h
#define BKThreadSafeLayoutController_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSSet, NSString;
@protocol {RCLayoutResult="layout"{RCLayout="component"@"<RCMountable>""size"{CGSize="width"d"height"d}"children"{shared_ptr<const std::vector<RCLayoutChild>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}"extra"@"NSDictionary"}"cache"{shared_ptr<const RCLayoutCache>="__ptr_"^{RCLayoutCache}"__cntrl_"^{__shared_weak_count}}};

@interface BKThreadSafeLayoutController : NSObject<NSObject> {
  /* instance variables */
  struct RCLayoutResult { struct RCLayout { <RCMountable> *component; struct CGSize { double width; double height; } size; struct shared_ptr<const std::vector<RCLayoutChild>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } children; NSDictionary *extra; } layout; struct shared_ptr<const RCLayoutCache> { struct RCLayoutCache *__ptr_; struct __shared_weak_count *__cntrl_; } cache; } _computedLayout;
  struct RCSizeRange { struct CGSize { double width; double height; } min; struct CGSize { double width; double height; } max; } _computedAtSizeRange;
  NSSet *_mountedComponents;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _layoutDataMutex;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (struct CGSize { double x0; double x1; })size;
- (const struct RCSizeRange *)constrainingSizeRange;
- (void)mountInView:(id)view context:(id)context;
- (BOOL)shouldComputeLayout:(id)layout constrainingSize:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })size;
- (struct RCLayoutResult { struct RCLayout { id x0; struct CGSize { double x0; double x1; } x1; struct shared_ptr<const std::vector<RCLayoutChild>> { void * x0; struct __shared_weak_count * x1; } x2; id x3; } x0; struct shared_ptr<const RCLayoutCache> { struct RCLayoutCache * x0; struct __shared_weak_count * x1; } x1; })layoutResultForMountable:(id)mountable constrainingSize:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })size context:(id)context writeCache:(struct unique_ptr<RCLayoutCache, std::default_delete<RCLayoutCache>> { struct __compressed_pair<RCLayoutCache *, std::default_delete<RCLayoutCache>> { struct RCLayoutCache * x0; } x0; })cache;
- (BOOL)computeLayoutWithMountableIfNecessary:(id)necessary constrainingSize:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })size context:(id)context;
- (void)updateLayoutResult:(const void *)result constrainingSize:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })size;
- (void)unmount;
- (void)dealloc;
- (const void *)computedLayout;
@end

#endif /* BKThreadSafeLayoutController_h */
