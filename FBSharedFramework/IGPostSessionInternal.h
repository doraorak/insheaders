//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGPostSessionInternal_h
#define IGPostSessionInternal_h
@import Foundation;

#include "FBMediaUploadFlowLogger.h"
#include "IGAPIClient-Protocol.h"
#include "IGAnalyticsEventLoggingProtocol-Protocol.h"
#include "IGAsyncTask.h"
#include "IGAuthHeaderStore.h"
#include "IGBlockQueue.h"
#include "IGDInstamadilloMediaUploading-Protocol.h"
#include "IGFacebookServiceHelper.h"
#include "IGImageUploadSource.h"
#include "IGPostEventListener.h"
#include "IGPostLoggingContext.h"
#include "IGPostMetadata.h"
#include "IGPostSessionContext.h"
#include "IGPostSessionLogger.h"
#include "IGPostSessionType-Protocol.h"
#include "IGPostShareAnnouncers.h"
#include "IGPostShareIntent.h"
#include "IGPostShareSessionInternal.h"
#include "IGPostUploadAnnouncer.h"
#include "IGPostUploadComposer.h"
#include "IGUploadComposition.h"
#include "IGUploadService.h"
#include "IGUploadSession.h"
#include "IGUser.h"
#include "IGUserLauncherSetProviding-Protocol.h"
#include "NSObject-Protocol.h"

@class NSArray, NSDate, NSDictionary, NSError, NSMutableDictionary, NSString;
@protocol IGPostDataProvider, IGPostSessionInternalDelegate, OS_dispatch_queue;

@interface IGPostSessionInternal : NSObject<IGPostSessionType, NSObject> {
  /* instance variables */
  NSObject<IGAnalyticsEventLoggingProtocol> *_analyticsLogger;
  NSObject<IGAPIClient> *_loggedOutNetworker;
  IGUser *_user;
  IGFacebookServiceHelper *_facebookServiceHelper;
  NSString *_postId;
  NSObject<IGUserLauncherSetProviding> *_featureSets;
  IGAuthHeaderStore *_authHeaderStore;
  NSObject<IGAPIClient> *_networker;
  IGUploadService *_uploadService;
  NSString *_uploadServicePath;
  long long _resumeCount;
  IGPostLoggingContext *_loggingContext;
  IGUploadComposition *_uploadComposition;
  IGPostUploadComposer *_uploadComposer;
  IGUploadSession *_uploadSession;
  BOOL _uploadNotRequired;
  BOOL _hasServerBurnIn;
  BOOL _enableMultiUploadSupport;
  IGPostShareSessionInternal *_shareSession;
  NSDate *_postCreationDate;
  NSDictionary *_crossAccountSharingNonces;
  NSMutableDictionary *_uploadIdToAttachmentFbid;
  IGPostShareAnnouncers *_shareAnnouncers;
  IGPostUploadAnnouncer *_uploadAnnouncer;
  FBMediaUploadFlowLogger *_mediaUploadFlowLogger;
  IGPostSessionLogger *_postSessionLogger;
  IGPostEventListener *_postEventListener;
  NSError *_lastUploadError;
  NSError *_lastShareError;
  BOOL _allowCancellationWhileInProgress;
  NSObject<OS_dispatch_queue> *_underlyingImageQueue;
  IGBlockQueue *_imageLoadingQueue;
  NSMutableDictionary *_uploadIdToInstamadilloMediaResponses;
  NSObject<IGDInstamadilloMediaUploading> *_instamadilloMediaUploadProvider;
  BOOL _encodeUploadCompositionOffMainQueue;
  NSObject<IGPostDataProvider> *_dataProvider;
  NSDictionary *_md5HashTasks;
  NSDictionary *_pdqHashTask;
  IGImageUploadSource *_videoCoverImageSource;
}

@property (weak, nonatomic) NSObject<IGPostSessionInternalDelegate> *delegate;
@property (readonly, copy, nonatomic) NSArray *uploadIds;
@property (readonly, copy, nonatomic) IGPostSessionContext *context;
@property (readonly, nonatomic) long long mediaDataType;
@property (readonly, nonatomic) long long entryPointType;
@property (readonly, nonatomic) BOOL highQuality;
@property (readonly, nonatomic) IGPostShareIntent *shareIntent;
@property (readonly, nonatomic) IGPostMetadata *metadata;
@property (readonly, nonatomic) IGAsyncTask *wearablesRequestParamsTask;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithPostId:(id)id user:(id)user multipleAccountHandler:(id)handler iglContextProvider:(id)provider analyticsLogger:(id)logger facebookServiceHelper:(id)helper featureSets:(id)sets authHeaderStore:(id)store networker:(id)networker loggedOutNetworker:(id)networker uploadService:(id)service arDependencies:(id)dependencies uploadServicePath:(id)path uploadNotRequired:(BOOL)required postDataProvider:(id)provider entryPointType:(long long)type highQuality:(BOOL)quality mediaDataType:(long long)type shareIntent:(id)intent postMetadata:(id)metadata loggingContext:(id)context uploadIdToAttachmentFbid:(id)fbid instamadilloMediaUploadProvider:(id)provider enableMultiUploadSupport:(BOOL)support wearablesRequestParamsTask:(id)task;
- (void)cancelWithReason:(id)reason;
- (id)loggingContext;
- (id)attachmentFbidForUploadId:(id)id;
- (id)instamadilloMediaResponseForUploadId:(id)id;
- (id)shareIds;
- (id)postId;
- (long long)uploadStatus;
- (double)uploadProgress;
- (void)retry;
- (void)cancelForReason:(id)reason;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (id)shares;
- (id)shareForShareId:(id)id;
- (id)createShareLoggerWithShareType:(long long)type shareId:(id)id logger:(id)logger;
- (id)debugObject:(id)object;
- (id)copyWithZone:(struct _NSZone *)zone;
- (void)_setInstamadilloMediaResponse:(id)response forUploadId:(id)id;
- (id)_instamadilloMediaUploadProviderIfAvailable;
- (void)postShareSessionInternal:(id)internal didUpdateWithContext:(id)context;
- (void)postShareSessionInternal:(id)internal shareId:(id)id serverResponse:(id)response error:(id)error;
- (void)postExternalShareDidSucceed;
- (void)uploadSession:(id)session didUpdateTotalProgress:(double)progress;
- (void)uploadSession:(id)session didChangeStatus:(long long)status serverResponse:(id)response error:(id)error;
- (void)uploadSession:(id)session didReceiveServerResponse:(id)response thumbnailServerResponse:(id)response forUploadId:(id)id error:(id)error;
- (void)uploadSession:(id)session didUpdateWithContext:(id)context;
- (void)uploadSession:(id)session didRenderImageSource:(id)source forMediaId:(id)id;
- (void)uploadSession:(id)session didGenerateVideoCoverImageSource:(id)source forMediaId:(id)id;
- (void)uploadSession:(id)session didRenderVideoUrl:(id)url forMediaId:(id)id;
- (void)uploadSessionDidSuspendVideoProcessing:(id)processing;
- (void)_stopPreventingIdlingTimer;
- (void)dealloc;
@end

#endif /* IGPostSessionInternal_h */
