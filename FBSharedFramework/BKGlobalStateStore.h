//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKGlobalStateStore_h
#define BKGlobalStateStore_h
@import Foundation;

@protocol {unordered_map<NSString *, id, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, id>>>="__table_"{__hash_table<std::__hash_value_type<NSString *, id>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>, std::allocator<std::__hash_value_type<NSString *, id>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>>="__value_"f}}}, {unordered_map<NSString *, std::vector<(anonymous namespace)::Subscription>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, std::vector<(anonymous namespace)::Subscription>>>>="__table_"{__hash_table<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>, std::allocator<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>>="__value_"f}}};

@interface BKGlobalStateStore : NSObject {
  /* instance variables */
  struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _lock;
  struct unordered_map<NSString *, id, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, id>>> { struct __hash_table<std::__hash_value_type<NSString *, id>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>, std::allocator<std::__hash_value_type<NSString *, id>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, id>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, id>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, id>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, id>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>> { float __value_; } __p3_; } __table_; } _store;
  struct unordered_map<NSString *, std::vector<(anonymous namespace)::Subscription>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>, std::allocator<std::pair<NSString *const, std::vector<(anonymous namespace)::Subscription>>>> { struct __hash_table<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>, std::allocator<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::HashFunctor<NSObject *>, FB::EqualFunctor<NSObject *>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, std::vector<(anonymous namespace)::Subscription>>, FB::EqualFunctor<NSObject *>, FB::HashFunctor<NSObject *>>> { float __value_; } __p3_; } __table_; } _subscribers;
}

/* instance methods */
- (id)fetchValueForKey:(id)key;
- (void)updateValue:(id /* block */)value forKey:(id)key;
- (id)snapshot;
@end

#endif /* BKGlobalStateStore_h */
