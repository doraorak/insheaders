//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFDashAsset_h
#define FNFDashAsset_h
@import Foundation;

#include "AVAsynchronousKeyValueLoading-Protocol.h"
#include "FNFAVAsset-Protocol.h"
#include "FNFAVPlayerItem-Protocol.h"
#include "FNFAsset-Protocol.h"
#include "FNFAssetForPlayer-Protocol.h"
#include "FNFAssetResourceLoader.h"
#include "FNFDashErrorListener.h"
#include "FNFDashEventListener-Protocol.h"
#include "FNFDashLiveSeekController.h"
#include "FNFDashPlaylist.h"
#include "FNFDashPlaylistManager.h"
#include "FNFDashQualitySelectorCreating-Protocol.h"
#include "FNFDashReplayRecording-Protocol.h"
#include "FNFDashSimpleSpeedController.h"
#include "FNFDashTargetBufferReachedProtocol-Protocol.h"
#include "FNFDashVideoPlayerMetadata.h"
#include "FNFInfoForLoopableAsset-Protocol.h"
#include "FNFLiveAVPlayerAsset-Protocol.h"
#include "FNFPSRProfileProvider-Protocol.h"
#include "FNFPSRProfiling-Protocol.h"

@class AVAudioMix, NSArray, NSData, NSError, NSMutableSet, NSString, NSURL;
@protocol FNFAssetEventListener, FNFBandwidthProvider, FNFDashFrameSequencing><FNFDashChunkManagerDelegate, FNFDashPlaylistManaging, FNFDashVideoDrmHandler, FNFLogging, OS_dispatch_queue;

@interface FNFDashAsset : NSObject<FNFDashTargetBufferReachedProtocol, FNFPSRProfileProvider, AVAsynchronousKeyValueLoading, FNFAVAsset, FNFAVPlayerItem, FNFAssetForPlayer, FNFInfoForLoopableAsset, FNFLiveAVPlayerAsset, FNFAsset> {
  /* instance variables */
  unsigned char _state;
  struct FNFDashConfig { struct FNFDashConfigGen { BOOL adaptive_lane_enable_stricter_thermal_check; long long adaptive_lane_ignore_quality_size_for_thermal; double adjusted_speed_bottom_threshold_ms; double adjusted_speed_bottom_threshold_ms_ll; double adjusted_speed_top_threshold_ms; double adjusted_speed_top_threshold_ms_ll; BOOL buffer_size_at_fetch_complete_enabled; double desired_buffer_acceptable_error_ms; double desired_buffer_ms; double desired_buffer_ms_ll; BOOL enable_fullscreen_live_seeking; BOOL enable_live_seeking_ultra_low_latency; BOOL enable_log_quic_pacing_rate; BOOL enable_normal_live_seeking; BOOL enable_prefetch_buffer_live_seeking; BOOL enable_remove_buffer_threshold_for_live; BOOL enable_round_robin_audio_quality_selector; BOOL enable_round_robin_video_quality_selector; double fetch_time_exceeded_in_seconds; long long immediate_manifest_fetch_cooldown_counter; double initial_unstall_threshold_in_second_for_excellent; double initial_unstall_threshold_in_second_for_good; double initial_unstall_threshold_in_second_for_moderate; double initial_unstall_threshold_in_second_for_poor; double initial_unstall_threshold_in_second_for_unknown; double live_seeking_change_interval_sec; long long ll_chunk_duration_ms; BOOL manifestless_use_frame_pts_start_time; long long max_live_seeking_count; double max_prefetch_buffer_stall_time; double min_time_ms_between_latency_level_change; BOOL misaligned_audio_disabled; BOOL misaligned_predictive_disabled; long long mpd_availability_endtime_padding_minutes; BOOL predictive_enabled; double predictive_manifest_timeout; long long prefetch_start_position_seconds_for_quality_excellent; long long prefetch_start_position_seconds_for_quality_good; long long prefetch_start_position_seconds_for_quality_moderate; long long prefetch_start_position_seconds_for_quality_poor; long long prefetch_start_position_seconds_for_quality_unknown; BOOL pts_rewrite_disabled; BOOL remove_minimum_fetch_size_guard; BOOL replay_recording_enabled; long long segment_count_between_video_rr_switch; BOOL segmented_for_all_enabled; BOOL skip_empty_segment_enabled; double stall_threshold_in_second; long long ull_chunk_duration_ms; double unstall_threshold_in_second_for_excellent; double unstall_threshold_in_second_for_good; double unstall_threshold_in_second_for_moderate; double unstall_threshold_in_second_for_poor; double unstall_threshold_in_second_for_unknown; BOOL check_first_key_frame_range_before_partial_fetch; BOOL delay_second_partial_segment_fetch; BOOL do_not_partial_fetch_audio; BOOL enable_csvqm_consistency_check; BOOL enable_ig_busy_hour_quality_tuning; BOOL enable_mcm_dense_lane_jnd_on_bandwidth_quality; BOOL enable_mcm_rd_slope_check; BOOL enable_partial_fetch_size_threshold; BOOL enable_partial_segment_initial_fetch; BOOL enable_unavailable_quality_fallback_503; BOOL fetch_only_next_chunk; long long fetch_size_high_intent_high_watermark_cell; long long fetch_size_high_intent_high_watermark_wifi; long long fetch_size_high_intent_low_watermark_cell; long long fetch_size_high_intent_low_watermark_wifi; long long fetch_size_high_intent_threshold_in_seconds; long long fetch_size_low_intent_high_watermark_cell; long long fetch_size_low_intent_high_watermark_wifi; long long fetch_size_low_intent_low_watermark_cell; long long fetch_size_low_intent_low_watermark_wifi; double fraction_of_chunk_count_for_partial_segment_initial_fetch; BOOL lazy_load_audio_track; double lazy_load_audio_warmup_duration; BOOL mcm_adaptive_codec_switch; long long mcm_adaptive_codec_switch_decoding_slowness_count_threshold; double mcm_adaptive_codec_switch_decoding_speed_threshold; long long mcm_adaptive_codec_switch_pruned_limit; double mcm_dense_lane_jnd_on_bandwidth_quality_excellent; double mcm_dense_lane_jnd_on_bandwidth_quality_excellent_cell; double mcm_dense_lane_jnd_on_bandwidth_quality_excellent_wifi; double mcm_dense_lane_jnd_on_bandwidth_quality_good; double mcm_dense_lane_jnd_on_bandwidth_quality_good_cell; double mcm_dense_lane_jnd_on_bandwidth_quality_good_wifi; double mcm_dense_lane_jnd_on_bandwidth_quality_moderate; double mcm_dense_lane_jnd_on_bandwidth_quality_moderate_cell; double mcm_dense_lane_jnd_on_bandwidth_quality_moderate_wifi; double mcm_dense_lane_jnd_on_bandwidth_quality_poor; double mcm_dense_lane_jnd_on_bandwidth_quality_poor_cell; double mcm_dense_lane_jnd_on_bandwidth_quality_poor_wifi; double mcm_dense_lane_jnd_on_bandwidth_quality_unknown; double mcm_dense_lane_jnd_on_bandwidth_quality_unknown_cell; double mcm_dense_lane_jnd_on_bandwidth_quality_unknown_wifi; double mcm_dense_lane_jnd_on_cell; double mcm_dense_lane_jnd_on_wifi; BOOL mcm_enable_jnd_group_check_bypass_main_codec; double mcm_rd_curve_slope_threshold; double mcm_risk_reward_ratior_upper_bound_on_cell; double mcm_risk_reward_ratior_upper_bound_on_wifi; long long partial_fetch_size_threshold_in_kb; BOOL prioritize_audio_fetching; BOOL should_partial_fetch_bypass_single_segment_video; double unstall_thresholder_linear_increase_value; double unstall_thresholder_maximum; BOOL update_http_priority_on_pause_play; } gen; long long x[5] qualitySelectorPipeline; double abrBandwidthFraction; double audioIbrBandwidthFraction; double abrBandwidthPenaltyPerRequest; double abrPlayerSizeMultiplierForCell; double abrPlayerSizeMultiplierForWifi; BOOL enableAOCWifi; int ignoreQualitySize; int ignoreQualitySizeForStories; BOOL usePlayerSizeForOrientation; BOOL enableIntentBasedWatermarks; int intentMinLowWatermark; int intentMaxLowWatermark; int intentWatermarkDiff; double intentTimeMultiplier; BOOL enableStitchABR; int stitchLowBufferSeconds; int stitchLowQualityBitrate; int stitchMinFetchDuration; int stitchMaxFetchDuration; double stitchRepBwMultiplier; double stitchRepBwMultiplierLowBuffer; double stitchRepBwMultiplierMinPlayable; int stitchRepMinPlayableMos; int stitchRepMinOverallMos; int stitchRepModOverallMos; int stitchRepLowMosResolution; int stitchModMosBufferMs; double stitchMinMultiplier; BOOL stitchEnableRiskRewardRatio; double stitchRiskRewardRatioUpperBound; BOOL mcmStitchEnableRiskRewardRatio; BOOL mcmEnableJNDGroupCheck; BOOL stitchIgnoreAvoidOnCellSfv; long long stitchMaxBitrateAllowedOnCell; BOOL stitchIgnoreULLByLatencySetting; double stitchRiskFactor; double stitchLowMosRiskFactor; double stitchModMosRiskFactor; double stitchVirtualBufferPercent; int stitchMaxLookaheadDurationMs; double stitchRiskAdjFactor; BOOL stitchEnableMosOverride; long long stitchAudioLowQualityBitrate; BOOL enableStitchSelectorForAudio; long long stitchAudioOtherBitrate; double stitchAudioBitrateBoostFactor; double stitchAudioRiskFactor; double stitchAudioRiskAdjFactor; double stitchAudioLowMosRiskFactor; BOOL sigmoidFractionPerBandwidthQualityEnabled; double sigmoidMinBandwidthEstimateForQualityUnknown; double sigmoidMinBandwidthEstimateForQualityPoor; double sigmoidMinBandwidthEstimateForQualityModerate; double sigmoidMinBandwidthEstimateForQualityGood; double sigmoidMinBandwidthEstimateForQualityExcellent; double sigmoidMaxBandwidthEstimateForQualityUnknown; double sigmoidMaxBandwidthEstimateForQualityPoor; double sigmoidMaxBandwidthEstimateForQualityModerate; double sigmoidMaxBandwidthEstimateForQualityGood; double sigmoidMaxBandwidthEstimateForQualityExcellent; double sigmoidFractionBiasForQualityUnknown; double sigmoidFractionGainForQualityUnknown; double sigmoidFractionOffsetForQualityUnknown; double sigmoidFractionWidthForQualityUnknown; double sigmoidFractionBiasForQualityPoor; double sigmoidFractionGainForQualityPoor; double sigmoidFractionOffsetForQualityPoor; double sigmoidFractionWidthForQualityPoor; double sigmoidFractionBiasForQualityModerate; double sigmoidFractionGainForQualityModerate; double sigmoidFractionOffsetForQualityModerate; double sigmoidFractionWidthForQualityModerate; double sigmoidFractionBiasForQualityGood; double sigmoidFractionGainForQualityGood; double sigmoidFractionOffsetForQualityGood; double sigmoidFractionWidthForQualityGood; double sigmoidFractionBiasForQualityExcellent; double sigmoidFractionGainForQualityExcellent; double sigmoidFractionOffsetForQualityExcellent; double sigmoidFractionWidthForQualityExcellent; double lowSmoothingSizeThreshold; long long minSamplesBeforeUpSwitchLow; long long minSamplesBeforeUpSwitchHigh; double minBufferSizeInSecondsForBufferThresholdAbr; int fetchSizeInChunkCountForInitial; int fetchSizeLowInSecondForCell; int fetchSizeHighInSecondForCell; int fetchSizeLowInSecondForWifi; int fetchSizeHighInSecondForWifi; int fetchSizeHighThresholdInChunkCount; int fetchSizeHighThresholdInChunkCountForCell; int fetchSizePerRequestInChunkCount; int fetchSizeLowInSecondHighMarkForCell; int fetchSizeHighInSecondHighMarkForCell; int fetchSizeLowInSecondHighMarkForWifi; int fetchSizeHighInSecondHighMarkForWifi; int fetchSizeLowGraduallyIncreaseValue; int fetchSizeHighIntentThresholdInSeconds; double stallThresholdInSeconds; BOOL disableUpdateTimeLoadedWhenInStall; double liveMaxTimelineDurationForQualityUnknown; double liveMaxTimelineDurationForQualityPoor; double liveMaxTimelineDurationForQualityModerate; double liveMaxTimelineDurationForQualityGood; double liveMaxTimelineDurationForQualityExcellent; BOOL dashVideoTypeCheckEnabled; BOOL stitchUseOverallMos; BOOL stitchUsePlaybackMosForLowMos; double liveManifestTimeoutSeconds; int checkForPrefetchSegmentCount; BOOL lazyLoadAudioTrack; double lazyLoadAudioWarmupDuration; BOOL enableBufferVisualization; int maxConsecutiveNetworkWarnings; BOOL enableDrm; BOOL shouldRefactorPsshProcess; int numPredictiveSegments; int numPredictiveRewindSegments; BOOL enableRoundingInDashFetcher; BOOL enableBypassingLowQualityPrefetch; BOOL shouldApplyRotationTransform; BOOL unstallThresholderEnabled; BOOL monitorMemoryWarningForPlayerSizeSelection; BOOL enableLiveJumpLogging; double liveJumpTimeGapInSeconds; long long videoPtsSyncOffsetMs; int liveLatencyCatchUpStrategy; double liveLatencyHighInSeconds; double liveLatencyLowInSeconds; double liveLatencyHighInSecondsForQualityExcellent; double liveLatencyHighInSecondsForQualityGood; double liveLatencyHighInSecondsForQualityModerate; double liveLatencyHighInSecondsForQualityPoor; double liveLatencyHighInSecondsForQualityUnknown; double liveLatencyLowInSecondsForQualityExcellent; double liveLatencyLowInSecondsForQualityGood; double liveLatencyLowInSecondsForQualityModerate; double liveLatencyLowInSecondsForQualityPoor; double liveLatencyLowInSecondsForQualityUnknown; BOOL liveLatencyByQualityEnabled; double liveFullScreenTuningLowInSeconds; double liveFullScreenTuningHighInSeconds; BOOL limitLowWatermarkBySegmentDuration; double skipPrefetchBandwidthMultiplier; BOOL enableUnavailableQualityFallback; BOOL enableUserQualitySelectionWithRepresentationId; long long maxManifestRefreshFailCount; int oneSemanticsOsParamValue; int defaultBWConfidencePercentile; int highBWConfidencePercentile; int modBWConfidencePercentile; BOOL enableAudioStallOnly; BOOL sendPlaybackSessionKeyAsRequestHeader; BOOL stopManifestRefreshUntilStartup; BOOL sendClientBweToServer; BOOL enableHevc; BOOL enableStallUnstallLogging; BOOL enableEmsgParsingV2; BOOL dropDuplicateChunkInFrameSequencer; int increaseManifestTriggerThreshold; BOOL enableQualityMetadataWithSummaryInfo; BOOL rewindCatchupLogicEnabled; BOOL latestFrameEstimateEnabled; BOOL refactorReparsingEnabled; BOOL latestSegmentIdEnabled; BOOL removeFrequencyIndexCheck; BOOL liveVodTransitionFixEnabled; BOOL applyAvoidOnAbrTag; long long delayFirstChunkMs; long long delayBytesInterval; long long minBufferToDelayMs; BOOL parseFrameRateEnabled; BOOL enableStallThresholdFix; BOOL enableAudioABR; int segmentCountBetweenAudioABRSwitch; int minVideoDurationSecsForAudioABR; BOOL enableUpdateQualitiesEmptyFix; BOOL usePlaybackCsvqm; BOOL enableAlternativeAudioTracks; BOOL enableClientTriggeredE2eTracing; BOOL prioritizeAudioChunkManager; BOOL useTasosBwe; BOOL enableTasosBweRequestHeaders; BOOL enableAudioDubbingTracks; BOOL enableAutoTranslation; BOOL enableDashPrefetchUseBestQuality; BOOL enableLogMultiplePrefetchCachedRepresentations; } _config;
  struct { NSString *initialUserSelectedQuality; NSString *sessionKey; BOOL isAudioOnly; BOOL isLatencySensitiveBroadcast; BOOL isLiveRewindEnabled; BOOL expectsEmsgInData; BOOL isAudioDescriptionAccessibilityEnabled; NSString *userLang; BOOL isAutoTranslationEnabled; unsigned char selectedAudioRole; NSString *selectedAudioLanguage; } _sessionConfig;
  FNFDashVideoPlayerMetadata *_playerMetadata;
  FNFAssetResourceLoader *_resourceLoader;
  FNFDashPlaylist *_playlist;
  NSObject<FNFBandwidthProvider> *_bandwidthProvider;
  NSArray *_chunkManagers;
  NSObject<FNFDashFrameSequencing><FNFDashChunkManagerDelegate> *_frameSequencer;
  NSObject<FNFDashPlaylistManaging> *_playlistManager;
  NSObject<FNFDashEventListener> *_dashEventListener;
  NSObject<FNFAssetEventListener> *_assetEventListener;
  NSObject<FNFDashReplayRecording> *_replayRecorder;
  NSObject<FNFLogging> *_logger;
  FNFDashLiveSeekController *_liveSeekController;
  FNFDashSimpleSpeedController *_simpleSpeedController;
  NSObject<FNFDashVideoDrmHandler> *_drmHandler;
  BOOL _isDrmVideo;
  BOOL _isDrmLicenseLoaded;
  BOOL _isDrmSessionReady;
  FNFDashErrorListener *_errorListener;
  NSObject<FNFDashQualitySelectorCreating> *_qualitySelectorFactory;
  id /* block */ _assetLoadedHandler;
  id /* block */ _assetCompletionHandler;
  NSObject<OS_dispatch_queue> *_assetCompletionCallbackQueue;
  BOOL _videoTrackLoaded;
  BOOL _audioTrackLoaded;
  BOOL _captionTrackLoaded;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentPlaybackTime;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _latestAudioFrameAbsoluteDts;
  NSMutableSet *_warningReported;
  BOOL _sentDryStreamNotification;
  NSString * _servingRepresentationIds[3];
  long long _representationCount[3];
  BOOL _async;
  NSObject<OS_dispatch_queue> *_dispatchQueue;
  double _elapsedVideoTimestamp;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastDuration;
  struct CGSize { double width; double height; } _lastPlayerSize;
  int _lastSegmentIndex;
  long long _lastChunkCount;
  BOOL _playRequested;
  BOOL _isAudioOnly;
  BOOL _isLiveExpired;
  BOOL _isPaused;
  unsigned char _segmentGoneState;
  NSObject<FNFPSRProfiling> *_psrProfiler;
  BOOL _hasPendingMuteRequest;
  NSData *_firstManifestData;
  struct CGAffineTransform { double a; double b; double c; double d; double tx; double ty; } _preferredTransform;
  NSURL *_mpdUrl;
  NSError *_drmSessionLoadedError;
  NSError *_drmFrameDecryptionError;
  BOOL _appBackgrounded;
  FNFDashPlaylistManager *_debugFNFDashPlaylistManagerWeakRef;
  unsigned long long _playbackStartedTimeMs;
  unsigned long long _timeAtTargetLatencyMs;
  unsigned long long _prevPlaybackStartedTimeMs;
  NSMutableSet *_pendingRepresentationIdsForAutoTranslateSwitch;
  id /* block */ _autoTranslateHandler;
  BOOL _isAudioABREnabled;
}

@property (copy, nonatomic) NSString *debugVideoID;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) long long status;
@property (readonly, copy, nonatomic) NSArray *loadedTimeRanges;
@property (readonly, nonatomic) BOOL shouldApplyRotationTransform;
@property (copy, nonatomic) AVAudioMix *audioMix;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } maxBufferTime;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } minBufferTime;
@property (readonly, nonatomic) int pauseReason;

/* instance methods */
- (id)initWithConfig:(struct FNFDashConfig { struct FNFDashConfigGen { BOOL x0; long long x1; double x2; double x3; double x4; double x5; BOOL x6; double x7; double x8; double x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; double x18; long long x19; double x20; double x21; double x22; double x23; double x24; double x25; long long x26; BOOL x27; long long x28; double x29; double x30; BOOL x31; BOOL x32; long long x33; BOOL x34; double x35; long long x36; long long x37; long long x38; long long x39; long long x40; BOOL x41; BOOL x42; BOOL x43; long long x44; BOOL x45; BOOL x46; double x47; long long x48; double x49; double x50; double x51; double x52; double x53; BOOL x54; BOOL x55; BOOL x56; BOOL x57; BOOL x58; BOOL x59; BOOL x60; BOOL x61; BOOL x62; BOOL x63; BOOL x64; long long x65; long long x66; long long x67; long long x68; long long x69; long long x70; long long x71; long long x72; long long x73; double x74; BOOL x75; double x76; BOOL x77; long long x78; double x79; long long x80; double x81; double x82; double x83; double x84; double x85; double x86; double x87; double x88; double x89; double x90; double x91; double x92; double x93; double x94; double x95; double x96; double x97; BOOL x98; double x99; double x100; double x101; long long x102; BOOL x103; BOOL x104; double x105; double x106; BOOL x107; } x0; long long x1[5] double x2; double x3; double x4; double x5; double x6; BOOL x7; int x8; int x9; BOOL x10; BOOL x11; int x12; int x13; int x14; double x15; BOOL x16; int x17; int x18; int x19; int x20; double x21; double x22; double x23; int x24; int x25; int x26; int x27; int x28; double x29; BOOL x30; double x31; BOOL x32; BOOL x33; BOOL x34; long long x35; BOOL x36; double x37; double x38; double x39; double x40; int x41; double x42; BOOL x43; long long x44; BOOL x45; long long x46; double x47; double x48; double x49; double x50; BOOL x51; double x52; double x53; double x54; double x55; double x56; double x57; double x58; double x59; double x60; double x61; double x62; double x63; double x64; double x65; double x66; double x67; double x68; double x69; double x70; double x71; double x72; double x73; double x74; double x75; double x76; double x77; double x78; double x79; double x80; double x81; double x82; long long x83; long long x84; double x85; int x86; int x87; int x88; int x89; int x90; int x91; int x92; int x93; int x94; int x95; int x96; int x97; int x98; int x99; double x100; BOOL x101; double x102; double x103; double x104; double x105; double x106; BOOL x107; BOOL x108; BOOL x109; double x110; int x111; BOOL x112; double x113; BOOL x114; int x115; BOOL x116; BOOL x117; int x118; int x119; BOOL x120; BOOL x121; BOOL x122; BOOL x123; BOOL x124; BOOL x125; double x126; long long x127; int x128; double x129; double x130; double x131; double x132; double x133; double x134; double x135; double x136; double x137; double x138; double x139; double x140; BOOL x141; double x142; double x143; BOOL x144; double x145; BOOL x146; BOOL x147; long long x148; int x149; int x150; int x151; int x152; BOOL x153; BOOL x154; BOOL x155; BOOL x156; BOOL x157; BOOL x158; BOOL x159; BOOL x160; int x161; BOOL x162; BOOL x163; BOOL x164; BOOL x165; BOOL x166; BOOL x167; BOOL x168; BOOL x169; long long x170; long long x171; long long x172; BOOL x173; BOOL x174; BOOL x175; int x176; int x177; BOOL x178; BOOL x179; BOOL x180; BOOL x181; BOOL x182; BOOL x183; BOOL x184; BOOL x185; BOOL x186; BOOL x187; BOOL x188; })config sessionConfig:(struct { id x0; id x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; id x7; BOOL x8; unsigned char x9; id x10; })config mpdData:(id)data mpdUrl:(id)url bandwidthProvider:(id)provider dashEventListener:(id)listener drmHandler:(id)handler qualitySelectorFactory:(id)factory psrProfiler:(id)profiler logger:(id)logger;
- (id)initWithConfig:(struct FNFDashConfig { struct FNFDashConfigGen { BOOL x0; long long x1; double x2; double x3; double x4; double x5; BOOL x6; double x7; double x8; double x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; double x18; long long x19; double x20; double x21; double x22; double x23; double x24; double x25; long long x26; BOOL x27; long long x28; double x29; double x30; BOOL x31; BOOL x32; long long x33; BOOL x34; double x35; long long x36; long long x37; long long x38; long long x39; long long x40; BOOL x41; BOOL x42; BOOL x43; long long x44; BOOL x45; BOOL x46; double x47; long long x48; double x49; double x50; double x51; double x52; double x53; BOOL x54; BOOL x55; BOOL x56; BOOL x57; BOOL x58; BOOL x59; BOOL x60; BOOL x61; BOOL x62; BOOL x63; BOOL x64; long long x65; long long x66; long long x67; long long x68; long long x69; long long x70; long long x71; long long x72; long long x73; double x74; BOOL x75; double x76; BOOL x77; long long x78; double x79; long long x80; double x81; double x82; double x83; double x84; double x85; double x86; double x87; double x88; double x89; double x90; double x91; double x92; double x93; double x94; double x95; double x96; double x97; BOOL x98; double x99; double x100; double x101; long long x102; BOOL x103; BOOL x104; double x105; double x106; BOOL x107; } x0; long long x1[5] double x2; double x3; double x4; double x5; double x6; BOOL x7; int x8; int x9; BOOL x10; BOOL x11; int x12; int x13; int x14; double x15; BOOL x16; int x17; int x18; int x19; int x20; double x21; double x22; double x23; int x24; int x25; int x26; int x27; int x28; double x29; BOOL x30; double x31; BOOL x32; BOOL x33; BOOL x34; long long x35; BOOL x36; double x37; double x38; double x39; double x40; int x41; double x42; BOOL x43; long long x44; BOOL x45; long long x46; double x47; double x48; double x49; double x50; BOOL x51; double x52; double x53; double x54; double x55; double x56; double x57; double x58; double x59; double x60; double x61; double x62; double x63; double x64; double x65; double x66; double x67; double x68; double x69; double x70; double x71; double x72; double x73; double x74; double x75; double x76; double x77; double x78; double x79; double x80; double x81; double x82; long long x83; long long x84; double x85; int x86; int x87; int x88; int x89; int x90; int x91; int x92; int x93; int x94; int x95; int x96; int x97; int x98; int x99; double x100; BOOL x101; double x102; double x103; double x104; double x105; double x106; BOOL x107; BOOL x108; BOOL x109; double x110; int x111; BOOL x112; double x113; BOOL x114; int x115; BOOL x116; BOOL x117; int x118; int x119; BOOL x120; BOOL x121; BOOL x122; BOOL x123; BOOL x124; BOOL x125; double x126; long long x127; int x128; double x129; double x130; double x131; double x132; double x133; double x134; double x135; double x136; double x137; double x138; double x139; double x140; BOOL x141; double x142; double x143; BOOL x144; double x145; BOOL x146; BOOL x147; long long x148; int x149; int x150; int x151; int x152; BOOL x153; BOOL x154; BOOL x155; BOOL x156; BOOL x157; BOOL x158; BOOL x159; BOOL x160; int x161; BOOL x162; BOOL x163; BOOL x164; BOOL x165; BOOL x166; BOOL x167; BOOL x168; BOOL x169; long long x170; long long x171; long long x172; BOOL x173; BOOL x174; BOOL x175; int x176; int x177; BOOL x178; BOOL x179; BOOL x180; BOOL x181; BOOL x182; BOOL x183; BOOL x184; BOOL x185; BOOL x186; BOOL x187; BOOL x188; })config mpdData:(id)data mpdUrl:(id)url bandwidthProvider:(id)provider qualitySelectorFactory:(id)factory;
- (id)initWithConfig:(struct FNFDashConfig { struct FNFDashConfigGen { BOOL x0; long long x1; double x2; double x3; double x4; double x5; BOOL x6; double x7; double x8; double x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; double x18; long long x19; double x20; double x21; double x22; double x23; double x24; double x25; long long x26; BOOL x27; long long x28; double x29; double x30; BOOL x31; BOOL x32; long long x33; BOOL x34; double x35; long long x36; long long x37; long long x38; long long x39; long long x40; BOOL x41; BOOL x42; BOOL x43; long long x44; BOOL x45; BOOL x46; double x47; long long x48; double x49; double x50; double x51; double x52; double x53; BOOL x54; BOOL x55; BOOL x56; BOOL x57; BOOL x58; BOOL x59; BOOL x60; BOOL x61; BOOL x62; BOOL x63; BOOL x64; long long x65; long long x66; long long x67; long long x68; long long x69; long long x70; long long x71; long long x72; long long x73; double x74; BOOL x75; double x76; BOOL x77; long long x78; double x79; long long x80; double x81; double x82; double x83; double x84; double x85; double x86; double x87; double x88; double x89; double x90; double x91; double x92; double x93; double x94; double x95; double x96; double x97; BOOL x98; double x99; double x100; double x101; long long x102; BOOL x103; BOOL x104; double x105; double x106; BOOL x107; } x0; long long x1[5] double x2; double x3; double x4; double x5; double x6; BOOL x7; int x8; int x9; BOOL x10; BOOL x11; int x12; int x13; int x14; double x15; BOOL x16; int x17; int x18; int x19; int x20; double x21; double x22; double x23; int x24; int x25; int x26; int x27; int x28; double x29; BOOL x30; double x31; BOOL x32; BOOL x33; BOOL x34; long long x35; BOOL x36; double x37; double x38; double x39; double x40; int x41; double x42; BOOL x43; long long x44; BOOL x45; long long x46; double x47; double x48; double x49; double x50; BOOL x51; double x52; double x53; double x54; double x55; double x56; double x57; double x58; double x59; double x60; double x61; double x62; double x63; double x64; double x65; double x66; double x67; double x68; double x69; double x70; double x71; double x72; double x73; double x74; double x75; double x76; double x77; double x78; double x79; double x80; double x81; double x82; long long x83; long long x84; double x85; int x86; int x87; int x88; int x89; int x90; int x91; int x92; int x93; int x94; int x95; int x96; int x97; int x98; int x99; double x100; BOOL x101; double x102; double x103; double x104; double x105; double x106; BOOL x107; BOOL x108; BOOL x109; double x110; int x111; BOOL x112; double x113; BOOL x114; int x115; BOOL x116; BOOL x117; int x118; int x119; BOOL x120; BOOL x121; BOOL x122; BOOL x123; BOOL x124; BOOL x125; double x126; long long x127; int x128; double x129; double x130; double x131; double x132; double x133; double x134; double x135; double x136; double x137; double x138; double x139; double x140; BOOL x141; double x142; double x143; BOOL x144; double x145; BOOL x146; BOOL x147; long long x148; int x149; int x150; int x151; int x152; BOOL x153; BOOL x154; BOOL x155; BOOL x156; BOOL x157; BOOL x158; BOOL x159; BOOL x160; int x161; BOOL x162; BOOL x163; BOOL x164; BOOL x165; BOOL x166; BOOL x167; BOOL x168; BOOL x169; long long x170; long long x171; long long x172; BOOL x173; BOOL x174; BOOL x175; int x176; int x177; BOOL x178; BOOL x179; BOOL x180; BOOL x181; BOOL x182; BOOL x183; BOOL x184; BOOL x185; BOOL x186; BOOL x187; BOOL x188; })config sessionConfig:(struct { id x0; id x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; id x7; BOOL x8; unsigned char x9; id x10; })config mpdData:(id)data mpdUrl:(id)url bandwidthProvider:(id)provider drmHandler:(id)handler qualitySelectorFactory:(id)factory chunkManagers:(id)managers frameSequencer:(id)sequencer playlistManager:(id)manager dashEventListener:(id)listener async:(BOOL)async psrProfiler:(id)profiler logger:(id)logger playerMetadata:(id)metadata;
- (id)dashEventListener;
- (void)setFNFDashEventListener:(id)listener;
- (void)_applicationWillResignActive;
- (void)_applicationDidBecomeActive;
- (void)loadValuesAsynchronouslyForKeys:(id)keys completionHandler:(id /* block */)handler;
- (void)asyncLoadAssetWithHandler:(id /* block */)handler onQueue:(id)queue;
- (long long)_assetStatus;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })_duration;
- (id)_assetError;
- (long long)statusOfValueForKey:(id)key error:(id *)error;
- (BOOL)isAudioOnly;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (id)resourceLoader;
- (id)audioCodec;
- (void)cancelLoading;
- (void)_updateHttpPriority:(BOOL)priority;
- (id)accessLog;
- (id)asset;
- (BOOL)isPlaybackBufferFull;
- (BOOL)isPlaybackLikelyToKeepUp;
- (void)asyncLoadAvailableQualitiesWithHandler:(id /* block */)handler onQueue:(id)queue;
- (void)asyncLoadCurrentQualityWithHandler:(id /* block */)handler onQueue:(id)queue;
- (void)asyncLoadAvailableRepresentationsWithHandler:(id /* block */)handler onQueue:(id)queue;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)addOutput:(id)output;
- (void)requestTimeLoadedUpdate;
- (void)requestErrorNotificationIfNeeded;
- (struct opaqueCMFormatDescription *)formatDesc;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })asbd;
- (id)audioStreamExtraParameters;
- (id)projection;
- (id)audioChannelConfiguration;
- (BOOL)containsTrack:(long long)track;
- (unsigned long long)codecFormatForTrack:(long long)track;
- (void)addErrorToLog:(id)log shouldStopPlayback:(BOOL)playback;
- (void)liveStreamEndOnWarning:(id)warning;
- (void)handleSegmentGoneOnError:(id)error;
- (BOOL)isDashSegmentGone:(id)gone;
- (void)handleLiveStreamGone:(id)gone;
- (BOOL)isManifestGone:(id)gone;
- (BOOL)isFetchTimeExceeded:(id)exceeded;
- (id)representationId;
- (id)audioRepresentationId;
- (id)videoEncodingTag;
- (double)playbackMos;
- (double)uploadMos;
- (id)audioEncodingTag;
- (id)mpdAccessibilityDescription;
- (BOOL)mpdContainsAttributeUsingASRCaptions;
- (id)manifestIdentifier;
- (BOOL)isAudioAbrEligible;
- (void)setIsAudioABREnabled:(BOOL)abrenabled;
- (void)_updateIsAudioABREnabled;
- (void)setAudioMeterLevel:(double)level;
- (BOOL)trackHasMoreFrames:(long long)frames;
- (int)chunkCountToPlayForTrack:(long long)track;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })frameMetadataForTrack:(long long)track atIndex:(int)index;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })currentFrameMetadataForTrack:(long long)track;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })_frameMetadataForTrack:(long long)track forFrame:(struct { long long x0; int x1; int x2; long long x3; long long x4; long long x5; long long x6; int x7; unsigned int x8; BOOL x9; unsigned char x10[16] struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x11; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; } x12; int x13; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x14; })frame;
- (int)currentFramesIndexForTrack:(long long)track;
- (int)currentAvailableFrameIndexForTrack:(long long)track;
- (BOOL)resetFramesIndexToZeroForTrack:(long long)track;
- (const char *)frameDataForTrack:(long long)track atIndex:(int)index;
- (const char *)currentFrameDataForTrack:(long long)track;
- (const char *)_frameDataForTrack:(long long)track forFrame:(struct { long long x0; int x1; int x2; long long x3; long long x4; long long x5; long long x6; int x7; unsigned int x8; BOOL x9; unsigned char x10[16] struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x11; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; } x12; int x13; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x14; })frame forFrameBytes:(const char *)bytes;
- (void)advanceFrameForTrack:(long long)track;
- (void)updatePlaybackTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })shouldStallAudio;
- (struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })shouldPauseForStallingWithNextCheckCallback:(id /* block */)callback stallReason:(int)reason;
- (BOOL)shouldRestartAfterStalling;
- (BOOL)stallingForTrack:(long long)track;
- (BOOL)shouldBufferVideoAsSoonAsPossible;
- (BOOL)seekToPosition:(struct { long long x0; int x1; unsigned int x2; long long x3; })position;
- (BOOL)resetAssetToBeginningIfNeeded;
- (void)playbackPauseRequested:(int)requested;
- (void)playbackStarted;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })timeAfterSeek;
- (int)sequenceIndexForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time track:(long long)track;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })preferredTransform;
- (id)debugDetails;
- (id)qualityLabel;
- (BOOL)decompressedFramebuffer;
- (BOOL)isDurationFinal;
- (BOOL)isProtectedContent;
- (id)loggingContext;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })seekingTime;
- (id)currentMD5ForTrack:(long long)track;
- (id)replayRecord;
- (id)currentFrameDecryptionErrorForTrack:(long long)track;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })videoTrackDuration;
- (double)nextLiveAudioTimestamp;
- (double)elapsedVideoTimestamp;
- (void)setPlayerSize:(struct CGSize { double x0; double x1; })size;
- (void)setIsSoundMuted:(BOOL)muted;
- (void)setIsWebVTTCaptionShown:(BOOL)shown;
- (void)setVideoContentType:(unsigned long long)type;
- (void)setIsIntentional:(BOOL)intentional;
- (void)setIgnoreAvoidOnCell:(BOOL)cell;
- (void)setLatencyDecision:(id)decision;
- (void)setPlayerFormat:(unsigned long long)format;
- (void)setUserSelectedQuality:(id)quality;
- (BOOL)shouldSelectAudioRole:(unsigned char)role language:(id)language;
- (void)selectAudioRole:(unsigned char)role language:(id)language completionHandler:(id /* block */)handler;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })relativeTimeForAbsoluteTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)setAssetEventListener:(id)listener;
- (id)hlsAdapter;
- (void)setPSRProfiler:(id)psrprofiler;
- (id)psrProfiler;
- (void)didFailWithError:(id)error;
- (void)didWarnWithError:(id)error;
- (void)retryAttemptForError:(id)error errorData:(id)data;
- (void)headerParsed:(id)parsed;
- (void)chunkParsed:(id)parsed;
- (void)timeLoadedChanged;
- (void)playlistLoaded:(id)loaded;
- (id)drmKeyId;
- (id)_drmKeyIds;
- (id)drmPssh;
- (double)suggestedPlaybackRate;
- (void)setPlaybackStartTime:(double)time;
- (void)manifestDataFetched:(id)fetched;
- (void)updatePrefetchCache:(id)cache mpd:(id)mpd;
- (void)lastSegmentFetched;
- (void)targetBufferReached:(int)reached;
- (id)drmHandler;
- (id)representationHeaderForTrack:(long long)track representationId:(id)id;
- (id)currentSegmentHeaderForTrack:(long long)track;
- (unsigned int)frameRate;
- (void)_notifyOnError:(id)error shouldStopPlayback:(BOOL)playback;
- (void)_updateStateAndShutdown;
- (void)_deferredWarningForExpiredLiveWithError:(id)error;
- (void)_setAssetState:(unsigned char)state;
- (BOOL)_canPlayDashPlaylist:(id)playlist;
- (BOOL)_seekToPosition:(struct { long long x0; int x1; unsigned int x2; long long x3; })position;
- (void)_updateAvailableQualitiesForTrack:(long long)track;
- (void)_updatePlaybackResolutionMosWithRepresentationId:(id)id;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })_absoluteTimeForRelativeTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)_updatePlaylistBackedValuesOnRefresh;
- (void)_updateElapsedVideoTimestamp;
- (void)_updateDuration;
- (void)_updateClientLatency;
- (long long)_clientLatencyInMs;
- (void)_handleAssetLoaded;
- (void)_processPsshWhenStarted:(BOOL)started;
- (const char *)_decryptFrame:(const char *)frame metaData:(struct { long long x0; int x1; int x2; long long x3; long long x4; long long x5; long long x6; int x7; unsigned int x8; BOOL x9; unsigned char x10[16] struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x11; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; } x12; int x13; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x14; })data track:(long long)track error:(id *)error;
- (void)_drmLicenseLoaded:(id)loaded;
- (void)_syncDrmLicenseLoaded:(id)loaded;
- (id)_frameMetadataDebugInfo:(struct { long long x0; int x1; int x2; long long x3; long long x4; long long x5; long long x6; int x7; unsigned int x8; BOOL x9; unsigned char x10[16] struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x11; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; } x12; int x13; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x14; })info;
- (id)_decryptionMetadataDebugInfo:(struct { long long x0; int x1; int x2; long long x3; long long x4; long long x5; long long x6; int x7; unsigned int x8; BOOL x9; unsigned char x10[16] struct vector<unsigned short, std::allocator<unsigned short>> { unsigned short * x0; unsigned short * x1; struct __compressed_pair<unsigned short *, std::allocator<unsigned short>> { unsigned short * x0; } x2; } x11; struct vector<unsigned int, std::allocator<unsigned int>> { unsigned int * x0; unsigned int * x1; struct __compressed_pair<unsigned int *, std::allocator<unsigned int>> { unsigned int * x0; } x2; } x12; int x13; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x14; })info;
- (void)_processVideoRepresentationIdChange:(id)change track:(long long)track previousRepresentationId:(id)id;
- (void)_processAudioRepresentationIdChange:(id)change track:(long long)track;
- (void)_processCaptionRepresentationIdChange:(id)change track:(long long)track;
- (void)_psrProfilerMarkHeaderLoadedForTrack:(long long)track;
@end

#endif /* FNFDashAsset_h */
