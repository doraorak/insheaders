//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKModel_h
#define BKModel_h
@import Foundation;

#include "BKBloksComponentController.h"
#include "BKClientID.h"
#include "BKContext.h"
#include "BKModel-Protocol.h"
#include "BKSourceMapNode.h"
#include "NSObject-Protocol.h"
#include "RCMountable-Protocol.h"

@class NSString, UIView;
@protocol {Optional<RCViewConfiguration>="_storage"{Storage<RCViewConfiguration, false, false, true>="hasValue"Q""(?="emptyState"c"value"{RCViewConfiguration="rep"{shared_ptr<const RCViewConfiguration::Repr>="__ptr_"^{Repr}"__cntrl_"^{__shared_weak_count}}})}}, {unique_ptr<RCMountInfo, std::default_delete<RCMountInfo>>="__ptr_"{__compressed_pair<RCMountInfo *, std::default_delete<RCMountInfo>>="__value_"^{RCMountInfo}}}, {vector<std::pair<int, id<NSObject>>, std::allocator<std::pair<int, id<NSObject>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<int, id<NSObject>> *, std::allocator<std::pair<int, id<NSObject>>>>="__value_"^v}};

@interface BKModel : NSObject<RCMountable, BKModel> {
  /* instance variables */
  BKClientID *_clientID;
  NSString *_serverID;
  int _styleID;
  unsigned char _flags;
  BKContext *_mountedContext;
  unsigned long long _maxChildrenDepth;
  struct vector<std::pair<int, id<NSObject>>, std::allocator<std::pair<int, id<NSObject>>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<int, id<NSObject>> *, std::allocator<std::pair<int, id<NSObject>>>> { void *__value_; } __end_cap_; } _collection;
  BKBloksComponentController *_bloksController;
  struct Optional<RCViewConfiguration> { struct Storage<RCViewConfiguration, false, false, true> { unsigned long long hasValue; union { char emptyState; struct RCViewConfiguration { struct shared_ptr<const RCViewConfiguration::Repr> { struct Repr *__ptr_; struct __shared_weak_count *__cntrl_; } rep; } value; } x0; } _storage; } _viewConfiguration;
  BKSourceMapNode *_sourceMapNode;
}

@property (readonly, nonatomic) UIView *mountedView;
@property (readonly, nonatomic) struct RCMountInfo { id x0; id x1; struct RCComponentViewContext { id x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; } x2; } mountInfo;
@property (readonly, nonatomic) NSObject<NSObject> *uniqueIdentifier;
@property (readonly, copy, nonatomic) NSString *className;
@property (weak, nonatomic) UIView *rootComponentMountedView;
@property (readonly, nonatomic) UIView *viewForAnimation;
@property (readonly, nonatomic) BOOL isMounted;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)unsafeUntypedValueForProp:(int)prop;
- (id)createSourceMapNodeForKey:(int)key;
- (id)getBloksScriptValue:(struct bloks_script { int x0; })value;
- (id)bloksScriptValueForKey:(struct bloks_script { int x0; })key withExpression:(id)expression;
- (id)getStringValue:(struct bloks_string { int x0; })value;
- (id)getWrappedIntegerValue:(struct bloks_int { int x0; })value;
- (id)getWrappedBoolValue:(struct bloks_bool { int x0; })value;
- (id)getWrappedLongValue:(struct bloks_long { int x0; })value;
- (id)getWrappedFloatValue:(struct bloks_float { int x0; })value;
- (id)getElementIDValue:(struct bloks_element_id { int x0; })idvalue;
- (id)getTemplate:(struct bloks_template { int x0; })template;
- (id)getTemplatePlural:(struct bloks_template_plural { int x0; })plural;
- (id)getUntypedObject:(struct bloks_untyped_object { int x0; })object;
- (id)getBlocklistedChildren:(struct bloks_template_plural_blocklisted { int x0; })children;
- (id)getPrimitivePlural:(struct bloks_primitive_plural { int x0; })plural;
- (id)getAlienObject:(struct bloks_template { int x0; })object;
- (id)clientID;
- (id)serverID;
- (struct RCLayout { id x0; struct CGSize { double x0; double x1; } x1; struct shared_ptr<const std::vector<RCLayoutChild>> { void * x0; struct __shared_weak_count * x1; } x2; id x3; })layoutThatFits:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })fits parentSize:(struct CGSize { double x0; double x1; })size;
- (struct RCComponentViewContext { id x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; })viewContext;
- (struct MountResult { BOOL x0; struct MountContext { struct shared_ptr<RC::ViewManager> { struct ViewManager * x0; struct __shared_weak_count * x1; } x0; struct CGPoint { double x0; double x1; } x1; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x2; BOOL x3; struct MountAnalyticsContext * x4; } x1; })mountInContext:(const void *)context layout:(const void *)layout supercomponent:(id)supercomponent;
- (void)unmount;
- (void)childrenDidMount;
- (id)controller;
- (const void *)directlyAccessCollectionForDebugUseOnly;
- (unsigned int)numberOfChildren;
- (id)childAtIndex:(unsigned int)index;
- (int)getStyleID;
- (id)sourceMapNode;
- (id)customTracingId;
- (id)controllerStorage;
@end

#endif /* BKModel_h */
