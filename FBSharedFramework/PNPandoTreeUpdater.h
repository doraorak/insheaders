//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef PNPandoTreeUpdater_h
#define PNPandoTreeUpdater_h
@import Foundation;

#include "PNPandoTreeUpdaterEdgeNodeProvider-Protocol.h"

@class NSString;
@protocol {NodeStore="_map"{unordered_map<pando::NodeKey, std::shared_ptr<const pando::Node>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, std::allocator<std::pair<const pando::NodeKey, std::shared_ptr<const pando::Node>>>>="__table_"{__hash_table<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>, std::allocator<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>>="__value_"f}}}}, {shared_ptr<const pando::Node>="__ptr_"^{Node}"__cntrl_"^{__shared_weak_count}};

@interface PNPandoTreeUpdater : NSObject<PNPandoTreeUpdaterEdgeNodeProvider> {
  /* instance variables */
  struct NodeStore { struct unordered_map<pando::NodeKey, std::shared_ptr<const pando::Node>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, std::allocator<std::pair<const pando::NodeKey, std::shared_ptr<const pando::Node>>>> { struct __hash_table<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>, std::allocator<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>> { float __value_; } __p3_; } __table_; } _map; } _store;
  struct shared_ptr<const pando::Node> { struct Node *__ptr_; struct __shared_weak_count *__cntrl_; } _nodePtr;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (struct NodeKey { unsigned short x0; long long x1; })nodeKey;
- (struct NodeStore { struct unordered_map<pando::NodeKey, std::shared_ptr<const pando::Node>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>, std::allocator<std::pair<const pando::NodeKey, std::shared_ptr<const pando::Node>>>> { struct __hash_table<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>, std::allocator<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::hash<pando::NodeKey>, std::equal_to<pando::NodeKey>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<pando::NodeKey, std::__hash_value_type<pando::NodeKey, std::shared_ptr<const pando::Node>>, std::equal_to<pando::NodeKey>, std::hash<pando::NodeKey>>> { float x0; } x3; } x0; } x0; })nodeStore;
- (id)initWithBuilder:(void *)builder withArgs:(id)args;
- (id)initWithTreeType:(id)type withArgs:(id)args;
- (id)initWithTreeRoot:(const void *)root withArgs:(id)args;
@end

#endif /* PNPandoTreeUpdater_h */
