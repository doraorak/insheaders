//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBARServiceHostBase_h
#define FBARServiceHostBase_h
@import Foundation;

#include "FBARApplicationStateNotifier.h"
#include "FBARCameraCapabilitiesProviding-Protocol.h"
#include "FBARLogger.h"
#include "FBARServiceHostEffect.h"
#include "FBARSessionRecordingConfiguration.h"
#include "NSSecureCoding-Protocol.h"

@class NSHashTable, NSString;
@protocol FBARAnalyticsLogging, FBARClassBenchmark, FBARIGLTextureCreating, FBARServiceHostBasePermissionsDelegate, struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; }, struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> { struct IServiceAnalyticsLogger * x0; struct __shared_weak_count * x1; }, struct shared_ref<arfx::analytics::IEngineAnalyticsLogger> { struct shared_ptr<arfx::analytics::IEngineAnalyticsLogger> { struct IEngineAnalyticsLogger * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<arfx::experiment::IExperimentConfig> { struct shared_ptr<arfx::experiment::IExperimentConfig> { struct IExperimentConfig * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<arfx::servicehost::ServiceHost> { struct shared_ptr<arfx::servicehost::ServiceHost> { struct ServiceHost * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<facebook::cameracore::arclass::ARClassContext> { struct shared_ptr<facebook::cameracore::arclass::ARClassContext> { struct ARClassContext * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<msqrd::plugins::BasePluginConfiguration> { struct shared_ptr<msqrd::plugins::BasePluginConfiguration> { struct BasePluginConfiguration * x0; struct __shared_weak_count * x1; } x0; }, {ServiceCreatorRegistry="faceTrackingDataProviderCreator"{shared_ptr<arfx::servicehost::BufferUpdatableServiceCreator<msqrd::dataprovider::IFaceTrackingDataProvider>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}"serviceCreators_"{unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>>="__table_"{__hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>>="__value_"f}}}}, {shared_ptr<arfx::analytics::IEngineAnalyticsLogger>="__ptr_"^{IEngineAnalyticsLogger}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<arfx::experiment::IExperimentConfig>="__ptr_"^{IExperimentConfig}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<arfx::servicehost::ServiceHost>="__ptr_"^{ServiceHost}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<facebook::bufferpool::BufferPool>="__ptr_"^{BufferPool}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<facebook::cameracore::arclass::ARClassContext>="__ptr_"^{ARClassContext}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<facebook::perflogger::QPLBase>="__ptr_"^{QPLBase}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<msqrd::platform::IScriptingLogger>="__ptr_"^{IScriptingLogger}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<msqrd::plugins::BasePluginConfiguration>="__ptr_"^{BasePluginConfiguration}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<msqrd::services::network::INetworkClientSource>="__ptr_"^{INetworkClientSource}"__cntrl_"^{__shared_weak_count}};

@interface FBARServiceHostBase : NSObject<NSSecureCoding, FBARCameraCapabilitiesProviding> {
  /* instance variables */
  NSHashTable *_controllers;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _controllersMutex;
  struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource *__ptr_; struct __shared_weak_count *__cntrl_; } _networkClientSource;
  struct ServiceCreatorRegistry { struct shared_ptr<arfx::servicehost::BufferUpdatableServiceCreator<msqrd::dataprovider::IFaceTrackingDataProvider>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } faceTrackingDataProviderCreator; struct unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct __hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>> { float __value_; } __p3_; } __table_; } serviceCreators_; } _serviceCreatorRegistry;
  struct shared_ptr<arfx::servicehost::ServiceHost> { struct ServiceHost *__ptr_; struct __shared_weak_count *__cntrl_; } _xplatServiceHost;
  struct shared_ptr<msqrd::platform::IScriptingLogger> { struct IScriptingLogger *__ptr_; struct __shared_weak_count *__cntrl_; } _scriptingLogger;
  FBARApplicationStateNotifier *_stateNotifier;
  struct shared_ptr<facebook::bufferpool::BufferPool> { struct BufferPool *__ptr_; struct __shared_weak_count *__cntrl_; } _pixelBufferPool;
  NSObject<FBARServiceHostBasePermissionsDelegate> *_permissionsController;
  NSObject<FBARClassBenchmark> *_arClassBenchmark;
}

@property (retain, nonatomic) FBARServiceHostEffect *currentEffect;
@property (readonly, nonatomic) unsigned long long supportedCameraCapabilities;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) FBARLogger *logger;
@property (readonly, nonatomic) NSObject<FBARAnalyticsLogging> *analyticsLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::servicehost::ServiceHost> { struct shared_ptr<arfx::servicehost::ServiceHost> { struct ServiceHost * x0; struct __shared_weak_count * x1; } x0; } engineServiceHost;
@property (nonatomic) unsigned char optimizationMode;
@property (readonly, nonatomic) struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; } performanceLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::analytics::IEngineAnalyticsLogger> { struct shared_ptr<arfx::analytics::IEngineAnalyticsLogger> { struct IEngineAnalyticsLogger * x0; struct __shared_weak_count * x1; } x0; } engineAnalyticsLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::experiment::IExperimentConfig> { struct shared_ptr<arfx::experiment::IExperimentConfig> { struct IExperimentConfig * x0; struct __shared_weak_count * x1; } x0; } experimentConfig;
@property (readonly, nonatomic) struct shared_ref<facebook::cameracore::arclass::ARClassContext> { struct shared_ptr<facebook::cameracore::arclass::ARClassContext> { struct ARClassContext * x0; struct __shared_weak_count * x1; } x0; } ARClassContext;
@property (readonly, nonatomic) struct shared_ref<msqrd::plugins::BasePluginConfiguration> { struct shared_ptr<msqrd::plugins::BasePluginConfiguration> { struct BasePluginConfiguration * x0; struct __shared_weak_count * x1; } x0; } pluginConfig;
@property (readonly, nonatomic) struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> { struct IServiceAnalyticsLogger * x0; struct __shared_weak_count * x1; } serviceAnalyticsLogger;
@property (readonly, nonatomic) FBARSessionRecordingConfiguration *sessionRecordingConfiguration;
@property (readonly, nonatomic) NSObject<FBARIGLTextureCreating> *currentIGLTextureCreator;

/* class methods */
+ (struct unique_ptr<msqrd::plugins::BasePluginConfiguration, std::default_delete<msqrd::plugins::BasePluginConfiguration>> { struct __compressed_pair<msqrd::plugins::BasePluginConfiguration *, std::default_delete<msqrd::plugins::BasePluginConfiguration>> { struct BasePluginConfiguration * x0; } x0; })newPluginConfig;
+ (id)newWithLogger:(id)logger;
+ (id)newWithLogger:(id)logger analyticsLogger:(id)logger performanceLogger:(struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; })logger bugReportLogger:(struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger * x0; struct __shared_weak_count * x1; } x0; })logger experimentConfiguration:(id)configuration arClass:(const struct ARClass *)class networkClientSource:(struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })source supportedCameraCapabilities:(unsigned long long)capabilities;
+ (id)newWithLogger:(id)logger analyticsLogger:(id)logger performanceLogger:(struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; })logger bugReportLogger:(struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger * x0; struct __shared_weak_count * x1; } x0; })logger experimentConfiguration:(id)configuration arClass:(const struct ARClass *)class networkClientSource:(struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })source supportedCameraCapabilities:(unsigned long long)capabilities sessionRecordingConfiguration:(id)configuration;
+ (BOOL)supportsSecureCoding;

/* instance methods */
- (id)initWithLogger:(id)logger analyticsLogger:(id)logger performanceLogger:(struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; })logger bugReportLogger:(struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger * x0; struct __shared_weak_count * x1; } x0; })logger experimentConfiguration:(id)configuration arClass:(const struct ARClass *)class networkClientSource:(struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })source supportedCameraCapabilities:(unsigned long long)capabilities sessionRecordingConfiguration:(id)configuration;
- (id)initWithLogger:(id)logger analyticsLogger:(id)logger performanceLogger:(struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; })logger bugReportLogger:(struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger * x0; struct __shared_weak_count * x1; } x0; })logger experimentConfiguration:(id)configuration arClass:(const struct ARClass *)class networkClientSource:(struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })source dataSnapshotterCreator:(struct Optional<arfx::unique_ref<const msqrd::services::IEffectDataSnapshotterCreator>> { struct StorageNonTriviallyDestructible { union { char x0; struct unique_ref<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct unique_ptr<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct __compressed_pair<const msqrd::services::IEffectDataSnapshotterCreator *, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct IEffectDataSnapshotterCreator * x0; } x0; } x0; } x1; } x0; BOOL x1; } x0; })creator;
- (id)initWithLogger:(id)logger analyticsLogger:(id)logger performanceLogger:(struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; })logger bugReportLogger:(struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger * x0; struct __shared_weak_count * x1; } x0; })logger rawEventLogger:(struct shared_ref<msqrd::logging::IRawEventLogger> { struct shared_ptr<msqrd::logging::IRawEventLogger> { struct IRawEventLogger * x0; struct __shared_weak_count * x1; } x0; })logger experimentConfiguration:(id)configuration arClass:(const struct ARClass *)class networkClientSource:(struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })source supportedCameraCapabilities:(unsigned long long)capabilities effectSessionListener:(struct Optional<arfx::shared_ref<arfx::servicehost::IEffectSessionListener>> { struct StorageNonTriviallyDestructible { union { char x0; struct shared_ref<arfx::servicehost::IEffectSessionListener> { struct shared_ptr<arfx::servicehost::IEffectSessionListener> { struct IEffectSessionListener * x0; struct __shared_weak_count * x1; } x0; } x1; } x0; BOOL x1; } x0; })listener dataSnapshotterCreator:(struct Optional<arfx::unique_ref<const msqrd::services::IEffectDataSnapshotterCreator>> { struct StorageNonTriviallyDestructible { union { char x0; struct unique_ref<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct unique_ptr<const msqrd::services::IEffectDataSnapshotterCreator, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct __compressed_pair<const msqrd::services::IEffectDataSnapshotterCreator *, std::default_delete<const msqrd::services::IEffectDataSnapshotterCreator>> { struct IEffectDataSnapshotterCreator * x0; } x0; } x0; } x1; } x0; BOOL x1; } x0; })creator sessionRecordingConfiguration:(id)configuration;
- (void)dealloc;
- (struct ServiceCreatorRegistry { struct shared_ptr<arfx::servicehost::BufferUpdatableServiceCreator<msqrd::dataprovider::IFaceTrackingDataProvider>> { void * x0; struct __shared_weak_count * x1; } x0; struct unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct __hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>> { float x0; } x3; } x0; } x1; })newServiceCreatorRegistry;
- (void)preloadServicesForConfiguration:(id)configuration;
- (struct shared_ref<arfx::servicehost::EffectController> { struct shared_ptr<arfx::servicehost::EffectController> { struct EffectController * x0; struct __shared_weak_count * x1; } x0; })prepareServicesForEffect:(id)effect;
- (void)updateServicesWithPixelBuffer:(struct __CVBuffer *)buffer bufferPresentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time additionalData:(id)data iglTextureCreator:(id)creator imageMetadata:(const void *)metadata outputSize:(const struct FBAREngineOutputSize *)size;
- (void)updateAudioServiceWithAudioSampleBuffer:(struct opaqueCMSampleBuffer *)buffer volumeLevel:(float)level;
- (BOOL)needAudioSampleBufferProcessing;
- (void)updateServicesWithDepthData:(id)data bufferPresentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)resetAllServices;
- (void)willStartRenderingFrame;
- (void)didFinishRenderingFrame;
- (void)preparePermissionsForEffectWithManifest:(struct shared_ref<const msqrd::manifest::Manifest> { struct shared_ptr<const msqrd::manifest::Manifest> { struct Manifest * x0; struct __shared_weak_count * x1; } x0; })manifest;
- (void)notifyServicesThatPermissionsAreReadyForEffectWithManifest:(const void *)manifest;
- (void)willAttachToController:(id)controller;
- (void)didDetachFromController:(id)controller;
- (struct shared_ref<msqrd::services::network::INetworkClientSource> { struct shared_ptr<msqrd::services::network::INetworkClientSource> { struct INetworkClientSource * x0; struct __shared_weak_count * x1; } x0; })networkClientSource;
- (id)initWithCoder:(id)coder;
- (void)encodeWithCoder:(id)coder;
- (id)configurationForServiceType:(const struct ServiceType *)type;
- (struct DocumentServiceCreatorRegistry { struct unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct __hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>> { float x0; } x3; } x0; } x0; })documentServiceCreators;
@end

#endif /* FBARServiceHostBase_h */
