//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCCAudioCapturer_h
#define FBCCAudioCapturer_h
@import Foundation;

#include "AVCaptureAudioDataOutputSampleBufferDelegate-Protocol.h"
#include "FBAudioEchoCanceller.h"
#include "FBCaptureSession.h"

@class NSString;
@protocol FBAudioBufferHandler, FBCCAudioPipelineControlling, FBCCAudioPipelineProviding, FBCCAudioPipelineRuntimeErrorDelegate, FBCaptureSessionRuntimeErrorDelegate, FBCaptureSessionStateDelegate, FBSystemAudioCaptureSessionInteracting, OS_dispatch_queue;

@interface FBCCAudioCapturer : NSObject<AVCaptureAudioDataOutputSampleBufferDelegate> {
  /* instance variables */
  NSObject<FBAudioBufferHandler> *_bufferHandler;
  NSObject<OS_dispatch_queue> *_audioQueue;
  NSObject<FBSystemAudioCaptureSessionInteracting> *_systemAudioCaptureSessionInteractor;
  NSObject<FBCCAudioPipelineProviding> *_audioPipelineProvider;
  struct FBCameraConfiguration { BOOL shouldFrontCameraVideoMirrored; BOOL multitaskingCameraAccessEnabled; long long startingDevicePosition; long long initialFlashMode; NSString *initialSessionPreset; BOOL retainSinglePreviewLayerWhenSwitchCaptureSession; BOOL retainMultiPreviewLayersWhenSwitchCaptureSession; BOOL useSingleCaptureDeviceAsDefaultCameraPosition; unsigned char initialTargetFPS; BOOL audioCaptureIgnoreRTCClientNotification; BOOL automaticallyConfiguresApplicationAudioSession; BOOL canPreConfigureAudioSession; BOOL shouldRemoveInputsAndOutputsWhenStopped; BOOL enableEchoCancellation; BOOL videoBufferTransformEnabled; long long videoStabilizationMode; BOOL setVideoStabilizationModeAfterStart; BOOL subjectAreaChangeMonitoring; float lowLightDetectionThreshold; float lowLightExposureBias; struct FBBracketedCaptureConfiguration { NSArray *exposureValues; undefined *resolverFunction; BOOL enabled; BOOL autoEnhanceEnabled; unsigned long long downsampleWidth; } bracketedCaptureConfiguration; double maxZoomFactor; BOOL ultraWideCameraSupport; BOOL preserveZoomFactorsDuringCameraSession; BOOL keepAudioSessionActiveDuringCameraSession; BOOL markAVWriterInputsAsFinishedWhenRecordingStops; id /* block */ disableARKitCacheBlock; struct CGSize { double width; double height; } preferredWorldTrackingResolution; BOOL planeDetectionEnabled; BOOL produceWorldTrackingFrames; BOOL worldTrackingAlignmentGravity; BOOL lowLightDetectorEnabled; BOOL flashSceneDetectorEnabled; BOOL audioCaptureEnabled; BOOL audioOnlyCapture; NSArray *preferredCaptureDeviceTypes; NSArray *captureDevices; NSArray *multiCaptureDevices; BOOL useLatestCaptureDevices; unsigned int photoPixelFormat; unsigned int initialCaptureVideoDataOutputPixelFormatType; struct FBCaptureAutoExposureConfiguration { BOOL enableAutoExposureOnTrackedObjects; BOOL trackVisibleFaces; BOOL trackVisibleBodies; BOOL trackVisibleCats; BOOL trackVisibleDogs; BOOL trackQRCodes; } autoExposureConfiguration; struct FBCapturePOIDetectorConfiguration { long long detectorType; double executionTimeInterval; double minimumBoundsChange; BOOL drawDebugBounds; } detectorConfiguration; BOOL fbAudioEnabled; NSArray *photoCapturePlugins; BOOL useFBMultiCaptureManager; BOOL enableMultiCapture; struct CGSize { double width; double height; } customizedCapturedPhotoResolution; struct FBPhotoCaptureConfiguration { BOOL stillImageCaptureEnabled; BOOL isFlipFrontCameraOutputEnabled; BOOL stopLivePreviewOnPhotoCapture; BOOL delayImageCaptureWhileAdjustingCamera; BOOL setFlashModeOnPhotoSettingsForSceneMonitoring; unsigned long long setMaxPhotoQualityPrioritization; } photoCaptureConfiguration; BOOL enableSceneDepth; BOOL livePhotoEnabled; BOOL includeTrackingDataInVideoData; struct FBCameraSimulationConfiguration { id /* block */ videoFilePathProvider; id /* block */ imageFilePathProvider; BOOL enableLocalVideoFileInput; BOOL enableLocalVideoFileAudioHandling; BOOL endlessPlaybackEnabled; } cameraSimulationConfiguration; BOOL stereoEnabled; BOOL forceARKit; BOOL pauseResumeOnAsyncSessionQueue; struct FBRecordingConfiguration { id /* block */ depthRecordingHandler; id /* block */ poseRecordingHandler; BOOL shouldCaptureWithRecordingTimestamps; struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumDuration; BOOL useCaptureVideoDataOutputRecommendedVideoSettings; } recordingConfiguration; BOOL enableSetWorldMapForWorldTracking; BOOL enableMETACaptureManagerConvergence; BOOL enableControlPanel; int maxExposureDurationMs; BOOL doNotSetVideoSettings; isARKitAudioDataRequired *videoFormat; BOOL x0; int captureInfoLoggingFrameInterval; BOOL isARFrameRotationDisabled; } _cameraConfiguration;
  BOOL _enableEchoCancellation;
  FBAudioEchoCanceller *_echoCanceller;
  BOOL _enableVolumeEditing;
  double _volumeMultiplier;
}

@property (retain, nonatomic) NSObject<FBCCAudioPipelineControlling> *ccAudioPipelineController;
@property (retain, nonatomic) FBCaptureSession *captureSession;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<FBCaptureSessionStateDelegate> *sessionStateDelegate;
@property (weak, nonatomic) NSObject<FBCaptureSessionRuntimeErrorDelegate> *runtimeErrorDelegate;
@property (readonly, nonatomic) BOOL isAudioSessionRunning;
@property (nonatomic) BOOL ignoreRTCClientNotification;
@property (readonly, nonatomic) struct OpaqueCMClock * clock;
@property (weak, nonatomic) NSObject<FBCCAudioPipelineRuntimeErrorDelegate> *audioPipelineRuntimeErrorDelegate;

/* instance methods */
- (id)initWithBufferHandler:(id)handler audioQueue:(id)queue systemAudioCaptureSessionInteractor:(id)interactor audioPipelineProviding:(id)providing cameraConfiguration:(const struct FBCameraConfiguration *)configuration;
- (void)dealloc;
- (void)addInputs:(id)inputs;
- (void)addOutputs:(id)outputs;
- (void)warmupAudioSession;
- (void)startAudioCaptureWithEchoCancellationEnabled:(BOOL)enabled audioSessionOrientation:(id)orientation shouldStereoCaptureBeEnabled:(BOOL)enabled completion:(id /* block */)completion;
- (void)stopAudioSessionWithDeactivatingSession:(BOOL)session removeInputsOutputs:(BOOL)outputs;
- (void)enableEditingMicrophoneVolume:(BOOL)volume volumeMultiplier:(double)multiplier;
- (void)createAudioPipelineIfNecessaryAndResume;
- (void)pauseAudioPipeline;
- (void)destroyAudioPipeline;
- (void)setAudioPipelineIsMuted:(BOOL)muted;
- (void)setAudioPipelineSystemWideIsMuted:(BOOL)muted;
- (BOOL)audioPipelineIsMuted;
- (void)handleOutputBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (void)captureOutput:(id)output didOutputSampleBuffer:(struct opaqueCMSampleBuffer *)buffer fromConnection:(id)connection;
- (void)rtcClientDeactivated;
- (void)rtcClientBecameActive;
- (BOOL)shouldEnableEchoCancellation;
- (void)avAudioSessionIsActivated;
- (void)avAudioSessionIsDeactivated;
- (void)_audioSessionRouteChange:(id)change;
@end

#endif /* FBCCAudioCapturer_h */
