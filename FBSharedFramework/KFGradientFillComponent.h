//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef KFGradientFillComponent_h
#define KFGradientFillComponent_h
@import Foundation;

#include "KFComponent.h"

@protocol {KFValue<CGPoint>="_value"{variant<bool, CGPoint, KFAnimation<CGPoint> *>="__impl_"{__impl<bool, CGPoint, KFAnimation<CGPoint> *>="__data"(__union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, bool, CGPoint, KFAnimation<CGPoint> *>="__dummy"c"__head"{__alt<0UL, bool>="__value"B}"__tail"(__union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, CGPoint, KFAnimation<CGPoint> *>="__dummy"c"__head"{__alt<1UL, CGPoint>="__value"{CGPoint="x"d"y"d}}"__tail"(__union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, KFAnimation<CGPoint> *>="__dummy"c"__head"{__alt<2UL, KFAnimation<CGPoint> *>="__value"^v}"__tail"(__union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL>=))))"__index"I}}}, {KFValue<std::vector<UIColor *>>="_value"{variant<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *>="__impl_"{__impl<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *>="__data"(__union<std::__variant_detail::_Trait::_Available, 0UL, bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *>="__dummy"c"__head"{__alt<0UL, bool>="__value"B}"__tail"(__union<std::__variant_detail::_Trait::_Available, 1UL, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *>="__dummy"c"__head"{__alt<1UL, std::vector<UIColor *>>="__value"{vector<UIColor *, std::allocator<UIColor *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<UIColor *__strong *, std::allocator<UIColor *>>="__value_"^@}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 2UL, KFAnimation<std::vector<UIColor *>> *>="__dummy"c"__head"{__alt<2UL, KFAnimation<std::vector<UIColor *>> *>="__value"^v}"__tail"(__union<std::__variant_detail::_Trait::_Available, 3UL>=))))"__index"I}}}, {KFValue<std::vector<double>>="_value"{variant<bool, std::vector<double>, KFAnimation<std::vector<double>> *>="__impl_"{__impl<bool, std::vector<double>, KFAnimation<std::vector<double>> *>="__data"(__union<std::__variant_detail::_Trait::_Available, 0UL, bool, std::vector<double>, KFAnimation<std::vector<double>> *>="__dummy"c"__head"{__alt<0UL, bool>="__value"B}"__tail"(__union<std::__variant_detail::_Trait::_Available, 1UL, std::vector<double>, KFAnimation<std::vector<double>> *>="__dummy"c"__head"{__alt<1UL, std::vector<double>>="__value"{vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}}"__tail"(__union<std::__variant_detail::_Trait::_Available, 2UL, KFAnimation<std::vector<double>> *>="__dummy"c"__head"{__alt<2UL, KFAnimation<std::vector<double>> *>="__value"^v}"__tail"(__union<std::__variant_detail::_Trait::_Available, 3UL>=))))"__index"I}}};

@interface KFGradientFillComponent : KFComponent {
  /* instance variables */
  struct KFValue<std::vector<UIColor *>> { struct variant<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *> { struct __impl<bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *> { union __union<std::__variant_detail::_Trait::_Available, 0UL, bool, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *> { char __dummy; struct __alt<0UL, bool> { BOOL __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, std::vector<UIColor *>, KFAnimation<std::vector<UIColor *>> *> { char __dummy; struct __alt<1UL, std::vector<UIColor *>> { struct vector<UIColor *, std::allocator<UIColor *>> { __end_ * *__begin_; __end_cap_ * * x0; struct __compressed_pair<UIColor *__strong *, std::allocator<UIColor *>> { id *__value_; } x1; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL, KFAnimation<std::vector<UIColor *>> *> { char __dummy; struct __alt<2UL, KFAnimation<std::vector<UIColor *>> *> { void *__value; } __head; union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _value; } colors;
  struct KFValue<std::vector<double>> { struct variant<bool, std::vector<double>, KFAnimation<std::vector<double>> *> { struct __impl<bool, std::vector<double>, KFAnimation<std::vector<double>> *> { union __union<std::__variant_detail::_Trait::_Available, 0UL, bool, std::vector<double>, KFAnimation<std::vector<double>> *> { char __dummy; struct __alt<0UL, bool> { BOOL __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 1UL, std::vector<double>, KFAnimation<std::vector<double>> *> { char __dummy; struct __alt<1UL, std::vector<double>> { struct vector<double, std::allocator<double>> { double *__begin_; double *__end_; struct __compressed_pair<double *, std::allocator<double>> { double *__value_; } __end_cap_; } __value; } __head; union __union<std::__variant_detail::_Trait::_Available, 2UL, KFAnimation<std::vector<double>> *> { char __dummy; struct __alt<2UL, KFAnimation<std::vector<double>> *> { void *__value; } __head; union __union<std::__variant_detail::_Trait::_Available, 3UL> __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _value; } positions;
  struct KFValue<CGPoint> { struct variant<bool, CGPoint, KFAnimation<CGPoint> *> { struct __impl<bool, CGPoint, KFAnimation<CGPoint> *> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, bool, CGPoint, KFAnimation<CGPoint> *> { char __dummy; struct __alt<0UL, bool> { BOOL __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, CGPoint, KFAnimation<CGPoint> *> { char __dummy; struct __alt<1UL, CGPoint> { struct CGPoint { double x; double y; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, KFAnimation<CGPoint> *> { char __dummy; struct __alt<2UL, KFAnimation<CGPoint> *> { void *__value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL> __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _value; } startRamp;
  struct KFValue<CGPoint> { struct variant<bool, CGPoint, KFAnimation<CGPoint> *> { struct __impl<bool, CGPoint, KFAnimation<CGPoint> *> { union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 0UL, bool, CGPoint, KFAnimation<CGPoint> *> { char __dummy; struct __alt<0UL, bool> { BOOL __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 1UL, CGPoint, KFAnimation<CGPoint> *> { char __dummy; struct __alt<1UL, CGPoint> { struct CGPoint { double x; double y; } __value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 2UL, KFAnimation<CGPoint> *> { char __dummy; struct __alt<2UL, KFAnimation<CGPoint> *> { void *__value; } __head; union __union<std::__variant_detail::_Trait::_TriviallyAvailable, 3UL> __tail; } __tail; } __tail; } __data; unsigned int __index; } __impl_; } _value; } endRamp;
  unsigned long long gradientType;
  struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } gradientBounds;
}

/* class methods */
+ (unsigned short)componentClassIdentifier;

/* instance methods */
@end

#endif /* KFGradientFillComponent_h */
