//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBMobileConfigContextObjcImpl_h
#define FBMobileConfigContextObjcImpl_h
@import Foundation;

#include "FBMobileConfigContext-Protocol.h"
#include "FBMobileConfigInDevelopmentAPI-Protocol.h"

@class NSString;
@protocol {shared_ptr<mobileconfig::FBMobileConfigContextInternalApi>="__ptr_"^{FBMobileConfigContextInternalApi}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mobileconfig::FBMobileConfigSpecifierTranslationBase>="__ptr_"^{FBMobileConfigSpecifierTranslationBase}"__cntrl_"^{__shared_weak_count}}, {weak_ptr<mobileconfig::IFBMobileConfigManager>="__ptr_"^{IFBMobileConfigManager}"__cntrl_"^{__shared_weak_count}};

@interface FBMobileConfigContextObjcImpl : NSObject<FBMobileConfigContext, FBMobileConfigInDevelopmentAPI> {
  /* instance variables */
  struct weak_ptr<mobileconfig::IFBMobileConfigManager> { struct IFBMobileConfigManager *__ptr_; struct __shared_weak_count *__cntrl_; } _configManager;
  struct shared_ptr<mobileconfig::FBMobileConfigContextInternalApi> { struct FBMobileConfigContextInternalApi *__ptr_; struct __shared_weak_count *__cntrl_; } _cppContextImpl;
  struct shared_ptr<mobileconfig::FBMobileConfigSpecifierTranslationBase> { struct FBMobileConfigSpecifierTranslationBase *__ptr_; struct __shared_weak_count *__cntrl_; } _stableSpecTranslation;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithHandle:(struct shared_ptr<mobileconfig::FBMobileConfigValueStore> { struct FBMobileConfigValueStore * x0; struct __shared_weak_count * x1; })handle withConfigManager:(struct weak_ptr<mobileconfig::IFBMobileConfigManager> { struct IFBMobileConfigManager * x0; struct __shared_weak_count * x1; })manager overrides:(struct shared_ptr<mobileconfig::FBMobileConfigOverridesTable> { struct FBMobileConfigOverridesTable * x0; struct __shared_weak_count * x1; })overrides stableSpecTranslation:(struct shared_ptr<mobileconfig::FBMobileConfigSpecifierTranslationBase> { struct FBMobileConfigSpecifierTranslationBase * x0; struct __shared_weak_count * x1; })translation getCallStackBlock:(id /* block */)block;
- (BOOL)getBool:(struct mc_bool_param_t { unsigned long long x0; })bool;
- (BOOL)getBool:(struct mc_bool_param_t { unsigned long long x0; })bool withDefault:(BOOL)default;
- (BOOL)getBool:(struct mc_bool_param_t { unsigned long long x0; })bool withOptions:(id)options;
- (BOOL)getBool:(struct mc_bool_param_t { unsigned long long x0; })bool withOptions:(id)options withDefault:(BOOL)default;
- (int)getEpVersion:(unsigned int)version configKey:(unsigned int)key;
- (long long)getInt64:(struct mc_long_param_t { unsigned long long x0; })int64;
- (long long)getInt64:(struct mc_long_param_t { unsigned long long x0; })int64 withDefault:(long long)default;
- (long long)getInt64:(struct mc_long_param_t { unsigned long long x0; })int64 withOptions:(id)options;
- (long long)getInt64:(struct mc_long_param_t { unsigned long long x0; })int64 withOptions:(id)options withDefault:(long long)default;
- (id)getString:(struct mc_string_param_t { unsigned long long x0; })string;
- (id)getString:(struct mc_string_param_t { unsigned long long x0; })string withDefault:(id)default;
- (id)getString:(struct mc_string_param_t { unsigned long long x0; })string withOptions:(id)options;
- (id)getString:(struct mc_string_param_t { unsigned long long x0; })string withOptions:(id)options withDefault:(id)default;
- (double)getDouble:(struct mc_double_param_t { unsigned long long x0; })double;
- (double)getDouble:(struct mc_double_param_t { unsigned long long x0; })double withDefault:(double)default;
- (double)getDouble:(struct mc_double_param_t { unsigned long long x0; })double withOptions:(id)options;
- (double)getDouble:(struct mc_double_param_t { unsigned long long x0; })double withOptions:(id)options withDefault:(double)default;
- (id)getMapValueForParam:(struct mc_string_string_map_param_t { unsigned long long x0; })param withKey:(id)key;
- (id)getMapKeys:(struct mc_string_string_map_param_t { unsigned long long x0; })keys;
- (void)logExposureForConfigParameter:(unsigned long long)parameter;
- (void)logExposureForBoolParameter:(struct mc_bool_param_t { unsigned long long x0; })parameter;
- (void)logExposureForDoubleParameter:(struct mc_double_param_t { unsigned long long x0; })parameter;
- (void)logExposureForInt64Parameter:(struct mc_long_param_t { unsigned long long x0; })parameter;
- (void)logExposureForStringParameter:(struct mc_string_param_t { unsigned long long x0; })parameter;
- (id)getLoggingID:(unsigned long long)id;
- (struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; })getStringStringMap:(struct mc_string_string_map_param_t { unsigned long long x0; })map withOptions:(id)options;
- (BOOL)hasValidConfig;
@end

#endif /* FBMobileConfigContextObjcImpl_h */
