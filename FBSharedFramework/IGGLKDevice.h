//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGGLKDevice_h
#define IGGLKDevice_h
@import Foundation;

#include "MTLDevice-Protocol.h"

@protocol struct shared_ptr<iglu::resourceloader::IResourceLoader> { struct IResourceLoader * x0; struct __shared_weak_count * x1; }, {shared_ptr<igl::ICommandQueue>="__ptr_"^{ICommandQueue}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IDevice>="__ptr_"^{IDevice}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::cache::WeakCache<igl::IShaderModule, igl::ShaderModuleDesc>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::resourceloader::IResourceLoader>="__ptr_"^{IResourceLoader}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::resourceloader::ResourcePool>="__ptr_"^{ResourcePool}"__cntrl_"^{__shared_weak_count}}, {unordered_map<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>, std::allocator<std::pair<const igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>>>="__table_"{__hash_table<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::__unordered_map_hasher<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>>, std::__unordered_map_equal<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::equal_to<igl::RenderPipelineDesc>, std::hash<igl::RenderPipelineDesc>>, std::allocator<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::equal_to<igl::RenderPipelineDesc>, std::hash<igl::RenderPipelineDesc>>>="__value_"f}}}, {unordered_map<std::string, IGGLKLibrary *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, IGGLKLibrary *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, IGGLKLibrary *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, IGGLKLibrary *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}};

@interface IGGLKDevice : NSObject {
  /* instance variables */
  struct unordered_map<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>, std::allocator<std::pair<const igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>>> { struct __hash_table<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::__unordered_map_hasher<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>>, std::__unordered_map_equal<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::equal_to<igl::RenderPipelineDesc>, std::hash<igl::RenderPipelineDesc>>, std::allocator<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::hash<igl::RenderPipelineDesc>, std::equal_to<igl::RenderPipelineDesc>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<igl::RenderPipelineDesc, std::__hash_value_type<igl::RenderPipelineDesc, std::shared_ptr<igl::IRenderPipelineState>>, std::equal_to<igl::RenderPipelineDesc>, std::hash<igl::RenderPipelineDesc>>> { float __value_; } __p3_; } __table_; } _pipelineStateCacheIGL;
  struct unordered_map<std::string, IGGLKLibrary *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, IGGLKLibrary *>>> { struct __hash_table<std::__hash_value_type<std::string, IGGLKLibrary *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, IGGLKLibrary *>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, IGGLKLibrary *>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, IGGLKLibrary *>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } _metalLibraries;
  int _iglBackendType;
  NSObject<MTLDevice> *_backingDevice;
  struct shared_ptr<igl::IDevice> { struct IDevice *__ptr_; struct __shared_weak_count *__cntrl_; } _backingDeviceIGL;
  struct shared_ptr<igl::ICommandQueue> { struct ICommandQueue *__ptr_; struct __shared_weak_count *__cntrl_; } _commandQueueIGL;
  struct shared_ptr<iglu::resourceloader::ResourcePool> { struct ResourcePool *__ptr_; struct __shared_weak_count *__cntrl_; } _resourcePool;
  struct shared_ptr<iglu::cache::WeakCache<igl::IShaderModule, igl::ShaderModuleDesc>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _shaderCache;
}

@property (readonly, nonatomic) struct shared_ptr<iglu::resourceloader::IResourceLoader> { struct IResourceLoader * x0; struct __shared_weak_count * x1; } resourceLoader;

/* class methods */
+ (id)newIGLMetalDeviceWithCommonShaderCache:(BOOL)cache;

/* instance methods */
- (void)dealloc;
- (id)imageSourceContext;
@end

#endif /* IGGLKDevice_h */
