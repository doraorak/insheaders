//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFSynchronousPlayer_h
#define FNFSynchronousPlayer_h
@import Foundation;

#include "FNFAVPlayerStateUpdate-Protocol.h"
#include "FNFAssetForPlayer-Protocol.h"
#include "FNFClock-Protocol.h"
#include "FNFExponentialBackoffTimer.h"
#include "FNFInternalPlayerDelegate-Protocol.h"
#include "FNFPSRProfiling-Protocol.h"
#include "FNFPlayerAudioDecoder-Protocol.h"
#include "FNFPlayerAudioEngine-Protocol.h"
#include "FNFPlayerAudioEngineDelegate-Protocol.h"
#include "FNFPlayerControlling-Protocol.h"
#include "FNFPlayerDisplayEngine-Protocol.h"

@class BOOL *, NSDate, NSError, NSMutableDictionary, NSString;
@protocol FNFFrameDisplayHandling, FNFFrameDropObserving, FNFLogging, FNFPlayerCaptionParser, FNFPlayerLiveTraceManager, OS_dispatch_queue, {duration<long long, std::ratio<1, 1000>>="__rep_"q};

@interface FNFSynchronousPlayer : NSObject<FNFPlayerAudioEngineDelegate, FNFPlayerControlling, FNFAVPlayerStateUpdate> {
  /* instance variables */
  NSObject<FNFInternalPlayerDelegate> *_delegate;
  NSObject<FNFAssetForPlayer> *_playerAsset;
  NSObject<FNFPlayerAudioEngine> *_audioEngine;
  NSObject<FNFPlayerAudioDecoder> *_audioDecoder;
  NSObject<FNFPlayerDisplayEngine> *_displayEngine;
  NSObject<FNFClock> *_clock;
  NSObject<FNFPlayerCaptionParser> *_captionParser;
  NSObject<FNFPlayerLiveTraceManager> *_liveTraceManager;
  NSObject<FNFFrameDisplayHandling> *_frameDisplayHandler;
  NSObject<OS_dispatch_queue> *_runningQueue;
  struct FNFPlayerInternalState { BOOL playingRequested; BOOL isPlaying; BOOL endTimeReached; BOOL firstAudioFrameEnqueued; BOOL stoppedEnqueuingVideo; BOOL stoppedEnqueuingAudio; BOOL isFirstVideoFrame; BOOL displayEngineOnError; BOOL audioEngineInitialized; BOOL isReadyForDisplay; BOOL previousSeekCompletionBlockExecuted; BOOL muted; BOOL showCaptions; BOOL videoStalled; BOOL displayEngineDeactivated; BOOL audioStalled; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastStartingTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastRequestedStartTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastRequestedMuteTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedVideoPts; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedAudioPts; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedAudioDts; double lastAudioQueueStartDuration; float lastPlayRate; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastSeekToTime; float playRate; durationTimerForAsset *playbackTimeObserverForAsset; stallTimerObserver * x0; seekFrameUpdateObserver * x1; sampleBufferFlushTimerObserver * x2; levelMeterTimerObserver * x3; backgroundPauseTime * x4; struct { long long value; int timescale; unsigned int flags; long long epoch; } x5; unsigned int sampleAudioFrameSize; NSString *previousRepresentationId; NSString *representationId; NSString *previousAudioRepresentationId; NSString *audioRepresentationId; long long representationChangedTrack; struct opaqueCMFormatDescription *formatDesc; unsigned long long lastFrameSeekAttempt; long long status; struct FNFPlayerStallState { BOOL isStalled; BOOL isStartStall; BOOL audioStallOnlyEnabled; BOOL videoStalled; BOOL audioStalled; unsigned long long stallStartPositionTimeInMilliseconds; unsigned long long stallEndPositionTimeInMilliseconds; BOOL audioStallOnlyThresholdExceeded; } stallState; struct FNFPlayerSeekState { BOOL seeking; BOOL seekFinished; int seekReason; } seekState; int pauseReason; int muteReason; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } bounds; id /* block */ frameSeekCompletionBlock; playContext *loggingContext; pauseContext * x6; muteContext * x7; playerItemWarning * x8; NSError * x9; NSError *playerItemError; NSArray *playerItemLoadedTimeRanges; struct { long long value; int timescale; unsigned int flags; long long epoch; } playerItemDuration; struct FNFFrameDisplayState { double pts; double audioDisplayTime; double videoDisplayTime; } frameDisplayState; struct FNFAVSyncStatus { double offsetAverageSec; long long offsetSampleCount; } avSync; struct FNFDisplayedFrameInfo { double presentTimestamp; double displayedPlayerTimestamp; double displayedUnixTimestamp; } displayedFrameInfo; struct FNFRenderedFrameInfo { double presentTimestamp; double renderedPlayerTimestamp; BOOL isFrameStalled; } renderedFrameInfo; NSString *playlistDRMKeyId; NSString *playlistDRMPssh; unsigned long long videoStallStartTimeMs; unsigned long long videoStallDurationMs; unsigned long long audioStallStartTimeMs; unsigned long long audioStallDurationMs; NSMutableDictionary *playbackEndLoggingInfo; BOOL isAudioABREnabled; BOOL isAudioABREngine; BOOL isAudioABREligible; struct FNFFrameDropInfo { unsigned long long totalFrames; unsigned long long droppedFrames; unsigned long long droppedFramesLarge; unsigned long long droppedFramesVeryLarge; } frameDropInfo; int lastSegmentIndex; } _playerInternalState;
  NSError *_playerError;
  NSObject<FNFLogging> *_logger;
  NSObject<FNFPSRProfiling> *_psrProfiler;
  float _volume;
  float _volumeRampTime;
  id /* block */ _audioLevelCallback;
  BOOL _endFrameSeekIfNoMoreFrames;
  BOOL _useLastCallbackInBackToBackFrameSeek;
  BOOL _isDurationIndefinite;
  BOOL _hasPendingMuteRequest;
  unsigned int _minSampleAudioFrameSize;
  long long _broadcastLatencySensitivity;
  FNFExponentialBackoffTimer *_exponentialBackoffTimer;
  double _lastResetTime;
  long long _audioRetryCount;
  BOOL _skipBackToBackSeekAsApplicable;
  BOOL _decompressionErrorDebugging;
  BOOL _enableAdsFrameLogging;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _timeBetweenSampleBufferFlushDuringFrameSeek;
  BOOL _displayFirstFrame;
  BOOL _allowsVideoPlaybackWithoutAudio;
  double _negativeAudioStartTimeThreshold;
  double _delayToDeinitMutedAsset;
  BOOL _delayToDeinitMutedAssetInProgress;
  BOOL _enableBackgroundAudio;
  BOOL _enableFrameRenderLogging;
  unsigned long long _frameRenderLoggingSampleRate;
  unsigned long long _frameRenderLoggingCount;
  BOOL _shouldRestartAudioOnNoAudioError;
  double _liveSpeedChangeIntervalSec;
  BOOL _enableLiveSeekingPerfectFrame;
  BOOL _enableLiveSeeking;
  BOOL _enableAudioStallOnly;
  BOOL _enableClientBackgroundPlayback;
  struct duration<long long, std::ratio<1, 1000>> { long long __rep_; } _videoStallTimeThresholdForAudioStallOnly;
  BOOL _enableSynchronousPlayerStallLogs;
  BOOL _appBackgrounded;
  double _stallStartTime;
  int _audioStallOnlyCounter;
  int _maxAudioStallsAllowed;
  NSMutableDictionary *_playbackEndLoggingInfo;
  BOOL _enableDisplayEngineInactiveForAudioOnly;
  NSObject<FNFPlayerDisplayEngine> *_inactiveDisplayEngine;
  BOOL _flushAudioQueueAfterEnqueuingAllBuffers;
  BOOL _xheAACEnablePerfectFrameSeek;
  BOOL _enableAudioStallMetric;
  unsigned int _audioBuffersEnqueued;
  int _xheAACMaxBadDataErrorRetryCount;
  int _audioEnqueStartWithNonKeyFrameCount;
  int _audioEnqueStartWithNonKeyFrameSegmentIndex;
  double _audioEnqueStartWithNonKeyFramePts;
  double _audioEnqueStartWithNonKeyFrameDts;
  double _audioEnqueStartWithNonKeyFramePreviousPts;
  double _audioEnqueStartWithNonKeyFramePreviousDts;
  int _audioEnqueStartWithNonKeyFrameActiveFrameIndex;
  int _audioEnqueStartWithNonKeyFrameCurrentAssetFrameIndex;
  int _audioEnqueStartWithNonKeyFrameAQStartAssetFrameIndex;
  BOOL _xheAACDisableAudioQueueFlushForStallPause;
  int _xheAACActiveAudioFramesIndex;
  int _xheAACAssetAudioFramesIndexAtAudioQueueStart;
  double _speedChangedTime;
  unsigned long long _debugStallStartTimeMs;
  unsigned long long _debugStallEndTimeMs;
  BOOL _enableLogAudioEnqueueDtsDecrease;
  BOOL _xheAACEnableResetLastEnqueuedAudioDts;
  BOOL _frameDisplaySyncMuteToPlayerState;
  BOOL _monitorAudioLevel;
  double _minAudioLevel;
  BOOL _audioInterrupted;
  int _resetAudioInterruptionThresholdSec;
  double _lastInterruptTime;
  double _lastTimeOutputLevelBelowMin;
  int _numOutputLevelErrors;
  int _minNumOutputLevelErrors;
  BOOL _logDebugInfoForOutputLevelBelowMinError;
  double _belowMinOutputLevelBackoffThresholdSec;
  int _numOccurrenceskErrorCodeOutputLevelBelowMin;
  int _numOccurrenceskErrorCodeOutputLevelBelowMinSincePlaybackStart;
  int _loggedNumOccurrenceskErrorCodeOutputLevelBelowMin;
  int _logMaxNumOccurrenceskErrorCodeOutputLevelBelowMin;
  BOOL _logOutputLevelBelowMinErrorSincePlaybackStart;
  int _minOccurrencesToLogOutputLevelBelowMinError;
  BOOL _resetOutputLevelBelowMinErrorCountSincePlaybackStart;
  BOOL _logOutputLevelBelowMinErrorAtSpecificDurations;
  int _numAudioFrameZeroCausedSetupFailure;
  id _audioEngineTimerObserver;
  BOOL _recoverAudioEngineIncorrectState;
  NSString *_currentAudioRepresentationId;
  BOOL _enableAudioABR;
  BOOL _enableAudioQueuePauseFix;
  BOOL _enableAudioUnmuteWithDelayFix;
  BOOL _enableFrameDropObserver;
  NSObject<FNFFrameDropObserving> *_frameDropObserver;
  double _debugAudioEnqueuedTime;
  double _debugVideoEnqueuedTime;
  double _debugAudioAdjustedTime;
  BOOL _enableAutoTranslationInConfig;
  BOOL _updateAudioABRBuffering;
  BOOL _enableIntentionalPlaybackStall;
  double _intentionalPlaybackStallDurationMS;
  NSDate *_firstRequestedStartTime;
  BOOL _isAutoTranslateSwitchPending;
  BOOL _disableBackgroundPauseTimeInvalidation;
  BOOL _enableLoggingPlayRequest;
  BOOL _enableInstrumentedBlocks;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)dealloc;
- (id)initWithDisplayEngine:(id)engine config:(struct { struct FNFPlayerConfigGen { long long x0; BOOL x1; BOOL x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; int x5; BOOL x6; BOOL x7; unsigned int x8; double x9; BOOL x10; BOOL x11; BOOL x12; int x13; unsigned long long x14; BOOL x15; int x16; int x17; double x18; long long x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; double x25; int x26; BOOL x27; BOOL x28; BOOL x29; double x30; int x31; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x32; BOOL x33; double x34; int x35; unsigned int x36; BOOL x37; BOOL x38; BOOL x39; int x40; BOOL x41; BOOL x42; BOOL x43; BOOL x44; double x45; BOOL x46; BOOL x47; BOOL x48; int x49; double x50; BOOL x51; BOOL x52; int x53; double x54; double x55; int x56; BOOL x57; BOOL x58; int x59; int x60; int x61; int x62; int x63; BOOL x64; BOOL x65; BOOL x66; int x67; BOOL x68; BOOL x69; BOOL x70; BOOL x71; int x72; BOOL x73; BOOL x74; BOOL x75; BOOL x76; unsigned long long x77; double x78; BOOL x79; BOOL x80; BOOL x81; double x82; BOOL x83; BOOL x84; BOOL x85; })config audioEngine:(id)engine audioDecoder:(id)decoder clock:(id)clock runningQueue:(id)queue muted:(BOOL)muted asyncTimebase:(BOOL)timebase;
- (void)setDelegate:(id)delegate;
- (id)playerLayer;
- (void)play;
- (void)playWithContext:(id)context;
- (void)_playWithPlayReason:(int)reason context:(id)context;
- (void)pause;
- (void)pauseWithContext:(id)context;
- (void)pauseWithPauseReason:(int)reason context:(id)context;
- (void)setEnableAdsFrameLogging:(BOOL)logging;
- (float)rate;
- (void)setRate:(float)rate;
- (void)setRate:(float)rate context:(id)context;
- (void)_setRate:(float)rate playReason:(int)reason pauseReason:(int)reason context:(id)context;
- (void)setOutputEffects:(id)effects;
- (void)replaceCurrentItemWithPlayerItem:(id)item;
- (void)replaceCurrentItemWithPlayerItem:(id)item loggingContext:(id)context;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time seekReason:(int)reason completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })before toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })after completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })before toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })after seekReason:(int)reason completionHandler:(id /* block */)handler;
- (void)_seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time frameSeekOn:(BOOL)on seekReason:(int)reason completionHandler:(id /* block */)handler;
- (void)_handleSeekCompletionHandlerWithSeekReason:(int)reason seekFinished:(BOOL)finished completionHandler:(id /* block */)handler;
- (void)_handleFramePerfectSeekWithSeekReason:(int)reason seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time completionHandler:(id /* block */)handler;
- (void)_processFrame:(const struct FNFFrameMetadata *)frame frameData:(const char *)data willDisplay:(BOOL)display enqueueMessage:(id)message;
- (BOOL)_seekToFrameAt:(struct { long long x0; int x1; unsigned int x2; long long x3; })at;
- (void)setBroadcastLatencySensitivity:(long long)sensitivity;
- (id)createPeriodicTimeObserverForInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })interval followMasterClock:(BOOL)clock usingBlock:(id /* block */)block;
- (void)addTimeObserver:(id)observer;
- (void)flushTimeObserver:(id)observer;
- (void)removeTimeObserver:(id)observer;
- (float)volume;
- (void)setVolume:(float)volume;
- (void)setVolume:(float)volume rampTime:(float)time;
- (BOOL)isMuted;
- (void)setMuted:(BOOL)muted isUserInitiated:(BOOL)initiated context:(id)context;
- (BOOL)_shouldMute:(BOOL)mute muteReason:(int)reason context:(id)context;
- (void)_muteAudioWithReason:(int)reason;
- (void)_tearDownAudio;
- (void)_tearDownAudioForSetAutoTranslateLang;
- (void)_setupAudioLevelMonitor;
- (void)_registerForInterruptions;
- (void)_interruptionWithNotification:(id)notification;
- (void)_setAudioEngineObserver:(BOOL)observer;
- (void)_audioEngineHealthCheck;
- (void)_unmuteAudioWithReason:(int)reason;
- (void)_setMuted:(BOOL)muted internalMuteReason:(int)reason context:(id)context;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)captions;
- (void)setCaptionParser:(id)parser;
- (void)setAudioEngine:(id)engine;
- (void)setAudioDecoder:(id)decoder;
- (void)setAudioTimeDomainPitchAlgorithmEnabled:(BOOL)enabled;
- (void)setAudioVarispeedPitchAlgorithmEnabled:(BOOL)enabled;
- (void)setLiveTraceManager:(id)manager;
- (void)setEnableClientBackgroundPlayback:(BOOL)playback;
- (void)setUserSelectedQuality:(id)quality;
- (void)selectAudioRole:(unsigned char)role language:(id)language;
- (void)setLoggingContext:(id)context;
- (void)setLogger:(id)logger;
- (void)setPSRProfiler:(id)psrprofiler;
- (id)currentItem;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (id)error;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastStartingTime;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastRequestedStartTime;
- (double)lastAudioQueueStartDuration;
- (void)addLevelMeterCallback:(id /* block */)callback timeInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })interval;
- (void)removeLevelMeterCallback;
- (void)didConnectWithExternalScreen;
- (void)didDisconnectWithExternalScreen;
- (void)didChangeScreenCaptured;
- (BOOL)_isPlayRestricted;
- (BOOL)_isHDMIConnectedForProtectedContent;
- (BOOL)_isScreenCapturedForProtectedContent;
- (void)_levelMeterCallback;
- (void)_pausePlayback:(int)playback;
- (void)_resumePlayback;
- (BOOL)_isAudioBufferingActive;
- (void)_setupAudioEngine;
- (void)_startUpdateSeekFrame;
- (void)_updateFrameAfterSeek;
- (id)_addPlaybackTimerForAsset;
- (id)_addDurationTimerForAsset;
- (void)_flushSampleBuffersDuringFrameSeekWithCompletionHandler:(id /* block */)handler;
- (void)_playbackFinishedTimeForAsset:(struct { long long x0; int x1; unsigned int x2; long long x3; })asset;
- (BOOL)_isXheAACAudio;
- (void)_playbackTimeListenerForAsset:(struct { long long x0; int x1; unsigned int x2; long long x3; })asset;
- (void)_adjustAudioFrameToCurrentPlaybackTime;
- (void)_setActiveAudioFrameIndexForAudioQueueStart;
- (void)_advanceFrameForAudioTrack;
- (const char *)_currentFrameDataForAudioTrack;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })_currentFrameMetadataForAudioTrack;
- (BOOL)_processSwitchingToNewAudioRepresentation:(struct AudioQueueBuffer *)representation newRepresentationId:(id)id outNextRepresentationId:(id *)id asbd:(struct AudioStreamBasicDescription *)asbd audioStreamExtraParameters:(id *)parameters;
- (BOOL)_audioPutDataIntoBufferCallback:(struct AudioQueueBuffer *)callback timestamp:(struct AudioTimeStamp *)timestamp framePts:(struct  *)pts isfirstPacket:(BOOL *)packet framesToTrim:(unsigned int *)trim inBufferRepresentationId:(id)id outNextRepresentationId:(id *)id asbd:(struct AudioStreamBasicDescription *)asbd audioStreamExtraParameters:(id *)parameters IPFPacketIndex:(int *)index playbackDidStart:(BOOL *)start;
- (BOOL)_checkForRepresentationChange:(struct AudioQueueBuffer *)change inBufferRepresentationId:(id)id outNextRepresentationId:(id *)id asbd:(struct AudioStreamBasicDescription *)asbd audioStreamExtraParameters:(id *)parameters isRepresentationChange:(BOOL *)change;
- (BOOL)_audioEnqueueFrameDataCallback:(id *)callback metadata:(struct FNFAudioFrameMetadata *)metadata;
- (BOOL)_enqueueCompressedBuffer:(id)buffer;
- (BOOL)_enqueueDecompressedBuffer;
- (void)_videoLayerEnqueueFrameCallback:(id)callback;
- (void)_videoLayerEnqueueDecompressedFrameCallback;
- (void)_checkIfRepresentationChanged:(int)changed;
- (void)_representationDidChange;
- (void)_checkIfAudioRepresentationChanged;
- (void)_audioRepresentationDidChange;
- (void)_setupAudio;
- (void)_startVideo:(id)video;
- (void)_enqueueBuffer:(id)buffer;
- (void)_updateToFailureStatusWithError:(id)error;
- (void)_updateStatus:(long long)status;
- (BOOL)_readyToPlay;
- (BOOL)_isIntentionallyStalled;
- (void)_audioEngineEnqueueCallback:(double)callback firstFramePts:(double)pts displayFramePts:(double)pts;
- (void)_audioEngineOutputCallback:(double)callback framePts:(double)pts;
- (void)_audioEngineErrorCallback:(id)callback;
- (void)_audioDecoderErrorCallback:(id)callback;
- (void)_logAudioPlaybackWarning:(id)warning;
- (void)_handleAudioPlaybackError:(id)error;
- (void)_shouldRestartAudioPlaybackWithError:(id)error firstError:(BOOL)error;
- (void)_updatePlayerInternalMuteState:(BOOL)state;
- (void)_restartAudioPlayback;
- (void)_setupDisplayEngine;
- (void)applicationWillResignActive;
- (void)applicationDidBecomeActive;
- (long long)status;
- (void)invalidate;
- (void)debug_simulatePlaybackInteruptionWithError:(id)error;
- (id)playerStateDebugInfo;
- (id)_strForMuteReason:(int)reason;
- (BOOL)_isAudioABREnabled;
- (void)_manageStallStateWithStallPauseReason:(int)reason;
- (void)_unstallVideoPlayback:(int)playback;
- (void)_stallVideoPlaybackWithStallPauseReason:(int)reason;
- (void)_audioStallOnlyExperiment:(struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })experiment stallPauseReason:(int)reason;
- (void)_startVideoStallingWithStallResult:(struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; })result stallPauseReason:(int)reason;
- (void)_startStallingWithStallResult:(struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; })result stallPauseReason:(int)reason videoStallDuration:(unsigned long long)duration;
- (void)_initiateStallWithStallResult:(struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; })result stallPauseReason:(int)reason videoStallDuration:(unsigned long long)duration;
- (BOOL)_shouldStallForAudioStallOnlyWithDecision:(struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })decision;
- (void)_logVideoStallEnded;
- (void)_logAudioStallEnded;
- (void)_logAudioStallBegan;
- (id)callbackQueueForDisplayEngineDelegate;
- (void)displayEngineUpdatedWithError:(id)error;
- (void)displayEngineStartedToDisplayFrameAt:(struct { long long x0; int x1; unsigned int x2; long long x3; })at playerTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (void)_framesDidDisplayWithPts:(double)pts audioDisplayTime:(double)time videoDisplayTime:(double)time;
- (void)_frameLogging:(struct { long long x0; int x1; unsigned int x2; long long x3; })logging frameDisplayPlayerTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (void)_frameDidRenderAt:(struct { long long x0; int x1; unsigned int x2; long long x3; })at playerTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (void)_handleFrameDisplayError:(id)error;
- (id)_updateErrorWithStateInfo:(id)info;
- (void)_updateAVSyncWithSample:(double)sample;
- (void)displayEngineIsReadyForDisplay:(BOOL)display;
- (void)displayEngineDidLayoutSubLayers:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })layers;
- (void)displayEngineDidWarn:(id)warn;
- (void)displayEngineDidDecodeFrameAt:(struct { long long x0; int x1; unsigned int x2; long long x3; })at;
- (BOOL)audioEngineRequestDataToBuffer:(struct AudioQueueBuffer *)buffer timestamp:(struct AudioTimeStamp *)timestamp framePts:(struct  *)pts isFirstPacket:(BOOL *)packet framesToTrim:(unsigned int *)trim inBufferRepresentationId:(id)id outNextRepresentationId:(id *)id asbd:(struct AudioStreamBasicDescription *)asbd audioStreamExtraParameters:(id *)parameters IPFPacketIndex:(int *)index playbackDidStart:(BOOL *)start;
- (struct FNFAudioEngineRequestResult { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; unsigned long long x1; unsigned int x2; id x3; struct AudioStreamPacketDescription * x4; })audioEngineRequestDataWithMaxPacketDescriptionCount:(unsigned int)count maxAudioDataByteCapacity:(unsigned int)capacity;
- (BOOL)audioEngineRequestFrameData:(id *)data frameMetadata:(struct FNFAudioFrameMetadata *)metadata;
- (void)audioEngineDidEnqueueFrameBuffer:(double)buffer firstFramePts:(double)pts displayFramePts:(double)pts;
- (void)audioEngineDidEnqueueFrameWithPts:(double)pts;
- (void)audioEngineDidOutputAtTime:(double)time framePts:(double)pts;
- (void)audioEngineDidOutputAtPlaybackDeltaTime:(double)time framePts:(double)pts;
- (void)audioEngineBufferDidUnderrun;
- (id)_updateAudioErrorWithXHEAACDebugInfo:(id)info;
- (void)audioEngineDidError:(id)error;
- (void)audioEngineDidWarn:(id)warn;
- (void)timeLoadedChanged:(id)changed;
- (void)durationChanged:(struct { long long x0; int x1; unsigned int x2; long long x3; })changed;
- (void)playerItemDidWarn:(id)warn;
- (void)playbackDidDryOut;
- (void)playbackDidUndry;
- (void)playerItemDidFail:(id)fail;
- (void)playerLiveItemDidEnd:(id)end;
- (void)manifestDataFetched:(id)fetched isFirstManifest:(BOOL)manifest;
- (void)playlistUpdatedWithDRMKeyId:(id)id pssh:(id)pssh;
- (void)_playlistStateUpdateWithDRMKeyId:(id)id pssh:(id)pssh;
- (void)avplayerPlayerItemDidFailWithError:(id)error shouldPausePlayback:(BOOL)playback;
- (void)avplayerPlayerItemDidPlayToEnd;
- (void)avplayerPlayerItemDidStall:(BOOL)stall;
- (void)_xheAACResetDebugInfo;
- (void)_xheAACResetProcessingState;
@end

#endif /* FNFSynchronousPlayer_h */
