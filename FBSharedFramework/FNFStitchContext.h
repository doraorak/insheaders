//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFStitchContext_h
#define FNFStitchContext_h
@import Foundation;

@class NSMutableDictionary;
@protocol {FNFStitchVideoClientBandwidthEstimator="_vptr$FNFStitchVideoBandwidthEstimator"^^?"m_estimatorLock"{mutex="__m_"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}}"m_estimator"{WeightedMeanBandwidthEstimator="_vptr$WeightedMeanBandwidthEstimator"^^?"m_window"{deque<facebook::abr::WeightedMeanBandwidthEstimator::Sample, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>>="__map_"{__split_buffer<facebook::abr::WeightedMeanBandwidthEstimator::Sample *, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>>="__first_"^^{Sample}"__begin_"^^{Sample}"__end_"^^{Sample}"__end_cap_"{__compressed_pair<facebook::abr::WeightedMeanBandwidthEstimator::Sample **, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>>="__value_"^^{Sample}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>>="__value_"Q}}"m_fnGetTimePoint"{function<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> ()>="__f_"{__value_func<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> ()>="__buf_"{type="__lx"[24C]}"__f_"^v}}"m_bandwidthEstimate"{BandwidthEstimate="ttfbMs"q"ttfbWeight"q"ttfbStdDev"q"inboundBitrateBitsPerSec"q"inboundBitrateWeight"q"inboundBitrateStdDev"q}"m_isEstimateStale"B"m_recentSmallSamples"i"m_settings"{Settings="windowSizeSeconds"{duration<long long, std::ratio<1>>="__rep_"q}"windowMinSamples"I"sizeThreshBytes"I"alphaBitrate"d"alphaLatency"d"maxNumSmallSamplesIgnored"i"useLowPassFilter"B"lowPassFilterAlphaMultiplier"d}}"m_latest_client_estimate_timestamp"{optional<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>>=""(?="__null_state_"c"__val_"{time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>="__d_"{duration<long long, std::ratio<1, 1000000000>>="__rep_"q}})"__engaged_"B}"m_ss_estimate"{ServerSideEstimate="inboundServerBitrateHighConfidenceBitsPerSec"Q"inboundServerBitrateMeanBitsPerSec"Q"inboundServerBitrateLowConfidenceBitsPerSec"Q"hasServerBwe"B"timestamp"{time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>="__d_"{duration<long long, std::ratio<1, 1000000000>>="__rep_"q}}"settings"{Settings="highConfidenceIntervalConfig"Q"lowConfidenceIntervalConfig"Q"timeToExpireSeconds"{duration<double, std::ratio<1>>="__rep_"d}}}"m_config"{FNFStitchBweConfig="maxNumSmallSamplesIgnored"i"useVideoContextInformation"B"initialCachedBWWeight"i"sizeThreshBytes"i"shouldCacheWifiAndCellBwSeparately"B"serverBweHighConfidenceConfig"q"serverBweLowConfidenceConfig"q"serverBweTimeToExpireSeconds"q"useFixedWeightsInConfCalc"B"bweMode"i"useTasosBwe"B"enableBandwidthEstimatorDynamicInjection"B}}, {atomic<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>>="__a_"{__cxx_atomic_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>, std::__cxx_atomic_base_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>>>="__a_value"A{time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>}}}, {unique_ptr<FNFStitchVideoBandwidthEstimator, std::default_delete<FNFStitchVideoBandwidthEstimator>>="__ptr_"{__compressed_pair<FNFStitchVideoBandwidthEstimator *, std::default_delete<FNFStitchVideoBandwidthEstimator>>="__value_"^{FNFStitchVideoBandwidthEstimator}}};

@interface FNFStitchContext : NSObject {
  /* instance variables */
  struct unique_ptr<FNFStitchVideoBandwidthEstimator, std::default_delete<FNFStitchVideoBandwidthEstimator>> { struct __compressed_pair<FNFStitchVideoBandwidthEstimator *, std::default_delete<FNFStitchVideoBandwidthEstimator>> { struct FNFStitchVideoBandwidthEstimator *__value_; } __ptr_; } m_estimatorPtr;
  struct FNFStitchVideoClientBandwidthEstimator { undefined * *_vptr$FNFStitchVideoBandwidthEstimator; struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } m_estimatorLock; struct WeightedMeanBandwidthEstimator { undefined * *_vptr$WeightedMeanBandwidthEstimator; struct deque<facebook::abr::WeightedMeanBandwidthEstimator::Sample, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>> { struct __split_buffer<facebook::abr::WeightedMeanBandwidthEstimator::Sample *, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>> { struct Sample * *__first_; struct Sample * *__begin_; struct Sample * *__end_; struct __compressed_pair<facebook::abr::WeightedMeanBandwidthEstimator::Sample **, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample *>> { struct Sample * *__value_; } __end_cap_; } __map_; unsigned long long __start_; struct __compressed_pair<unsigned long, std::allocator<facebook::abr::WeightedMeanBandwidthEstimator::Sample>> { unsigned long long __value_; } __size_; } m_window; struct function<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> ()> { struct __value_func<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> ()> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } m_fnGetTimePoint; struct BandwidthEstimate { long long ttfbMs; long long ttfbWeight; long long ttfbStdDev; long long inboundBitrateBitsPerSec; long long inboundBitrateWeight; long long inboundBitrateStdDev; } m_bandwidthEstimate; BOOL m_isEstimateStale; int m_recentSmallSamples; struct Settings { struct duration<long long, std::ratio<1>> { long long __rep_; } windowSizeSeconds; unsigned int windowMinSamples; unsigned int sizeThreshBytes; double alphaBitrate; double alphaLatency; int maxNumSmallSamplesIgnored; BOOL useLowPassFilter; double lowPassFilterAlphaMultiplier; } m_settings; } m_estimator; struct optional<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>> { union { char __null_state_; struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long __rep_; } __d_; } __val_; } x0; BOOL __engaged_; } m_latest_client_estimate_timestamp; struct ServerSideEstimate { unsigned long long inboundServerBitrateHighConfidenceBitsPerSec; unsigned long long inboundServerBitrateMeanBitsPerSec; unsigned long long inboundServerBitrateLowConfidenceBitsPerSec; BOOL hasServerBwe; struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long __rep_; } __d_; } timestamp; struct Settings { unsigned long long highConfidenceIntervalConfig; unsigned long long lowConfidenceIntervalConfig; struct duration<double, std::ratio<1>> { double __rep_; } timeToExpireSeconds; } settings; } m_ss_estimate; struct FNFStitchBweConfig { int maxNumSmallSamplesIgnored; BOOL useVideoContextInformation; int initialCachedBWWeight; int sizeThreshBytes; BOOL shouldCacheWifiAndCellBwSeparately; long long serverBweHighConfidenceConfig; long long serverBweLowConfidenceConfig; long long serverBweTimeToExpireSeconds; BOOL useFixedWeightsInConfCalc; int bweMode; BOOL useTasosBwe; BOOL enableBandwidthEstimatorDynamicInjection; } m_config; } m_estimator;
  struct FNFStitchBweConfig { int maxNumSmallSamplesIgnored; BOOL useVideoContextInformation; int initialCachedBWWeight; int sizeThreshBytes; BOOL shouldCacheWifiAndCellBwSeparately; long long serverBweHighConfidenceConfig; long long serverBweLowConfidenceConfig; long long serverBweTimeToExpireSeconds; BOOL useFixedWeightsInConfCalc; int bweMode; BOOL useTasosBwe; BOOL enableBandwidthEstimatorDynamicInjection; } m_config;
  struct atomic<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>> { struct __cxx_atomic_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>, std::__cxx_atomic_base_impl<std::chrono::time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>>> { atomic  __a_value; struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> x0; } __a_; } _bwCacheLastUpdateTime;
  NSMutableDictionary *_lastSelectedVideoBitrateMap;
  BOOL m_disableInitClientSnapshotFetch;
}

@property (nonatomic) BOOL isUserDataSaverModeEnabled;

/* instance methods */
- (id)init;
- (id)initWithConfig:(const struct FNFStitchBweConfig *)config;
- (id)initWithConfig:(const struct FNFStitchBweConfig *)config andEstimator:(struct unique_ptr<FNFStitchVideoBandwidthEstimator, std::default_delete<FNFStitchVideoBandwidthEstimator>> { struct __compressed_pair<FNFStitchVideoBandwidthEstimator *, std::default_delete<FNFStitchVideoBandwidthEstimator>> { struct FNFStitchVideoBandwidthEstimator * x0; } x0; })estimator;
- (struct FNFStitchVideoBandwidthEstimator *)useVideoDownloadBandwidthEstimator;
- (struct FNFStitchBweConfig *)getStitchConfig;
- (void)storeBandwidthInfoIfNeeded:(const void *)needed fnGetTimePoint:(const void *)point isOnWifi:(BOOL)wifi;
- (void)setLatestVideoBitrateForVideoID:(id)id bandwidth:(double)bandwidth;
- (double)getLatestVideoBitrateForVideoID:(id)id;
- (void)loadBandwidthInfo:(const void *)info isOnWifi:(BOOL)wifi;
- (void)storeUploadBandwidthInfo:(const void *)info fnGetInteger:(const void *)integer bytesUploaded:(long long)uploaded transferTimeS:(double)s isOnWifi:(BOOL)wifi;
- (long long)getUploadBandwidthInfo:(const void *)info isOnWifi:(BOOL)wifi;
@end

#endif /* FNFStitchContext_h */
