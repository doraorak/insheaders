//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCaptureConnectionManager_h
#define FBCaptureConnectionManager_h
@import Foundation;

#include "AVCaptureVideoDataOutputSampleBufferDelegate-Protocol.h"

@class NSLock, NSMutableDictionary;
@protocol FBCaptureConnectionManagerDelegate, OS_dispatch_queue;

@interface FBCaptureConnectionManager : NSObject {
  /* instance variables */
  NSObject<AVCaptureVideoDataOutputSampleBufferDelegate> *_videoDataOutputBufferDelegate;
  NSObject<FBCaptureConnectionManagerDelegate> *_delegate;
  NSObject<OS_dispatch_queue> *_videoBufferQueue;
  NSMutableDictionary *_captureSets;
  struct FBCameraConfiguration { BOOL shouldFrontCameraVideoMirrored; BOOL multitaskingCameraAccessEnabled; long long startingDevicePosition; long long initialFlashMode; NSString *initialSessionPreset; BOOL retainSinglePreviewLayerWhenSwitchCaptureSession; BOOL retainMultiPreviewLayersWhenSwitchCaptureSession; BOOL useSingleCaptureDeviceAsDefaultCameraPosition; unsigned char initialTargetFPS; BOOL audioCaptureIgnoreRTCClientNotification; BOOL automaticallyConfiguresApplicationAudioSession; BOOL canPreConfigureAudioSession; BOOL shouldRemoveInputsAndOutputsWhenStopped; BOOL enableEchoCancellation; BOOL videoBufferTransformEnabled; long long videoStabilizationMode; BOOL setVideoStabilizationModeAfterStart; BOOL subjectAreaChangeMonitoring; float lowLightDetectionThreshold; float lowLightExposureBias; struct FBBracketedCaptureConfiguration { NSArray *exposureValues; undefined *resolverFunction; BOOL enabled; BOOL autoEnhanceEnabled; unsigned long long downsampleWidth; } bracketedCaptureConfiguration; double maxZoomFactor; BOOL ultraWideCameraSupport; BOOL preserveZoomFactorsDuringCameraSession; BOOL keepAudioSessionActiveDuringCameraSession; BOOL markAVWriterInputsAsFinishedWhenRecordingStops; id /* block */ disableARKitCacheBlock; struct CGSize { double width; double height; } preferredWorldTrackingResolution; BOOL planeDetectionEnabled; BOOL produceWorldTrackingFrames; BOOL worldTrackingAlignmentGravity; BOOL lowLightDetectorEnabled; BOOL flashSceneDetectorEnabled; BOOL audioCaptureEnabled; BOOL audioOnlyCapture; NSArray *preferredCaptureDeviceTypes; NSArray *captureDevices; NSArray *multiCaptureDevices; BOOL useLatestCaptureDevices; unsigned int photoPixelFormat; unsigned int initialCaptureVideoDataOutputPixelFormatType; struct FBCaptureAutoExposureConfiguration { BOOL enableAutoExposureOnTrackedObjects; BOOL trackVisibleFaces; BOOL trackVisibleBodies; BOOL trackVisibleCats; BOOL trackVisibleDogs; BOOL trackQRCodes; } autoExposureConfiguration; struct FBCapturePOIDetectorConfiguration { long long detectorType; double executionTimeInterval; double minimumBoundsChange; BOOL drawDebugBounds; } detectorConfiguration; BOOL fbAudioEnabled; NSArray *photoCapturePlugins; BOOL useFBMultiCaptureManager; BOOL enableMultiCapture; struct CGSize { double width; double height; } customizedCapturedPhotoResolution; struct FBPhotoCaptureConfiguration { BOOL stillImageCaptureEnabled; BOOL isFlipFrontCameraOutputEnabled; BOOL stopLivePreviewOnPhotoCapture; BOOL delayImageCaptureWhileAdjustingCamera; BOOL setFlashModeOnPhotoSettingsForSceneMonitoring; unsigned long long setMaxPhotoQualityPrioritization; } photoCaptureConfiguration; BOOL enableSceneDepth; BOOL livePhotoEnabled; BOOL includeTrackingDataInVideoData; struct FBCameraSimulationConfiguration { id /* block */ videoFilePathProvider; id /* block */ imageFilePathProvider; BOOL enableLocalVideoFileInput; BOOL enableLocalVideoFileAudioHandling; BOOL endlessPlaybackEnabled; } cameraSimulationConfiguration; BOOL stereoEnabled; BOOL forceARKit; BOOL pauseResumeOnAsyncSessionQueue; struct FBRecordingConfiguration { id /* block */ depthRecordingHandler; id /* block */ poseRecordingHandler; BOOL shouldCaptureWithRecordingTimestamps; struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumDuration; BOOL useCaptureVideoDataOutputRecommendedVideoSettings; } recordingConfiguration; BOOL enableSetWorldMapForWorldTracking; BOOL enableMETACaptureManagerConvergence; BOOL enableControlPanel; int maxExposureDurationMs; BOOL doNotSetVideoSettings; isARKitAudioDataRequired *videoFormat; BOOL x0; int captureInfoLoggingFrameInterval; BOOL isARFrameRotationDisabled; } _configuration;
  NSLock *_lock;
  BOOL _controlPanelExperimentEnabled;
}

/* instance methods */
- (id)initWithWithConfiguration:(const struct FBCameraConfiguration *)configuration delegate:(id)delegate videoDataOutputSampleBufferDelegate:(id)delegate videoBufferQueue:(id)queue controlPanelExperimentEnabled:(BOOL)enabled;
- (void)dealloc;
- (BOOL)createCaptureSetFromDevice:(id)device doNotSetVideoSettings:(BOOL)settings outError:(id *)error;
- (BOOL)createCaptureSetOnSimulator:(BOOL)simulator;
- (id)setUpVideoOutput:(BOOL)output;
- (id)setUpPhotoCaptureOutput:(id)output;
- (void)updateDefaultVideoOrientationForConnection:(id)connection videoOrientation:(long long)orientation;
- (void)updateConnectionMirrorSettingForConnection:(id)connection frontCameraShouldBeMirrored:(BOOL)mirrored;
- (void)connect:(id)connect toSession:(id)session previewLayer:(id)layer outError:(id *)error;
- (id)connectionIdentifier:(id)identifier;
- (id)connectionIdentifierWithPosition:(long long)position;
- (id)captureDeviceInput:(id)input;
- (id)videoDataOutput:(id)output;
- (id)videoCaptureConnection:(id)connection;
- (id)photoCaptureOutput:(id)output;
- (id)photoCaptureConnection:(id)connection;
- (id)allConnections;
- (void)enableAllVideoConnections:(BOOL)connections;
- (void)enableConnection:(id)connection enable:(BOOL)enable;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)handleSystemPressureStateChanged;
@end

#endif /* FBCaptureConnectionManager_h */
