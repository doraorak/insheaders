//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKHostController_h
#define BKHostController_h
@import Foundation;

#include "BKContext.h"
#include "BKLayoutController.h"
#include "BKModel.h"
#include "BKResolveManager.h"
#include "BKTreeResourcesState.h"
#include "FBCancelable-Protocol.h"

@class NSDictionary, UIView;
@protocol BKHostControllerDelegate, OS_dispatch_queue;

@interface BKHostController : NSObject {
  /* instance variables */
  BKContext *_context;
  BKLayoutController *_layoutController;
  struct RCSizeRange { struct CGSize { double width; double height; } min; struct CGSize { double width; double height; } max; } _constrainingSize;
  struct BKBindResult { BKModel *boundTree; NSDictionary *variables; NSDictionary *dependencies; NSDictionary *expandedVariables; NSDictionary *controllerMutationsModels; NSDictionary *valueDependencies; NSDictionary *animationFrameData; NSDictionary *dataModuleInitialValues; } _bindResult;
  BKModel *_unboundModel;
  NSDictionary *_externalVariablesSnapshot;
  NSDictionary *_dataPropsEntries;
  BKTreeResourcesState *_treeResources;
  NSDictionary *_parseResultUserInfo;
  NSDictionary *_animationFrameData;
  NSObject<OS_dispatch_queue> *_backgroundQueue;
  NSObject<FBCancelable> *_lastRenderCancelable;
  BOOL _enableBackgroundBind;
  BOOL _enableBackgroundLayout;
  BOOL _didComputeLayoutInBackground;
  BOOL _didChangeSizeInBackground;
  UIView *_mountedView;
  BKResolveManager *_resolveManager;
  BOOL _isResolveScheduled;
}

@property (weak, nonatomic) NSObject<BKHostControllerDelegate> *delegate;

/* instance methods */
- (id)initWithBackgroundBind:(BOOL)bind backgroundLayout:(BOOL)layout;
- (struct CGSize { double x0; double x1; })size;
- (void)dealloc;
- (void)unmount;
- (struct Optional<RCLayout> { struct Storage<RCLayout, false, false, true> { BOOL x0; union { char x0; struct RCLayout { id x0; struct CGSize { double x0; double x1; } x1; struct shared_ptr<const std::vector<RCLayoutChild>> { void * x0; struct __shared_weak_count * x1; } x2; id x3; } x1; } x1; } x0; })mountedLayout;
@end

#endif /* BKHostController_h */
