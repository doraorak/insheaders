//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFLoopingAsset_h
#define FNFLoopingAsset_h
@import Foundation;

#include "AVAsynchronousKeyValueLoading-Protocol.h"
#include "FBKVOController.h"
#include "FNFAVAsset-Protocol.h"
#include "FNFAVPlayerItem-Protocol.h"
#include "FNFAsset-Protocol.h"
#include "FNFAssetForPlayer-Protocol.h"
#include "FNFLoopingAssetListener-Protocol.h"

@class AVAudioMix, NSArray, NSString;
@protocol AVAsynchronousKeyValueLoading><FNFAVAsset><FNFAVPlayerItem><FNFAssetForPlayer><FNFInfoForLoopableAsset, FNFAssetEventListener;

@interface FNFLoopingAsset : NSObject<AVAsynchronousKeyValueLoading, FNFAVAsset, FNFAVPlayerItem, FNFAssetForPlayer, FNFAsset> {
  /* instance variables */
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _playbackTime;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _duration;
  BOOL _usingBackup;
  BOOL _validateCMTime;
  BOOL _skipDurationQueryOnError;
  FBKVOController *_observation;
  int _loopCount;
  int _state;
  NSObject<FNFAssetEventListener> *_eventListener;
  BOOL _isSoundMuted;
  BOOL _shouldBufferVideoAsSoonAsPossible;
  BOOL _fixMissingCodecFormat;
  BOOL _enableDashStartPauseCall;
  BOOL _enableUserQualitySelectionWithRepresentationId;
  BOOL _disableBackupAsset;
  NSString *_userSelectedQuality;
  NSObject<FNFLoopingAssetListener> *_loopingAssetListener;
}

@property (retain, nonatomic) NSObject<AVAsynchronousKeyValueLoading><FNFAVAsset><FNFAVPlayerItem><FNFAssetForPlayer><FNFInfoForLoopableAsset> *originalAsset;
@property (retain, nonatomic) NSObject<AVAsynchronousKeyValueLoading><FNFAVAsset><FNFAVPlayerItem><FNFAssetForPlayer><FNFInfoForLoopableAsset> *backupAsset;
@property (readonly, nonatomic) int currentLoopCount;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } videoRealDuration;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) long long status;
@property (readonly, copy, nonatomic) NSArray *loadedTimeRanges;
@property (readonly, nonatomic) BOOL shouldApplyRotationTransform;
@property (copy, nonatomic) AVAudioMix *audioMix;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } maxBufferTime;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } minBufferTime;
@property (readonly, nonatomic) int pauseReason;

/* instance methods */
- (id)initWithAssetBlock:(id /* block */)block disableBackupAsset:(BOOL)asset loopCount:(int)count;
- (id)initWithAssetBlock:(id /* block */)block disableBackupAsset:(BOOL)asset;
- (id)initWithAssetBlock:(id /* block */)block validateCMTime:(BOOL)cmtime skipDurationQueryOnError:(BOOL)error shouldBufferVideoAsSoonAsPossible:(BOOL)possible fixMissingCodecFormat:(BOOL)format enableDashStartPauseCall:(BOOL)call enableUserQualitySelectionWithRepresentationId:(BOOL)id disableBackupAsset:(BOOL)asset loopingAssetListener:(id)listener;
- (void)_handleNotification:(id)notification;
- (void)dealloc;
- (id)activeAsset;
- (void)setPlayerSize:(struct CGSize { double x0; double x1; })size;
- (void)setVideoContentType:(unsigned long long)type;
- (void)asyncLoadAssetWithHandler:(id /* block */)handler onQueue:(id)queue;
- (void)loadValuesAsynchronouslyForKeys:(id)keys completionHandler:(id /* block */)handler;
- (long long)statusOfValueForKey:(id)key error:(id *)error;
- (BOOL)isAudioOnly;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (id)resourceLoader;
- (id)audioCodec;
- (void)cancelLoading;
- (id)accessLog;
- (id)asset;
- (BOOL)isPlaybackBufferFull;
- (BOOL)isPlaybackLikelyToKeepUp;
- (void)asyncLoadAvailableQualitiesWithHandler:(id /* block */)handler onQueue:(id)queue;
- (void)asyncLoadCurrentQualityWithHandler:(id /* block */)handler onQueue:(id)queue;
- (void)asyncLoadAvailableRepresentationsWithHandler:(id /* block */)handler onQueue:(id)queue;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (void)addOutput:(id)output;
- (void)requestTimeLoadedUpdate;
- (void)requestErrorNotificationIfNeeded;
- (struct opaqueCMFormatDescription *)formatDesc;
- (struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })asbd;
- (id)audioStreamExtraParameters;
- (id)projection;
- (id)audioChannelConfiguration;
- (BOOL)containsTrack:(long long)track;
- (unsigned long long)codecFormatForTrack:(long long)track;
- (void)addErrorToLog:(id)log shouldStopPlayback:(BOOL)playback;
- (id)representationId;
- (id)audioRepresentationId;
- (id)mpdAccessibilityDescription;
- (BOOL)mpdContainsAttributeUsingASRCaptions;
- (id)manifestIdentifier;
- (BOOL)isAudioAbrEligible;
- (BOOL)shouldSelectAudioRole:(unsigned char)role language:(id)language;
- (void)selectAudioRole:(unsigned char)role language:(id)language completionHandler:(id /* block */)handler;
- (BOOL)trackHasMoreFrames:(long long)frames;
- (int)chunkCountToPlayForTrack:(long long)track;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })currentFrameMetadataForTrack:(long long)track;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })currentFrameMetadataForTrack:(long long)track forFrame:(struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })frame;
- (int)currentFramesIndexForTrack:(long long)track;
- (BOOL)resetFramesIndexToZeroForTrack:(long long)track;
- (const char *)currentFrameDataForTrack:(long long)track;
- (void)advanceFrameForTrack:(long long)track;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })frameMetadataForTrack:(long long)track atIndex:(int)index;
- (const char *)frameDataForTrack:(long long)track atIndex:(int)index;
- (int)currentAvailableFrameIndexForTrack:(long long)track;
- (void)updatePlaybackTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })shouldPauseForStallingWithNextCheckCallback:(id /* block */)callback stallReason:(int)reason;
- (struct FNFStallDecision { BOOL x0; struct FNFStallResult { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x1; })shouldStallAudio;
- (BOOL)shouldRestartAfterStalling;
- (BOOL)stallingForTrack:(long long)track;
- (BOOL)shouldBufferVideoAsSoonAsPossible;
- (BOOL)seekToPosition:(struct { long long x0; int x1; unsigned int x2; long long x3; })position;
- (BOOL)resetAssetToBeginningIfNeeded;
- (void)playbackPauseRequested:(int)requested;
- (void)playbackStarted;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })timeAfterSeek;
- (struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; })preferredTransform;
- (id)debugDetails;
- (id)qualityLabel;
- (BOOL)decompressedFramebuffer;
- (BOOL)isDurationFinal;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })seekingTime;
- (void)setAssetEventListener:(id)listener;
- (void)setIsSoundMuted:(BOOL)muted;
- (void)setIsWebVTTCaptionShown:(BOOL)shown;
- (BOOL)isProtectedContent;
- (id)loggingContext;
- (void)setUserSelectedQuality:(id)quality;
- (id)hlsAdapter;
- (int)sequenceIndexForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time track:(long long)track;
- (id)drmKeyId;
- (id)drmPssh;
- (double)suggestedPlaybackRate;
- (void)setPlaybackStartTime:(double)time;
- (void)setIsAudioABREnabled:(BOOL)abrenabled;
- (void)setAudioMeterLevel:(double)level;
- (struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })_calculateOffset:(struct FNFFrameMetadata { unsigned int x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; long long x3; struct { long long x0; int x1; unsigned int x2; long long x3; } x4; unsigned int x5; int x6; struct CGAffineTransform { double x0; double x1; double x2; double x3; double x4; double x5; } x7; })offset;
- (void)_loopAssetIfLastVideoFrame;
- (void)_manageLoopingStallsWithPauseReason:(int)reason;
- (void)_loadedTimeRangeChanged:(id)changed;
- (void)_afterLoadingOriginalAsset:(id /* block */)asset keys:(id)keys;
- (void)_didLoadOriginalAssetWithStatus:(long long)status duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration debugDetails:(id)details error:(id)error completionHandler:(id /* block */)handler callbackQueue:(id)queue;
- (void)_loadBackupAsset;
- (BOOL)usingBackUp;
- (int)state;
- (unsigned int)frameRate;
@end

#endif /* FNFLoopingAsset_h */
