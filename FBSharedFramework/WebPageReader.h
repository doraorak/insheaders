//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef WebPageReader_h
#define WebPageReader_h
@import Foundation;

#include "NSURLSessionDataDelegate-Protocol.h"
#include "WAWebPageHeaderTask.h"
#include "WAWebPageImageTask.h"
#include "WAWebPageTask.h"
#include "WebPageMetadata.h"

@class NSMutableSet, NSString, NSURL, NSURLSession;

@interface WebPageReader : NSObject<NSURLSessionDataDelegate> {
  /* instance variables */
  WAWebPageTask *_currentTask;
  WAWebPageHeaderTask *_headerFetchTask;
  WAWebPageImageTask *_imageFetchTask;
  id /* block */ _handler;
  long long _handlerInvocationCount;
  NSURLSession *_session;
  WebPageMetadata *_metadata;
  NSMutableSet *_cancelledURLTaskIdentifiers;
}

@property (readonly, nonatomic) NSURL *webURL;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } preferredImageSize;
@property (readonly, nonatomic) BOOL handlesImageOrGIFURLs;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)initialize;
+ (id)URLRequestWithURL:(id)url timeout:(double)timeout;
+ (id)URLRequestWithURL:(id)url timeout:(double)timeout contentRange:(struct _NSRange { unsigned long long x0; unsigned long long x1; })range;
+ (id)stringFromData:(id)data withSuggestedEncodings:(id)encodings usedEncoding:(out unsigned long long *)encoding failedSuggestedEncodings:(out id *)encodings;
+ (BOOL)stringEncoding:(out unsigned long long *)encoding fromByteOrderMarkingInData:(id)data;
+ (BOOL)imageURLSupported:(id)urlsupported;
+ (id)responseMIMETypeFromContentType:(id)type;
+ (id)processedImageURLForTwitterIfNeeded:(id)needed;
+ (BOOL)isTwitterProfileImageURL:(id)url;

/* instance methods */
- (id)initWithWebURL:(id)url preferredImageSize:(struct CGSize { double x0; double x1; })size context:(id)context;
- (id)initWithWebURL:(id)url preferredImageSize:(struct CGSize { double x0; double x1; })size handlesImageOrGIFURLs:(BOOL)gifurls;
- (void)loadMetadataWithResultHandler:(id /* block */)handler;
- (void)startMetadataRequestUsingContentRange:(BOOL)range;
- (void)handleHtmlData:(id)data;
- (void)parseHTMLData:(id)htmldata requestUrl:(id)url responseUrl:(id)url encoding:(unsigned long long)encoding authoritativeEncoding:(BOOL)encoding;
- (void)processFoundImageTypes:(id)types;
- (void)doneDownloadingHtml;
- (void)completeReadingWithMetadata:(id)metadata;
- (void)retryMetadataFetchWithoutContentRange;
- (void)tryNextImageURLIfPossible;
- (void)fetchImageInMetadata;
- (void)handleImageData:(id)data;
- (void)doneDownloadingImage;
- (void)imageDownloadFinishedWithImage:(id)image highQualityImage:(id)image forMetadata:(id)metadata;
- (void)handleErrorDownloadingImage:(id)image;
- (void)handleNonHTMLResponse:(id)htmlresponse;
- (BOOL)shouldCancelHeaderFetchTaskWithoutHTMLForResponse:(id)response;
- (BOOL)shouldCancelImageFetchTaskContentTooLargeForResponse:(id)response;
- (void)cancel;
- (void)failWithError:(id)error forTask:(id)task;
- (void)cleanUp;
- (void)URLSession:(id)urlsession task:(id)task willPerformHTTPRedirection:(id)httpredirection newRequest:(id)request completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveData:(id)data;
- (void)URLSession:(id)urlsession dataTask:(id)task didReceiveResponse:(id)response completionHandler:(id /* block */)handler;
- (void)URLSession:(id)urlsession task:(id)task didCompleteWithError:(id)error;
- (BOOL)shouldIgnoreResponseForTask:(id)task;
- (id)webPageTaskFromDataTask:(id)task;
@end

#endif /* WebPageReader_h */
