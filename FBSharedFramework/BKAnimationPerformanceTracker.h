//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKAnimationPerformanceTracker_h
#define BKAnimationPerformanceTracker_h
@import Foundation;

@class NSString;
@protocol {unordered_map<NSString *, (anonymous namespace)::AnimationPerfStats, RC::hash<NSString *>, RC::is_equal<NSString *>, std::allocator<std::pair<NSString *const, (anonymous namespace)::AnimationPerfStats>>>="__table_"{__hash_table<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::hash<NSString *>, RC::is_equal<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::is_equal<NSString *>, RC::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::hash<NSString *>, RC::is_equal<NSString *>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::is_equal<NSString *>, RC::hash<NSString *>>>="__value_"f}}};

@interface BKAnimationPerformanceTracker : NSObject {
  /* instance variables */
  NSString *_analyticsModule;
  struct unordered_map<NSString *, (anonymous namespace)::AnimationPerfStats, RC::hash<NSString *>, RC::is_equal<NSString *>, std::allocator<std::pair<NSString *const, (anonymous namespace)::AnimationPerfStats>>> { struct __hash_table<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::hash<NSString *>, RC::is_equal<NSString *>>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::is_equal<NSString *>, RC::hash<NSString *>>, std::allocator<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::hash<NSString *>, RC::is_equal<NSString *>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, (anonymous namespace)::AnimationPerfStats>, RC::is_equal<NSString *>, RC::hash<NSString *>>> { float __value_; } __p3_; } __table_; } _statsByAnimationID;
  long long _displayRefreshRate;
}

/* instance methods */
- (id)initWithAnalyticsModule:(id)module displayRefreshRate:(long long)rate;
- (void)startTrackingAnimationWithIdentifier:(id)identifier duration:(double)duration;
- (void)stopTrackingAnimationWithIdentifier:(id)identifier;
- (long long)nextFrameSequenceNumberForAnimationWithIdentifier:(id)identifier timestamp:(double)timestamp targetTimestamp:(double)timestamp;
- (void)animationWithIdentifier:(id)identifier didRenderFrameWithSequenceNumber:(long long)number;
@end

#endif /* BKAnimationPerformanceTracker_h */
