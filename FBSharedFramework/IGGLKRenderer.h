//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGGLKRenderer_h
#define IGGLKRenderer_h
@import Foundation;

#include "IGGLKFunction.h"
#include "IGGLKProgram.h"
#include "IGGLKSession.h"

@class EAGLContext, NSArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet;
@protocol IGGLKQueueing, {BufferDesc="data"^v"length"Q"storage"i"hint"C"type"C"debugName"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}}, {VertexInputStateDesc="numAttributes"Q"attributes"[24{VertexAttribute="bufferIndex"Q"format"i"offset"Q"name"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"location"i}]"numInputBindings"Q"inputBindings"[128{VertexInputBinding="stride"Q"sampleFunction"i"sampleRate"Q}]}, {map<NSString *, UniformBufferValue, std::less<NSString *>, std::allocator<std::pair<NSString *const, UniformBufferValue>>>="__tree_"{__tree<std::__value_type<NSString *, UniformBufferValue>, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>, std::allocator<std::__value_type<NSString *, UniformBufferValue>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSString *, UniformBufferValue>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>>="__value_"Q}}}, {map<std::string, std::shared_ptr<igl::ITexture>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::ITexture>>>>="__tree_"{__tree<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>>="__value_"Q}}}, {shared_ptr<igl::IBuffer>="__ptr_"^{IBuffer}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::ISamplerState>="__ptr_"^{ISamplerState}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IShaderStages>="__ptr_"^{IShaderStages}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IVertexInputState>="__ptr_"^{IVertexInputState}"__cntrl_"^{__shared_weak_count}};

@interface IGGLKRenderer : NSObject {
  /* instance variables */
  BOOL _isInitialized;
  IGGLKSession *_session;
  NSObject<IGGLKQueueing> *_renderQueue;
  unsigned int _vertexArrayObject;
  unsigned int _elementArrayObject;
  unsigned long long _numVertices;
  NSMutableDictionary *_attributeToInfoDict;
  NSMutableSet *_dirtyAttributes;
  NSMutableDictionary *_uniformToValueDict;
  NSMutableOrderedSet *_textureUniforms;
  BOOL _elementArrayNeedsUpdate;
  BOOL _elementArrayNeedsNewBuffer;
  int _numElements;
  unsigned short * _elements;
  EAGLContext *_drawContext;
  NSArray *_triangles;
  BOOL _attributesNeedUpdate;
  struct map<std::string, std::shared_ptr<igl::ITexture>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::ITexture>>>> { struct __tree<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _vertexTexturesIGL;
  struct map<std::string, std::shared_ptr<igl::ITexture>, std::less<std::string>, std::allocator<std::pair<const std::string, std::shared_ptr<igl::ITexture>>>> { struct __tree<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>, std::allocator<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, std::shared_ptr<igl::ITexture>>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _fragmentTexturesIGL;
  struct shared_ptr<igl::ISamplerState> { struct ISamplerState *__ptr_; struct __shared_weak_count *__cntrl_; } _samplerStateIGL;
  struct shared_ptr<igl::IVertexInputState> { struct IVertexInputState *__ptr_; struct __shared_weak_count *__cntrl_; } _vertexInputStateIGL;
  struct VertexInputStateDesc { unsigned long long numAttributes; Q]})}}}"location"i} x[24{VertexAttribute="bufferIndex"Q"format"i"offset"Q"name"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3] attributes; unsigned long long numInputBindings; struct VertexInputBinding { unsigned long long stride; int sampleFunction; unsigned long long sampleRate; } x[128] inputBindings; } _vertexInputStateDescriptorIGL;
  struct BufferDesc { void *data; unsigned long long length; int storage; unsigned char hint; unsigned char type; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } debugName; } _vertexBufferDescriptorIGL;
  struct shared_ptr<igl::IBuffer> { struct IBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _vertexBufferIGL;
  struct shared_ptr<igl::IBuffer> { struct IBuffer *__ptr_; struct __shared_weak_count *__cntrl_; } _indexBufferIGL;
  struct map<NSString *, UniformBufferValue, std::less<NSString *>, std::allocator<std::pair<NSString *const, UniformBufferValue>>> { struct __tree<std::__value_type<NSString *, UniformBufferValue>, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>, std::allocator<std::__value_type<NSString *, UniformBufferValue>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSString *, UniformBufferValue>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>> { unsigned long long __value_; } __pair3_; } __tree_; } _vertexUniformToBufferDictIGL;
  struct map<NSString *, UniformBufferValue, std::less<NSString *>, std::allocator<std::pair<NSString *const, UniformBufferValue>>> { struct __tree<std::__value_type<NSString *, UniformBufferValue>, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>, std::allocator<std::__value_type<NSString *, UniformBufferValue>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSString *, UniformBufferValue>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<NSString *, std::__value_type<NSString *, UniformBufferValue>, std::less<NSString *>>> { unsigned long long __value_; } __pair3_; } __tree_; } _fragmentUniformToBufferDictIGL;
  struct shared_ptr<igl::IShaderStages> { struct IShaderStages *__ptr_; struct __shared_weak_count *__cntrl_; } _shaderStagesIGL;
  unsigned short * _indexData;
  unsigned long long _indexCount;
  BOOL _encoderIGLNeedsReset;
}

@property (retain, nonatomic) IGGLKProgram *program;
@property (readonly, nonatomic) IGGLKFunction *vertexFunction;
@property (readonly, nonatomic) IGGLKFunction *fragmentFunction;

/* instance methods */
- (void)dealloc;
- (BOOL)_renderPipelineIGLEnabledBlending:(id)blending;
- (void)drawInContext:(id)context;
@end

#endif /* IGGLKRenderer_h */
