//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBARServiceHostInstagram_h
#define FBARServiceHostInstagram_h
@import Foundation;

#include "FBARServiceHostBase.h"
#include "FBARAudioPlatformComponentHost.h"
#include "FBARAudioServiceHosting-Protocol.h"
#include "FBARCaptureEventService.h"
#include "FBARCaptureEventServiceHosting-Protocol.h"
#include "FBARGestureEventService.h"
#include "FBARGestureEventServiceHosting-Protocol.h"
#include "FBARLogger.h"
#include "FBARPlatformAlgorithmServiceHosting-Protocol.h"
#include "FBARServiceHostEffect.h"
#include "FBARSessionRecordingConfiguration.h"

@class NSString;
@protocol FBARAnalyticsLogging, FBARAudioServiceHostingAudioOutput, FBARIGLTextureCreating, FBMPPlatformAlgorithmDataConsumer, IGTapGestureServiceAnnouncer, struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; }, struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> { struct IServiceAnalyticsLogger * x0; struct __shared_weak_count * x1; }, struct shared_ref<arfx::analytics::IEngineAnalyticsLogger> { struct shared_ptr<arfx::analytics::IEngineAnalyticsLogger> { struct IEngineAnalyticsLogger * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<arfx::experiment::IExperimentConfig> { struct shared_ptr<arfx::experiment::IExperimentConfig> { struct IExperimentConfig * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<arfx::servicehost::ServiceHost, struct shared_ref<facebook::cameracore::arclass::ARClassContext> { struct shared_ptr<facebook::cameracore::arclass::ARClassContext> { struct ARClassContext * x0; struct __shared_weak_count * x1; } x0; }, struct shared_ref<msqrd::plugins::BasePluginConfiguration, {shared_ptr<facebook::arservices::apple::GestureEventServiceCreator>="__ptr_"^{GestureEventServiceCreator}"__cntrl_"^{__shared_weak_count}};

@interface FBARServiceHostInstagram : FBARServiceHostBase<FBARAudioServiceHosting, FBARGestureEventServiceHosting, FBARCaptureEventServiceHosting, FBARPlatformAlgorithmServiceHosting> {
  /* instance variables */
  struct shared_ptr<facebook::arservices::apple::GestureEventServiceCreator> { struct GestureEventServiceCreator *__ptr_; struct __shared_weak_count *__cntrl_; } _gestureEventServiceCreator;
  BOOL _isRecording;
  BOOL _disableAudioSampleBufferProcessing;
  NSObject<IGTapGestureServiceAnnouncer> *_instagramTapGestureServiceAnnouncer;
}

@property (retain, nonatomic) FBARAudioPlatformComponentHost *audioPlatformComponentHost;
@property BOOL muteState;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<FBARAudioServiceHostingAudioOutput> *audioOutput;
@property (readonly, nonatomic) FBARLogger *logger;
@property (readonly, nonatomic) NSObject<FBARAnalyticsLogging> *analyticsLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::servicehost::ServiceHost> engineServiceHost;
@property (nonatomic) unsigned char optimizationMode;
@property (readonly, nonatomic) struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase * x0; struct __shared_weak_count * x1; } performanceLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::analytics::IEngineAnalyticsLogger> { struct shared_ptr<arfx::analytics::IEngineAnalyticsLogger> { struct IEngineAnalyticsLogger * x0; struct __shared_weak_count * x1; } x0; } engineAnalyticsLogger;
@property (readonly, nonatomic) struct shared_ref<arfx::experiment::IExperimentConfig> { struct shared_ptr<arfx::experiment::IExperimentConfig> { struct IExperimentConfig * x0; struct __shared_weak_count * x1; } x0; } experimentConfig;
@property (readonly, nonatomic) struct shared_ref<facebook::cameracore::arclass::ARClassContext> { struct shared_ptr<facebook::cameracore::arclass::ARClassContext> { struct ARClassContext * x0; struct __shared_weak_count * x1; } x0; } ARClassContext;
@property (readonly, nonatomic) struct shared_ref<msqrd::plugins::BasePluginConfiguration> pluginConfig;
@property (readonly, nonatomic) struct shared_ptr<msqrd::services::IServiceAnalyticsLogger> { struct IServiceAnalyticsLogger * x0; struct __shared_weak_count * x1; } serviceAnalyticsLogger;
@property (readonly, nonatomic) FBARSessionRecordingConfiguration *sessionRecordingConfiguration;
@property (readonly, nonatomic) FBARServiceHostEffect *currentEffect;
@property (readonly, nonatomic) NSObject<FBARIGLTextureCreating> *currentIGLTextureCreator;
@property (readonly, nonatomic) FBARGestureEventService *gestureEventService;
@property (readonly, nonatomic) FBARCaptureEventService *captureEventService;
@property (readonly, nonatomic) NSObject<FBMPPlatformAlgorithmDataConsumer> *platformAlgorithmDataInput;

/* class methods */
+ (struct unique_ptr<msqrd::plugins::BasePluginConfiguration, std::default_delete<msqrd::plugins::BasePluginConfiguration>> { struct __compressed_pair<msqrd::plugins::BasePluginConfiguration *, std::default_delete<msqrd::plugins::BasePluginConfiguration>> { struct BasePluginConfiguration * x0; } x0; })newPluginConfig;

/* instance methods */
- (struct ServiceCreatorRegistry { struct shared_ptr<arfx::servicehost::BufferUpdatableServiceCreator<msqrd::dataprovider::IFaceTrackingDataProvider>> { void * x0; struct __shared_weak_count * x1; } x0; struct unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct __hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>> { float x0; } x3; } x0; } x1; })newServiceCreatorRegistry;
- (struct shared_ref<arfx::servicehost::EffectController> { struct shared_ptr<arfx::servicehost::EffectController> { struct EffectController * x0; struct __shared_weak_count * x1; } x0; })prepareServicesForEffect:(id)effect;
- (void)didFinishRenderingFrame;
- (void)notifyServicesThatPermissionsAreReadyForEffectWithManifest:(const void *)manifest;
- (void)setMuted:(BOOL)muted;
- (void)audioRecordingDidStart;
- (void)audioRecordingDidStop;
- (void)audioService:(id)service didRenderAudioSampleBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (BOOL)needAudioSampleBufferProcessing;
- (void)updateAudioServiceWithAudioSampleBuffer:(struct opaqueCMSampleBuffer *)buffer volumeLevel:(float)level;
- (struct DocumentServiceCreatorRegistry { struct unordered_map<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>, std::allocator<std::pair<const arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct __hash_table<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>, std::allocator<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::hash<arfx::services::ServiceType>, std::equal_to<arfx::services::ServiceType>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<arfx::services::ServiceType, std::__hash_value_type<arfx::services::ServiceType, arfx::shared_ref<arfx::servicehost::ARServiceCreator>>, std::equal_to<arfx::services::ServiceType>, std::hash<arfx::services::ServiceType>>> { float x0; } x3; } x0; } x0; })documentServiceCreators;
@end

#endif /* FBARServiceHostInstagram_h */
