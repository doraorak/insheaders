//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGBadgeLoggingContext_h
#define IGBadgeLoggingContext_h
@import Foundation;

@class NSNumber;
@protocol struct optional<StructuredLogger::BadgingcategorydataType> { union { char x0; struct BadgingcategorydataType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<std::unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>> { union { char x0; struct unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct __hash_table<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x1; } x1; } x0; BOOL x1; }, {optional<StructuredLogger::BadgingcategorydataType>=""(?="__null_state_"c"__val_"{BadgingcategorydataType="badgeCount"{optional<long long>=""(?="__null_state_"c"__val_"q)"__engaged_"B}"categoryValues"{optional<std::unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>=""(?="__null_state_"c"__val_"{unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>>="__table_"{__hash_table<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}})"__engaged_"B}})"__engaged_"B};

@interface IGBadgeLoggingContext : NSObject

@property (readonly, nonatomic) int position;
@property (readonly, nonatomic) int useCase;
@property (readonly, nonatomic) NSNumber *badgeValue;
@property (readonly, nonatomic) int displayStyle;
@property (readonly, nonatomic) struct optional<StructuredLogger::BadgingcategorydataType> { union { char x0; struct BadgingcategorydataType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<std::unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>> { union { char x0; struct unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct __hash_table<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x1; } x1; } x0; BOOL x1; } badgeCategoryData;

/* instance methods */
- (id)initWithPosition:(int)position useCase:(int)case badgeValue:(id)value displayStyle:(int)style badgeCategoryData:(struct optional<StructuredLogger::BadgingcategorydataType> { union { char x0; struct BadgingcategorydataType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<std::unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>> { union { char x0; struct unordered_map<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct __hash_table<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, StructuredLogger::BadgingcategorydataCategoryValuesType>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x1; } x1; } x0; BOOL x1; })data;
@end

#endif /* IGBadgeLoggingContext_h */
