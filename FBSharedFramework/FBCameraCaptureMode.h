//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCameraCaptureMode_h
#define FBCameraCaptureMode_h
@import Foundation;

#include "FBARCameraCapabilitiesProviding-Protocol.h"
#include "FBARCameraSLAMControllerProviding-Protocol.h"
#include "FBCameraCaptureModeRecordingEventAnnouncer.h"
#include "FBCaptureCameraController-Protocol.h"
#include "FBCaptureDevice.h"
#include "FBCaptureModeCoordinating-Protocol.h"
#include "FBCaptureModeMountingDescriptor.h"
#include "FBCapturePerformanceTrackerController-Protocol.h"
#include "FBCapturePreviewProviding-Protocol.h"
#include "FBFramePerformanceTracker.h"
#include "FBMPCameraUserInterfaceOutput.h"
#include "FBMPPhotoCapturer.h"
#include "FBMPPreviewOutput.h"
#include "FBOrientationTracking-Protocol.h"

@class AVCaptureDevice, AVCapturePhotoOutput, NSDictionary, NSString, NSURL;
@protocol FBARCameraSLAMControlling, FBCCAudioPipelineProviding, FBCCPerformanceLogger, FBCameraCaptureManaging, FBCameraWaterfallLogging><FBCaptureSessionWaterfallLogging><FBCCMediaEventWaterfallLogging, FBMPVideoRecorderProtocol, OS_dispatch_queue;

@interface FBCameraCaptureMode : NSObject<FBARCameraCapabilitiesProviding, FBARCameraSLAMControllerProviding, FBCaptureCameraController, FBCapturePerformanceTrackerController, FBCapturePreviewProviding> {
  /* instance variables */
  NSObject<FBCaptureModeCoordinating> *_coordinating;
  NSObject<OS_dispatch_queue> *_captureManagerActionsQueue;
  FBFramePerformanceTracker *_framePerformanceTracker;
  FBFramePerformanceTracker *_framePerformanceTrackerForWaterfall;
  NSObject<FBCameraWaterfallLogging><FBCaptureSessionWaterfallLogging><FBCCMediaEventWaterfallLogging> *_waterfallLogger;
  NSObject<FBCCPerformanceLogger> *_performanceLogger;
  NSObject<FBMPVideoRecorderProtocol> *_videoRecorder;
  FBCameraCaptureModeRecordingEventAnnouncer *_recordingEventAnnouncer;
  FBMPPhotoCapturer *_photoCapturer;
  FBMPCameraUserInterfaceOutput *_userInterfaceOutput;
  NSObject<FBOrientationTracking> *_orientationTracker;
  BOOL _trackingOrientation;
  NSURL *_directoryPathForVideoStorage;
  struct FBCaptureCoordinatorConfiguration { struct FBCameraConfiguration { BOOL shouldFrontCameraVideoMirrored; BOOL multitaskingCameraAccessEnabled; long long startingDevicePosition; long long initialFlashMode; NSString *initialSessionPreset; BOOL retainSinglePreviewLayerWhenSwitchCaptureSession; BOOL retainMultiPreviewLayersWhenSwitchCaptureSession; BOOL useSingleCaptureDeviceAsDefaultCameraPosition; unsigned char initialTargetFPS; BOOL audioCaptureIgnoreRTCClientNotification; BOOL automaticallyConfiguresApplicationAudioSession; BOOL canPreConfigureAudioSession; BOOL shouldRemoveInputsAndOutputsWhenStopped; BOOL enableEchoCancellation; BOOL videoBufferTransformEnabled; long long videoStabilizationMode; BOOL setVideoStabilizationModeAfterStart; BOOL subjectAreaChangeMonitoring; float lowLightDetectionThreshold; float lowLightExposureBias; struct FBBracketedCaptureConfiguration { NSArray *exposureValues; undefined *resolverFunction; BOOL enabled; BOOL autoEnhanceEnabled; unsigned long long downsampleWidth; } bracketedCaptureConfiguration; double maxZoomFactor; BOOL ultraWideCameraSupport; BOOL preserveZoomFactorsDuringCameraSession; BOOL keepAudioSessionActiveDuringCameraSession; BOOL markAVWriterInputsAsFinishedWhenRecordingStops; id /* block */ disableARKitCacheBlock; struct CGSize { double width; double height; } preferredWorldTrackingResolution; BOOL planeDetectionEnabled; BOOL produceWorldTrackingFrames; BOOL worldTrackingAlignmentGravity; BOOL lowLightDetectorEnabled; BOOL flashSceneDetectorEnabled; BOOL audioCaptureEnabled; BOOL audioOnlyCapture; NSArray *preferredCaptureDeviceTypes; NSArray *captureDevices; NSArray *multiCaptureDevices; BOOL useLatestCaptureDevices; unsigned int photoPixelFormat; unsigned int initialCaptureVideoDataOutputPixelFormatType; struct FBCaptureAutoExposureConfiguration { BOOL enableAutoExposureOnTrackedObjects; BOOL trackVisibleFaces; BOOL trackVisibleBodies; BOOL trackVisibleCats; BOOL trackVisibleDogs; BOOL trackQRCodes; } autoExposureConfiguration; struct FBCapturePOIDetectorConfiguration { long long detectorType; double executionTimeInterval; double minimumBoundsChange; BOOL drawDebugBounds; } detectorConfiguration; BOOL fbAudioEnabled; NSArray *photoCapturePlugins; BOOL useFBMultiCaptureManager; BOOL enableMultiCapture; struct CGSize { double width; double height; } customizedCapturedPhotoResolution; struct FBPhotoCaptureConfiguration { BOOL stillImageCaptureEnabled; BOOL isFlipFrontCameraOutputEnabled; BOOL stopLivePreviewOnPhotoCapture; BOOL delayImageCaptureWhileAdjustingCamera; BOOL setFlashModeOnPhotoSettingsForSceneMonitoring; unsigned long long setMaxPhotoQualityPrioritization; } photoCaptureConfiguration; BOOL enableSceneDepth; BOOL livePhotoEnabled; BOOL includeTrackingDataInVideoData; struct FBCameraSimulationConfiguration { id /* block */ videoFilePathProvider; id /* block */ imageFilePathProvider; BOOL enableLocalVideoFileInput; BOOL enableLocalVideoFileAudioHandling; BOOL endlessPlaybackEnabled; } cameraSimulationConfiguration; BOOL stereoEnabled; BOOL forceARKit; BOOL pauseResumeOnAsyncSessionQueue; struct FBRecordingConfiguration { id /* block */ depthRecordingHandler; id /* block */ poseRecordingHandler; BOOL shouldCaptureWithRecordingTimestamps; struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumDuration; BOOL useCaptureVideoDataOutputRecommendedVideoSettings; } recordingConfiguration; BOOL enableSetWorldMapForWorldTracking; BOOL enableMETACaptureManagerConvergence; BOOL enableControlPanel; int maxExposureDurationMs; BOOL doNotSetVideoSettings; isARKitAudioDataRequired *videoFormat; BOOL x0; int captureInfoLoggingFrameInterval; BOOL isARFrameRotationDisabled; } cameraConfiguration; struct FBRendererConfiguration { BOOL skipRenderingUntilAllFiltersPrepared; BOOL flushTextureCacheOnEveryFrame; BOOL multipleOutputsEnabled; BOOL overlayOutputEnabled; BOOL batchPostConnectionOperations; BOOL iglSurfaceEnabled; BOOL iglImageFilterEnabled; BOOL iglImageOverlayFilterEnabled; BOOL iglDoodleDrawingFilterEnabled; int renderingType; BOOL cropAspectFitUsingPreviewAspectRatio; BOOL alwaysCropAspectFitUsingPreviewAspectRatio; BOOL output16Bit; BOOL copiesServiceHostOnExport; } rendererConfiguration; struct FBPreviewConfiguration { BOOL isInitialPreviewModeAVCaptureVideoPreviewLayer; NSString *contentsGravity; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } previewCropRect; BOOL disableDefaultPreview; BOOL enableFlushingOnAVSampleBufferDisplayLayer; } previewConfiguration; struct FBGestureConfiguration { BOOL failGatingForConsumedTapGestureData; } gestureConfiguration; unsigned long long requiredCameraCapabilities; unsigned long long imageResolutionSetting; double videoBitratePerPixel; BOOL optimizePreviewForScreen; BOOL warmupARKit; BOOL enableHDRVideoRecordingIfPossible; BOOL disableCameraPreviewViewAspectRatioMatching; BOOL isPhotoCapturePostProcessingOnSeparateQueue; struct CGSize { double width; double height; } recordingVideoSize; BOOL useCaptureManagerFixForIsRunningCheck; BOOL multitaskingCameraAccessEnabled; } _configuration;
  NSObject<OS_dispatch_queue> *_imageProcessingQueue;
  FBMPPreviewOutput *_cameraPreviewOutput;
  BOOL _multiVideoRecordingEnabled;
}

@property (readonly, nonatomic) NSObject<FBCCAudioPipelineProviding> *audioPipelineProvider;
@property (readonly, nonatomic) NSObject<FBCameraCaptureManaging> *captureManager;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) unsigned long long supportedCameraCapabilities;
@property (readonly, nonatomic) NSObject<FBARCameraSLAMControlling> *cameraSLAMController;
@property (readonly, nonatomic) struct { float x0; float x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; struct { long long x0; int x1; unsigned int x2; long long x3; } x3; float x4; float x5; } validExposureValues;
@property (readonly, nonatomic) double maxZoomFactor;
@property (readonly, nonatomic) BOOL isVideoHDREnabled;
@property (readonly, nonatomic) FBCaptureDevice *currentDevice;
@property (readonly, nonatomic) AVCaptureDevice *currentSystemCaptureDevice;
@property (readonly, nonatomic) AVCapturePhotoOutput *currentCapturePhotoOutput;
@property (readonly, nonatomic) struct { float x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; long long x2; float x3; float x4; } exposureInfo;
@property (readonly, nonatomic) struct OpaqueCMClock * captureSessionClock;
@property (readonly, nonatomic) NSDictionary *recommendedVideoSettingsForAssetWriter;
@property (readonly, nonatomic) BOOL adjustingCameraSettings;
@property (readonly, nonatomic) FBCaptureModeMountingDescriptor *mountingDescriptor;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } videoRecordingDuration;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } firstRecordedVideoFrameSourceTime;

/* instance methods */
- (id)initWithConfiguration:(const struct FBCaptureCoordinatorConfiguration *)configuration captureManagerProvider:(id)provider orientationTracker:(id)tracker captureCoordinatorLogger:(id)logger directoryPathForVideoStorage:(id)storage systemAudioCaptureSessionInteractor:(id)interactor audioPipelineProviding:(id)providing depthDataManager:(id)manager;
- (void)dealloc;
- (void)startMicrophone:(BOOL)microphone;
- (void)stopMicrophone;
- (id)videoInput;
- (id)audioInput;
- (id)sessionID;
- (void)didMountWithCoordinatingProvider:(id)provider;
- (void)willUnmount;
- (void)filterTopologyDidChange;
- (void)captureManagerPreviewDidLoad;
- (void)captureManagerHasFinishedLoadingAudioSession;
- (void)captureManagerDidFailToLoadAudioSessionWithError:(id)error;
- (void)captureManagerHasFinishedLoadingCaptureSession;
- (void)captureManagerHasEndedCaptureSession;
- (void)captureManagerDidBecomeInterruptedWithReason:(unsigned char)reason sessionType:(unsigned long long)type;
- (void)captureManagerDidResignInterruptedSessionType:(unsigned long long)type;
- (void)captureManagerDidEncounterRuntimeError:(id)error willRetry:(BOOL)retry sessionType:(unsigned long long)type;
- (void)captureManagerDidReceiveFirstVideoFrameFromCaptureSessionAtTime:(double)time;
- (void)captureManagerUpdatedPreviousCaptureDevice:(id)device toCurrentCaptureDevice:(id)device;
- (void)captureManagerWillStartRunningSessionType:(unsigned long long)type;
- (void)captureManagerDidStartRunningSessionType:(unsigned long long)type;
- (void)captureManagerWillStopCaptureSessionType:(unsigned long long)type;
- (void)captureManagerDidStopRunningSessionType:(unsigned long long)type;
- (void)captureManagerSystemPressureLevelDidChange:(id)change;
- (void)captureManagerReactionEffectTriggered:(id)triggered;
- (double)supportedZoomFactorFromZoomFactor:(double)factor;
- (BOOL)isZoomFactorSupported:(double)supported;
- (BOOL)isTorchModeSupported:(long long)supported;
- (BOOL)isFocusModeSupported:(long long)supported;
- (BOOL)isExposureModeSupported:(long long)supported;
- (BOOL)canUpdateCaptureDevicePosition:(long long)position;
- (BOOL)currentDeviceSupportsCaptureSessionPreset:(id)preset;
- (BOOL)supportsCaptureSessionPreset:(id)preset cameraPosition:(long long)position;
- (BOOL)isAdjustingCameraSettings;
- (void)fetchVideoFieldOfViewWithCompletion:(id /* block */)completion;
- (void)performCameraAction:(id)action;
- (void)performCameraAction:(id)action completionQueue:(id)queue completion:(id /* block */)completion;
- (void)addCaptureManagerListener:(id)listener;
- (void)removeCaptureManagerListener:(id)listener;
- (void)addCapturePOIDetectorListener:(id)listener;
- (void)removeCapturePOIDetectorListener:(id)listener;
- (void)setPhotoOutputListener:(id)listener;
- (void)addRecordingEventListener:(id)listener;
- (void)removeRecordingEventListener:(id)listener;
- (id)preview;
- (id)cameraPreview;
- (id)previewOutput;
- (id)framePerformanceResultDisplayer;
- (id)filterPerformanceExtras;
- (void)startSessionWithCompletion:(id /* block */)completion;
- (void)requestNextFrameDidRenderToPreviewCallback:(id /* block */)callback onQueue:(id)queue;
- (void)stopSessionWithCompletion:(id /* block */)completion;
- (BOOL)isRunning;
- (void)startAudioCaptureWithEchoCancellation:(BOOL)cancellation completion:(id /* block */)completion;
- (void)updatePreviewOrientation;
- (void)captureImageWithCallbackQueue:(id)queue completion:(id /* block */)completion;
- (void)captureMultiImagesWithCallbackQueue:(id)queue captureDevices:(id)devices completion:(id /* block */)completion;
- (id)photoCapturer;
- (void)warmupAudioSession;
- (id)capturePreview;
- (void)prepareRecording;
- (void)startRecordingWithCompletion:(id /* block */)completion enableEchoCancellation:(BOOL)cancellation;
- (void)cancelRecordingIfAny;
- (void)stopRecordingWithCompletion:(id /* block */)completion callbackQueue:(id)queue;
- (void)stopMultiVideoRecordingWithCompletion:(id /* block */)completion callbackQueue:(id)queue;
- (void)previewDidFinishRenderingUserFrame:(id)frame;
- (void)videoRecorderDidFinishRecordingWithMaximumDurationWithAsset:(id)asset;
- (id)_capturePhotoPerfParamsWithEffect:(BOOL)effect image:(id)image;
@end

#endif /* FBCameraCaptureMode_h */
