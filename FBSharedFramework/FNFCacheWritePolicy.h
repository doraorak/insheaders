//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFCacheWritePolicy_h
#define FNFCacheWritePolicy_h
@import Foundation;

@protocol {map<std::string, FNFCacheWriteRule, std::less<std::string>, std::allocator<std::pair<const std::string, FNFCacheWriteRule>>>="__tree_"{__tree<std::__value_type<std::string, FNFCacheWriteRule>, std::__map_value_compare<std::string, std::__value_type<std::string, FNFCacheWriteRule>, std::less<std::string>>, std::allocator<std::__value_type<std::string, FNFCacheWriteRule>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, FNFCacheWriteRule>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, FNFCacheWriteRule>, std::less<std::string>>>="__value_"Q}}}, {vector<FNFCacheWriteRule, std::allocator<FNFCacheWriteRule>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<FNFCacheWriteRule *, std::allocator<FNFCacheWriteRule>>="__value_"^{?}}};

@interface FNFCacheWritePolicy : NSObject {
  /* instance variables */
  struct vector<FNFCacheWriteRule, std::allocator<FNFCacheWriteRule>> { struct  *__begin_; struct  *__end_; struct __compressed_pair<FNFCacheWriteRule *, std::allocator<FNFCacheWriteRule>> { struct  *__value_; } __end_cap_; } _rules;
  struct map<std::string, FNFCacheWriteRule, std::less<std::string>, std::allocator<std::pair<const std::string, FNFCacheWriteRule>>> { struct __tree<std::__value_type<std::string, FNFCacheWriteRule>, std::__map_value_compare<std::string, std::__value_type<std::string, FNFCacheWriteRule>, std::less<std::string>>, std::allocator<std::__value_type<std::string, FNFCacheWriteRule>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<std::string, FNFCacheWriteRule>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<std::string, std::__value_type<std::string, FNFCacheWriteRule>, std::less<std::string>>> { unsigned long long __value_; } __pair3_; } __tree_; } _playbackTimeRuleByModule;
}

/* instance methods */
- (void)addRule:(struct { BOOL x0; double x1; BOOL x2; BOOL x3; })rule;
- (void)addRule:(struct { BOOL x0; double x1; BOOL x2; BOOL x3; })rule forModule:(id)module;
- (BOOL)checkWritingDiskWithPlaybackTimeSeconds:(double)seconds;
- (BOOL)checkWritingDiskWithPlaybackTimeSeconds:(double)seconds forModule:(id)module;
- (BOOL)checkWritingDiskIfNotSkipped;
- (BOOL)checkWritingDiskWithAnalyticsTags:(id)tags;
- (BOOL)checkWritingDiskWithFlattenAnalyticsTags:(id)tags;
- (BOOL)shouldWriteDiskOnClosingMemoryStreamWithAnalyticsTags:(id)tags;
- (BOOL)_hasCustomPlaybackTimeRuleForModule:(id)module;
@end

#endif /* FNFCacheWritePolicy_h */
