//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBImagePerfQPLComponentLogger_h
#define FBImagePerfQPLComponentLogger_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString;
@protocol FBImagePerfRecording, {Optional<bool>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"B)"hasValue"B}}, {Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}, {Optional<long long>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"q)"hasValue"B}};

@interface FBImagePerfQPLComponentLogger : NSObject<NSObject> {
  /* instance variables */
  unsigned long long _eventFlags;
  unsigned long long _renderCount;
  int _markerId;
  struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } _instanceKey;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _viewAppearTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _viewDisappearTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _fullRenderTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _partialRenderTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _imageRenderedFailedTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _imageRequestedTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _blurredPreviewImageRenderTime;
  struct Optional<long long> { struct StorageTriviallyDestructible { union { char emptyState; long long value; } x0; BOOL hasValue; } storage_; } _eventStartTime;
  NSString *_rootProductName;
  NSString *_rootSurfaceName;
  NSMutableDictionary *_annotations;
  NSMutableArray *_points;
  NSMutableDictionary *_pointCounters;
  NSArray *_contextChain;
  NSDictionary *_extraData;
  struct Optional<bool> { struct StorageTriviallyDestructible { union { char emptyState; BOOL value; } x0; BOOL hasValue; } storage_; } _isMarkerOnAndSampled;
  struct Optional<bool> { struct StorageTriviallyDestructible { union { char emptyState; BOOL value; } x0; BOOL hasValue; } storage_; } _isInsideLoomTrace;
  struct _FBImagePerfQPLComponentLoggerConfiguration { BOOL shouldLogGlobalEstimatedBandwidth; BOOL shouldLogImagesEstimatedBandwidth; } _experimentConfiguration;
  NSString *_normalizedURL;
  BOOL _isFirstEvent;
  undefined * _normalizedUrlBuilder;
  NSObject<FBImagePerfRecording> *_imagePerfRecorder;
  NSString *_requestURL;
  NSString *_imageId;
  BOOL _isDuplicateLogger;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithContextChain:(id)chain rootProductName:(id)name rootSurfaceName:(id)name markerId:(int)id configuration:(const void *)configuration normalizedUrlBuilder:(undefined *)builder imagePerfRecorder:(id)recorder extraData:(id)data;
- (void)dealloc;
- (void)componentDidChangeAttribution:(id)attribution;
- (void)componentDidSetBlurredPreviewImageAtTime:(double)time;
- (void)componentLogAdditionalInformation:(id)information;
- (void)componentLogPoints:(id)points;
- (void)componentEnteredVisibleRangeWithViewInfo:(id)info atTime:(double)time;
- (void)componentWillStartImageRequest:(id)request atTime:(double)time;
- (void)componentDidSetImage:(id)image atTime:(double)time;
- (void)componentDidChangeSize:(struct CGSize { double x0; double x1; })size;
- (void)componentDidFailLoadingImageWithError:(id)error atTime:(double)time;
- (void)componentExitedVisibleRangeAtTime:(double)time;
- (void)componentDidAnnounceImageRenderForPrerenderedImage:(id)image atTime:(double)time;
@end

#endif /* FBImagePerfQPLComponentLogger_h */
