//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FXAccountCache_h
#define FXAccountCache_h
@import Foundation;

#include "FXAccountCacheHelper-Protocol.h"

@class NSArray, NSDate, NSString;
@protocol FXAccessControlConfig;

@interface FXAccountCache : NSObject {
  /* instance variables */
  const struct FBPreMainStartupTimeDetails * _preMainStartupDetails;
  NSObject<FXAccountCacheHelper> *_helper;
  NSObject<FXAccessControlConfig> *_aclConfig;
  NSArray *_linkedAccounts_UseOnlyWithMutex;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _linkedAccountsAndBadgingAndDataSourceDataMutex;
  NSArray *_badgeAccountsData_UseOnlyWithMutex;
  BOOL _shouldUseOmnistore;
  BOOL _shouldUseAICQuery;
  NSDate *_timestamp;
  NSDate *_timestampBadge;
  unsigned long long _status;
  NSDate *_timestampOmnistore;
  BOOL _msysReadyStatus;
  BOOL _isPage;
  BOOL _didBadgeFetchComplete;
  NSString *_cacheDataSource_UseOnlyWithMutex;
}

/* instance methods */
- (id)initWithHelper:(id)helper;
- (id)_getLinkedAccounts;
- (id)_getLinkedBadgeAccountsData;
- (void)_copyLinkedAccountsFromOmnistoreIntoMemory;
- (void)setUpOmnistoreListener;
- (void)_updateAndLogLinkedAccountsAccess:(id)access fromClass:(id)class isSwitcherUseCaseForBadging:(BOOL)badging;
- (BOOL)_shouldAllowCalleName:(id)name fromClass:(id)class;
- (id)getLinkedAccountsWithCallerName:(id)name fromClass:(id)class isSwitcherUseCaseForBadging:(BOOL)badging;
- (id)getLinkedAccountsWithCallerName:(id)name fromClass:(id)class;
- (id)getLinkedAccountsWithAccountType:(id)type withCallerName:(id)name fromClass:(id)class;
- (BOOL)hasLinkedToAccount:(id)account;
- (void)fetchInfoFromServerWithCallerName:(id)name fromClass:(id)class WithSuccessBlock:(id /* block */)block failureBlock:(id /* block */)block graphqlQuerySelector:(long long)selector onDemandBeforeMsysReady:(BOOL)ready;
- (void)_fetchInfoFromServerWithCallerName:(id)name fromClass:(id)class WithSuccessBlock:(id /* block */)block failureBlock:(id /* block */)block graphqlQuerySelector:(long long)selector onDemandBeforeMsysReady:(BOOL)ready shouldForceRefreshBadge:(BOOL)badge;
- (void)fetchInfoFromServerWithCallerName:(id)name fromClass:(id)class WithSuccessBlock:(id /* block */)block failureBlock:(id /* block */)block onDemandBeforeMsysReady:(BOOL)ready;
- (void)fetchInfoFromServerWithCallerName:(id)name fromClass:(id)class WithSuccessBlock:(id /* block */)block failureBlock:(id /* block */)block;
- (void)fetchInfoFromServerWithCallerName:(id)name fromClass:(id)class WithSuccessBlock:(id /* block */)block failureBlock:(id /* block */)block shouldForceRefreshBadge:(BOOL)badge;
- (void)cacheLinkedAccounts_INTERNAL_ONLY:(id)only withCallerName:(id)name fromClass:(id)class dataSource:(id)source;
- (BOOL)msysReadComplete;
- (void)_populateCacheFromDataOnDisk;
- (float)_getTimeSinceAppStart;
- (void)_logQPLTimeSinceAppStart:(int)start withAnnotateString:(const char *)string;
- (void)_logQPLShouldUseOmnistore:(int)omnistore;
- (int)_getNumberOfAccountsForAccountType:(id)type;
- (void)_logQPLAccountType:(id)type markerID:(int)id;
- (void)_logQPLCacheAccess:(id)access;
- (void)logCacheEvent_INTERNAL_ONLY:(id)only withCallerName:(id)name callerClass:(id)class serviceNames:(id)names errorMessage:(id)message;
- (id)lastUpdatedTimestamp;
- (BOOL)isRTDDEnabled;
- (BOOL)_isCacheExpired;
- (BOOL)_isBadgeCacheExpired;
- (BOOL)_isOmnistoreCacheExpired;
- (void)_deleteDataIfExpiredWithCallerName:(id)name callerClass:(id)class;
- (void)checkObIDEqualityWithCallerName:(id)name ObID1:(id)id1 ObID2:(id)id2 resultCallback:(id /* block */)callback errorCallback:(id /* block */)callback;
- (unsigned long long)getCacheStatusWithCallerName_TEMPORARY:(id)temporary fromClass:(id)class;
- (id)getLinkedBadgeAccountsWithAccountType:(id)type withCallerName:(id)name fromClass:(id)class isSwitcherUseCaseForBadging:(BOOL)badging;
- (id)getLinkedBadgeAccountsWithAccountType:(id)type withCallerName:(id)name fromClass:(id)class;
- (id)getLinkedBadgeAccountsWithCallerName:(id)name fromClass:(id)class isSwitcherUseCaseForBadging:(BOOL)badging;
- (void)cacheLinkedBadgeAccounts_INTERNAL_ONLY:(id)only withCallerName:(id)name fromClass:(id)class;
- (int)getTotalBadgeCountForAccount:(id)account fromClass:(id)class accountType:(id)type shouldUseUnfilteredBadge:(BOOL)badge;
@end

#endif /* FXAccountCache_h */
