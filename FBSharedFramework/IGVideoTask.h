//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGVideoTask_h
#define IGVideoTask_h
@import Foundation;

#include "NSOperation.h"
#include "IGAPIClient-Protocol.h"
#include "IGAnalyticsEventLoggingProtocol-Protocol.h"
#include "IGAsyncTask.h"
#include "IGDInstamadilloMediaUploading-Protocol.h"
#include "IGImageUploadTask.h"
#include "IGMediaQualityMeter.h"
#include "IGMediaQualityUploader.h"
#include "IGMediaUploadViaMessengerInfraProtocol-Protocol.h"
#include "IGPostSessionLogger.h"
#include "IGUploadCoverPhotoCoordinator.h"
#include "IGUploadCoverPhotoOperationFactory.h"
#include "IGUploadStatusCheckOperation.h"
#include "IGUploadStatusCheckOperationFactory.h"
#include "IGUploadTaskDependency-Protocol.h"
#include "IGUploadTaskListener-Protocol.h"
#include "IGUploadTaskQueue.h"
#include "IGUploadVideoOperationFactory.h"
#include "IGUserLauncherSetProviding-Protocol.h"
#include "IGVideoSource.h"
#include "IGVideoUploadConfig.h"
#include "IGVideoUploadTaskType-Protocol.h"
#include "_TtC19IGUploadMediaSource30IGUploadARFilterDependencyList.h"

@class NSDictionary, NSProgress, NSString, NSURL;
@protocol IGPostAnalyticsProvider, IGUploadTaskAnnouncer, NSOperation<IGUploadVideoOperationProtocol, OS_dispatch_queue;

@interface IGVideoTask : NSOperation<IGUploadTaskListener, IGVideoUploadTaskType, IGUploadTaskDependency> {
  /* instance variables */
  NSString *_taskId;
  IGVideoSource *_videoSource;
  IGVideoUploadConfig *_videoUploadConfig;
  NSObject<IGAPIClient> *_networker;
  NSObject<IGUserLauncherSetProviding> *_featureSets;
  _TtC19IGUploadMediaSource30IGUploadARFilterDependencyList *_arDependencies;
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<IGPostAnalyticsProvider> *_analyticsProvider;
  NSObject<IGUploadTaskAnnouncer> *_announcer;
  IGUploadCoverPhotoCoordinator *_coverPhotoCoordinator;
  IGUploadVideoOperationFactory *_videoUploadOperationFactory;
  IGUploadCoverPhotoOperationFactory *_coverUploadOperationFactory;
  IGUploadStatusCheckOperationFactory *_statusCheckOperationFactory;
  IGUploadTaskQueue *_taskQueue;
  NSOperation<IGUploadVideoOperationProtocol> *_videoUploadOperation;
  IGImageUploadTask *_coverUploadOperation;
  IGUploadStatusCheckOperation *_statusCheckOperation;
  IGAsyncTask *_activeCacheableVideoExport;
  long long _status;
  NSProgress *_totalProgress;
  NSProgress *_videoUploadProgress;
  NSProgress *_coverUploadProgress;
  NSProgress *_statusCheckProgress;
  NSDictionary *_videoUploadResponse;
  long long _retryAttemptCount;
  IGPostSessionLogger *_postSessionLogger;
  NSURL *_renderedVideoUrl;
  BOOL _shouldGenerateCoverFromRenderedVideo;
  BOOL _skipStatusCheck;
  NSDictionary *_uploadParams;
  IGMediaQualityMeter *_mediaQualityMeter;
  IGMediaQualityUploader *_mediaQualityUploader;
  NSObject<IGAnalyticsEventLoggingProtocol> *_analyticsLogger;
  NSObject<IGMediaUploadViaMessengerInfraProtocol> *_uploadProtocolProvider;
  NSObject<IGDInstamadilloMediaUploading> *_instamadilloMediaUploadProvider;
}

@property (readonly, nonatomic) NSDictionary *videoCoverPhotoUploadResponse;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTaskId:(id)id videoSource:(id)source videoUploadConfig:(id)config uploadParams:(id)params additionalHeaders:(id)headers networker:(id)networker userPk:(id)pk iglContextProvider:(id)provider offProcessNetworkRequestDeps:(id)deps feedDraftManager:(id)manager mediaQualityMeter:(id)meter mediaQualityUploader:(id)uploader videoRenderQueue:(id)queue analyticsLogger:(id)logger featureSets:(id)sets arDependencies:(id)dependencies queue:(id)queue analyticsProvider:(id)provider uploadProtocolProvider:(id)provider instamadilloMediaUploadProvider:(id)provider;
- (void)start;
- (void)cancel;
- (BOOL)isAsynchronous;
- (BOOL)isExecuting;
- (BOOL)isFinished;
- (BOOL)isCancelled;
- (id)_createCacheableVideoWithSource:(id)source musicBurninParams:(id)params;
- (id)_renderCacheableVideoWithSource:(id)source audioAssetId:(id)id musicOffsetInMiliseconds:(id)miliseconds videoDestinationURL:(id)url;
- (id)_commbineVideo:(id)video musicURL:(id)url musicOffsetInMiliseconds:(id)miliseconds outputURL:(id)url;
- (id)taskId;
- (id)uploadId;
- (long long)status;
- (double)progress;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (BOOL)isFinishedWithSuccess;
- (void)copyRemoteAudioOperation:(id)operation didCompleteWithVideoComposition:(id)composition;
- (void)copyRemoteAudioOperation:(id)operation didSkipWithReason:(id)reason;
- (void)copyRemoteAudioOperation:(id)operation didFailWithError:(id)error;
- (void)uploadStatusChecker:(id)checker requestMetadataForUploadId:(id)id metadataBlock:(id /* block */)block;
- (void)uploadStatusCheckOperation:(id)operation didCompleteWithError:(id)error needsReupload:(BOOL)reupload response:(id)response;
- (void)uploadVideoOperation:(id)operation didCompleteWithError:(id)error response:(id)response;
- (void)uploadVideoOperation:(id)operation didUpdateProgress:(double)progress;
- (void)uploadVideoOperation:(id)operation didStartAutoRetryWithCurrentProgress:(double)progress;
- (void)uploadVideoOperation:(id)operation didUpdateWithRenderedVideoUrl:(id)url;
- (void)uploadVideoOperation:(id)operation didUpdateWithSampleImageSource:(id)source;
- (void)uploadVideoOperationDidSuspendProcessing:(id)processing;
- (void)uploadTask:(id)task didCompleteWithResponse:(id)response error:(id)error;
- (void)uploadTask:(id)task didUpdateToProgress:(double)progress;
- (void)uploadTaskDidCancel:(id)cancel;
- (void)imageUploadTask:(id)task didUpdateWithRenderedImageSource:(id)source;
- (void)videoUploadTask:(id)task didUpdateWithVideoCoverImageSource:(id)source;
- (void)videoUploadTask:(id)task didUpdateWithRenderedVideoUrl:(id)url;
- (void)videoUploadTask:(id)task didCreateCacheableVideoAtURL:(id)url;
- (void)videoUploadTask:(id)task didStartAutoRetryWithCurrentProgress:(double)progress;
- (void)videoUploadTaskDidSuspendProcessing:(id)processing;
- (void)coverPhotoCoordinator:(id)coordinator didFinalizeWithCoverImageSource:(id)source error:(id)error;
@end

#endif /* IGVideoTask_h */
