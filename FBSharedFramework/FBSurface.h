//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBSurface_h
#define FBSurface_h
@import Foundation;

#include "FBGLContext.h"
#include "NSObject-Protocol.h"

@class CAEAGLLayer, NSString;
@protocol struct shared_ptr<igl::Color> { struct Color * x0; struct __shared_weak_count * x1; }, struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer * x0; struct __shared_weak_count * x1; }, struct shared_ptr<igl::ITexture> { struct ITexture * x0; struct __shared_weak_count * x1; }, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}, {shared_ptr<igl::Color>="__ptr_"^{Color}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IDevice>="__ptr_"^{IDevice}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IFramebuffer>="__ptr_"^{IFramebuffer}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::ITexture>="__ptr_"^{ITexture}"__cntrl_"^{__shared_weak_count}};

@interface FBSurface : NSObject<NSObject> {
  /* instance variables */
  unsigned int _depthRenderBuffer;
  unsigned int _framebuffer;
  unsigned int _renderbuffer;
  BOOL _generatedTexture;
  BOOL _isDepthAttached;
  struct shared_ptr<igl::ITexture> { struct ITexture *__ptr_; struct __shared_weak_count *__cntrl_; } _iglDepthRenderbuffer;
  struct shared_ptr<igl::ITexture> { struct ITexture *__ptr_; struct __shared_weak_count *__cntrl_; } _iglNativeDrawableTexture;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _layerRenderBufferStorageNeedsRefresh;
  BOOL _noFlushCAContextWhenCreatingFramebuffer;
  FBGLContext *_glContext;
  struct __CVBuffer * _cvTexture;
  unsigned int _texture;
  unsigned int _textureTarget;
  struct __CVOpenGLESTextureCache * _textureCache;
  CAEAGLLayer *_layer;
  struct shared_ptr<igl::IDevice> { struct IDevice *__ptr_; struct __shared_weak_count *__cntrl_; } _device;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } size;
@property (readonly, nonatomic) struct __CVBuffer * pixelBuffer;
@property (readonly, nonatomic) BOOL flipped;
@property (readonly, nonatomic) BOOL hdr;
@property (readonly, nonatomic) struct shared_ptr<igl::ITexture> { struct ITexture * x0; struct __shared_weak_count * x1; } iglTexture;
@property (readonly, nonatomic) const char * name;
@property (readonly, nonatomic) struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer * x0; struct __shared_weak_count * x1; } iglFramebuffer;
@property (readonly, nonatomic) struct shared_ptr<igl::Color> { struct Color * x0; struct __shared_weak_count * x1; } iglClearColor;

/* instance methods */
- (void)dealloc;
- (id)initWithSize:(struct CGSize { double x0; double x1; })size;
- (id)initWithPixelBuffer:(struct __CVBuffer *)buffer;
- (id)initWithTexture:(unsigned int)texture size:(struct CGSize { double x0; double x1; })size;
- (id)initWithTexture:(unsigned int)texture target:(unsigned int)target size:(struct CGSize { double x0; double x1; })size;
- (id)initWithGLTexture:(id)gltexture;
- (id)initWithFramebuffer:(unsigned int)framebuffer size:(struct CGSize { double x0; double x1; })size flipped:(BOOL)flipped;
- (id)initWithSize:(struct CGSize { double x0; double x1; })size device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache name:(const char *)name;
- (id)initWithPixelBuffer:(struct __CVBuffer *)buffer device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache;
- (id)initWithPixelBuffer:(struct __CVBuffer *)buffer device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache name:(const char *)name;
- (id)initWithPixelBuffer:(struct __CVBuffer *)buffer size:(struct CGSize { double x0; double x1; })size device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache;
- (id)initWithPixelBuffer:(struct __CVBuffer *)buffer size:(struct CGSize { double x0; double x1; })size device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache name:(const char *)name;
- (id)initWithLayer:(id)layer device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache;
- (id)initWithLayer:(id)layer device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device textureCache:(struct __CVOpenGLESTextureCache *)cache noFlushCAContextWhenCreatingFramebuffer:(BOOL)framebuffer;
- (id)initWithIGLFramebuffer:(struct shared_ptr<igl::IFramebuffer> { struct IFramebuffer * x0; struct __shared_weak_count * x1; })iglframebuffer device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device size:(struct CGSize { double x0; double x1; })size flipped:(BOOL)flipped;
- (id)initWithIGLTexture:(struct shared_ptr<igl::ITexture> { struct ITexture * x0; struct __shared_weak_count * x1; })igltexture device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device flipped:(BOOL)flipped;
- (BOOL)isHDR;
- (void)present;
- (void)bindTexture;
- (unsigned int)createTextureIfNeeded;
- (void)flushBuffer;
- (void)createTextureIfNeededForUniformName:(id)name;
- (void)bindTextureForUniformName:(id)name;
- (void)refreshLayerFramebuffer;
- (struct CGSize { double x0; double x1; })maxTextureSize;
- (void)setClearColorWithAlpha:(float)alpha Red:(float)red Green:(float)green Blue:(float)blue;
- (BOOL)isFlipped;
@end

#endif /* FBSurface_h */
