//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCache_h
#define FBCache_h
@import Foundation;

@class NSString;
@protocol NSCacheDelegate, {map<NSObject *, FBCacheOwnedObject, std::less<NSObject *>, std::allocator<std::pair<NSObject *const, FBCacheOwnedObject>>>="__tree_"{__tree<std::__value_type<NSObject *, FBCacheOwnedObject>, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>>, std::allocator<std::__value_type<NSObject *, FBCacheOwnedObject>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSObject *, FBCacheOwnedObject>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>>>="__value_"Q}}};

@interface FBCache : NSObject {
  /* instance variables */
  BOOL _respondsToWillEvictObject;
  void * _imp;
  struct map<NSObject *, FBCacheOwnedObject, std::less<NSObject *>, std::allocator<std::pair<NSObject *const, FBCacheOwnedObject>>> { struct __tree<std::__value_type<NSObject *, FBCacheOwnedObject>, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>>, std::allocator<std::__value_type<NSObject *, FBCacheOwnedObject>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<NSObject *, FBCacheOwnedObject>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<NSObject *, std::__value_type<NSObject *, FBCacheOwnedObject>, std::less<NSObject *>>> { unsigned long long __value_; } __pair3_; } __tree_; } _ownedObjectMap;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _impLock;
  BOOL _enabled;
  unsigned long long _fetchCount;
  unsigned long long _missCount;
  id /* block */ _evictionCompletion;
  BOOL _shouldRemoveAllObjectsWhenEnteringBackground;
  double _compactionFactorForMemoryWarning;
}

@property (copy, nonatomic) NSString *name;
@property (nonatomic) unsigned long long countLimit;
@property (nonatomic) unsigned long long totalCostLimit;
@property (nonatomic) BOOL evictsObjectsWhenApplicationEntersBackground;
@property (nonatomic) BOOL evictsObjectsWithDiscardedContent;
@property (weak, nonatomic) NSObject<NSCacheDelegate> *delegate;
@property (nonatomic) unsigned long long minimumObjectCount;
@property (copy, nonatomic) NSString *cacheName;
@property (readonly, nonatomic) NSString *cacheStrategy;
@property (nonatomic) unsigned long long maximumCost;

/* instance methods */
- (id)init;
- (id)initWithMaximumCost:(unsigned long long)cost cacheName:(id)name;
- (id)initWithMaximumCost:(unsigned long long)cost cacheName:(id)name strategyOverride:(id)override evictionCompletion:(id /* block */)completion;
- (void)dealloc;
- (unsigned long long)count;
- (void)removeAllUnownedObjects;
- (id)removeAllObjects;
- (void)compact;
- (void)compactWithFactor:(double)factor;
- (void)compactOnMemoryWarning;
- (void)removeObjectForKey:(id)key;
- (void)removeObjectsForKeys:(id)keys;
- (BOOL)containsKey:(id)key;
- (id)objectForKey:(id)key;
- (id)_locked_objectForKey:(id)key;
- (void)setObject:(id)object forKey:(id)key;
- (void)enumerateKeysAndObjectsUsingBlock:(id /* block */)block;
- (id)description;
- (id)allKeys;
- (id)allObjects;
- (void)enable;
- (void)disableAndDrain;
- (void)setObject:(id)object forKey:(id)key cost:(unsigned long long)cost;
- (id)mapTableRepresentation;
@end

#endif /* FBCache_h */
