//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBAnalyticsCoreLogger_h
#define FBAnalyticsCoreLogger_h
@import Foundation;

#include "FBAnalyticsIdentitiesConfiguring-Protocol.h"
#include "FBAnalyticsIdentityScopedLogging-Protocol.h"
#include "FBAnalyticsUnifiedLogging-Protocol.h"

@class NSMutableDictionary, NSString;

@interface FBAnalyticsCoreLogger : NSObject<FBAnalyticsIdentitiesConfiguring, FBAnalyticsUnifiedLogging, FBAnalyticsIdentityScopedLogging> {
  /* instance variables */
  NSString *_logDirectoryPathMicrobatch;
  NSString *_logDirectoryPath;
  NSMutableDictionary *_aggregateCountersForIdentities;
  NSMutableDictionary *_aggregateCounters;
  unsigned long long _pigeonBeaconSequenceNumber;
  unsigned long long _pigeonBeaconSessionID;
  unsigned long long _numberOfEventsSinceLastPigeonBeacon;
}

@property BOOL sampled;
@property (readonly) NSString *analyticsCurrentDeviceIdentity;
@property (readonly) struct  * analyticsCurrentUserIdentity;
@property (readonly, nonatomic) id /* block */ analyticsRequestBlock;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedAnalyticsCoreLogger;

/* instance methods */
- (struct  *)analyticsCurrentUserIdentityProvider;
- (id)init;
- (id)initWithEnvironmentFunctions:(struct FBAnalyticsEnvironmentFunctions { undefined * x0; undefined * x1; undefined * x2; undefined * x3; struct FBAnalyticsSamplingProviderFunctions { undefined * x0; struct FBAnalyticsGetSamplingConfigFunctions { undefined * x0; undefined * x1; undefined * x2; } x1; undefined * x2; } x4; struct FBAnalyticsSamplingProviderFunctions { undefined * x0; struct FBAnalyticsGetSamplingConfigFunctions { undefined * x0; undefined * x1; undefined * x2; } x1; undefined * x2; } x5; })functions experimentValues:(struct FBAnalyticsExperimentValues { id x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; id x5; id x6; BOOL x7; BOOL x8; long long x9; id x10; BOOL x11; id x12; BOOL x13; long long x14; BOOL x15; BOOL x16; long long x17; long long x18; long long x19; double x20; double x21; id x22; id x23; id x24; id x25; unsigned long long x26; BOOL x27; long long x28; long long x29; long long x30; long long x31; long long x32; BOOL x33; BOOL x34; BOOL x35; BOOL x36; BOOL x37; long long x38; BOOL x39; BOOL x40; BOOL x41; BOOL x42; BOOL x43; BOOL x44; BOOL x45; BOOL x46; BOOL x47; BOOL x48; BOOL x49; BOOL x50; BOOL x51; BOOL x52; id x53; BOOL x54; BOOL x55; BOOL x56; BOOL x57; BOOL x58; long long x59; BOOL x60; id x61; BOOL x62; BOOL x63; long long x64; id x65; id x66; BOOL x67; double x68; long long x69; long long x70; BOOL x71; id x72; long long x73; id x74; BOOL x75; id x76; id x77; long long x78; long long x79; BOOL x80; BOOL x81; BOOL x82; BOOL x83; BOOL x84; BOOL x85; BOOL x86; BOOL x87; BOOL x88; BOOL x89; })values;
- (void)suspendAnalyticsQueueWithDelay:(unsigned long long)delay;
- (void)resumeAnalyticsQueue;
- (void)dealloc;
- (void)setUserIdentity:(struct { id x0; id x1; id x2; id x3; id x4; })identity;
- (id)userFBID;
- (void)setUserFBID:(id)fbid;
- (void)setNonFBUserID:(id)id;
- (void)userIdentityChangeRequested:(struct  *)requested newUserIdentity:(struct { id x0; id x1; id x2; id x3; id x4; })identity;
- (void)userIdentityWillChange:(struct { id x0; id x1; id x2; id x3; id x4; })change;
- (void)userIdentityDidChange:(struct { id x0; id x1; id x2; id x3; id x4; })change;
- (void)toggleState:(unsigned long long)state;
- (void)flush;
- (BOOL)_shouldThrottleEvent:(id)event logEventMetadata:(struct FBStructuredLogEventMetadata *)metadata;
- (void)_logEvent:(id)event extra:(id)extra logEventMetadata:(struct FBStructuredLogEventMetadata { id x0; id x1; id x2; double x3; double x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; long long x8; BOOL x9; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x10; struct FBAnalyticsPrivacyContext { id x0; id x1; id x2; } x11; struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; } x12; double x13; unsigned long long x14; id x15; })metadata;
- (void)_captureAnalyticsEvent:(id)event;
- (BOOL)_captureAnalyticsEventForBatchUpload:(id)upload;
- (BOOL)_instrumented_captureAnalyticsEventForBatchUpload:(id)upload;
- (BOOL)_isFalcoEventFullyFederated:(id)federated;
- (BOOL)_isFalcoEventPartiallyFederated:(id)federated;
- (BOOL)_isFalcoEventFederated:(id)federated;
- (BOOL)_isFalcoFederatedEventListEmpty;
- (BOOL)_isFalcoEventDeidentified:(id)deidentified;
- (BOOL)_captureAnalyticsEventForFederatedOnDeviceStorage:(id)storage;
- (BOOL)_captureAnalyticsEventForStreaming:(id)streaming;
- (void)_setupEventStreamingHandlers;
- (id)_eventStreamingProviderForSerializedIdentities:(id)identities;
- (BOOL)_shouldStreamEvent:(id)event;
- (void)_maskIdentitiesForEvent:(id)event logEventMetadata:(struct FBStructuredLogEventMetadata *)metadata;
- (void)_applyLatencyOverrideForEvent:(id)event logEventMetadata:(struct FBStructuredLogEventMetadata *)metadata;
- (void)_processExtensionEvents;
- (unsigned long long)samplingRateForEvent:(id)event subEvent:(id)event;
- (struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; })samplingRateForEvent:(id)event logEventMetadata:(const struct FBStructuredLogEventMetadata *)metadata;
- (struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; })shouldSampleEvent:(id)event logEventMetadata:(const struct FBStructuredLogEventMetadata *)metadata;
- (unsigned long long)sampleEvent:(id)event withRate:(unsigned long long)rate;
- (void)logUntypedEvent:(id)event logEventMetadata:(struct FBStructuredLogEventMetadata { id x0; id x1; id x2; double x3; double x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; long long x8; BOOL x9; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x10; struct FBAnalyticsPrivacyContext { id x0; id x1; id x2; } x11; struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; } x12; double x13; unsigned long long x14; id x15; })metadata payloadBlock:(id /* block */)block;
- (void)logEventWithName:(id)name payload:(id)payload logEventMetadata:(struct FBStructuredLogEventMetadata { id x0; id x1; id x2; double x3; double x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; long long x8; BOOL x9; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x10; struct FBAnalyticsPrivacyContext { id x0; id x1; id x2; } x11; struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; } x12; double x13; unsigned long long x14; id x15; })metadata eventConfig:(struct FBStructuredLogEventConfig { id x0; id x1; unsigned long long x2; double x3; double x4; BOOL x5; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x6; struct PrivacyContext { id x0; struct optional<facebook::logginginfra::privacy::Product> { union { char x0; int x1; } x0; BOOL x1; } x1; long long x2; } x7; })config;
- (void)logCounter:(id)counter;
- (void)logCounter:(id)counter value:(id)value;
- (void)logCounter:(id)counter value:(id)value eventName:(id)name;
- (void)logCounter:(id)counter value:(id)value eventName:(id)name logEventMetadata:(struct FBStructuredLogEventMetadata { id x0; id x1; id x2; double x3; double x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; long long x8; BOOL x9; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x10; struct FBAnalyticsPrivacyContext { id x0; id x1; id x2; } x11; struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; } x12; double x13; unsigned long long x14; id x15; })metadata;
- (id)_aggregateCounters;
- (id)_aggregateCountersForUserIdentity:(id)identity;
- (void)_addCounter:(id)counter value:(id)value eventName:(id)name logEventMetadata:(struct FBStructuredLogEventMetadata { id x0; id x1; id x2; double x3; double x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; long long x8; BOOL x9; struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; } x10; struct FBAnalyticsPrivacyContext { id x0; id x1; id x2; } x11; struct FBAnalyticsSamplingResult { unsigned long long x0; unsigned long long x1; unsigned long long x2; long long x3; unsigned long long x4; } x12; double x13; unsigned long long x14; id x15; })metadata;
- (void)_logAggregateCounters;
- (void)_logAggregateCounters:(id)counters serializedUserIdentity:(id)identity;
- (void)unsafelyPauseAnalyticsLogUploads;
- (void)resumeAnalyticsLogUploads;
- (void)unsafelyPauseHealthCountersUploads;
- (void)resumeHealthCountersUploads;
- (void)_logPigeonBeaconWithSerializedIdentities:(struct FBAnalyticsSerializedIdentities { id x0; id x1; id x2; })identities;
- (BOOL)isSampled;
@end

#endif /* FBAnalyticsCoreLogger_h */
