//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef OCMController_h
#define OCMController_h
@import Foundation;

#include "FBCaptureController.h"
#include "FBCapturePreviewProviding-Protocol.h"
#include "OCMControllerProtocol-Protocol.h"
#include "OCMEKSource.h"
#include "OCMGraph.h"

@class NSMutableDictionary, NSMutableSet, NSString, NSURL;
@protocol FBARFilterDownloading, FBCCAudioPipelineProviding, FBCaptureCoordinatorBase<FBCaptureCoordinatorFilterManaging><FBCCCaptureModeManaging><FBCCSampleBufferCallbackProviding><FBMPVideoPreviewListening><FBMultiCameraVideoCompositeControlling, FBCaptureMode, FBMPSessionContextConfigProviderDelegate, FBSystemAudioCaptureSessionInteracting, OS_dispatch_queue;

@interface OCMController : NSObject<OCMControllerProtocol> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_controllerQueue;
  NSMutableDictionary *_components;
  NSMutableSet *_allComponentObjects;
  NSMutableDictionary *_dependenciesByComponentID;
  struct FBCaptureCoordinatorConfiguration { struct FBCameraConfiguration { BOOL shouldFrontCameraVideoMirrored; BOOL multitaskingCameraAccessEnabled; long long startingDevicePosition; long long initialFlashMode; NSString *initialSessionPreset; BOOL retainSinglePreviewLayerWhenSwitchCaptureSession; BOOL retainMultiPreviewLayersWhenSwitchCaptureSession; BOOL useSingleCaptureDeviceAsDefaultCameraPosition; unsigned char initialTargetFPS; BOOL audioCaptureIgnoreRTCClientNotification; BOOL automaticallyConfiguresApplicationAudioSession; BOOL canPreConfigureAudioSession; BOOL shouldRemoveInputsAndOutputsWhenStopped; BOOL enableEchoCancellation; BOOL videoBufferTransformEnabled; long long videoStabilizationMode; BOOL setVideoStabilizationModeAfterStart; BOOL subjectAreaChangeMonitoring; float lowLightDetectionThreshold; float lowLightExposureBias; struct FBBracketedCaptureConfiguration { NSArray *exposureValues; undefined *resolverFunction; BOOL enabled; BOOL autoEnhanceEnabled; unsigned long long downsampleWidth; } bracketedCaptureConfiguration; double maxZoomFactor; BOOL ultraWideCameraSupport; BOOL preserveZoomFactorsDuringCameraSession; BOOL keepAudioSessionActiveDuringCameraSession; BOOL markAVWriterInputsAsFinishedWhenRecordingStops; id /* block */ disableARKitCacheBlock; struct CGSize { double width; double height; } preferredWorldTrackingResolution; BOOL planeDetectionEnabled; BOOL produceWorldTrackingFrames; BOOL worldTrackingAlignmentGravity; BOOL lowLightDetectorEnabled; BOOL flashSceneDetectorEnabled; BOOL audioCaptureEnabled; BOOL audioOnlyCapture; NSArray *preferredCaptureDeviceTypes; NSArray *captureDevices; NSArray *multiCaptureDevices; BOOL useLatestCaptureDevices; unsigned int photoPixelFormat; unsigned int initialCaptureVideoDataOutputPixelFormatType; struct FBCaptureAutoExposureConfiguration { BOOL enableAutoExposureOnTrackedObjects; BOOL trackVisibleFaces; BOOL trackVisibleBodies; BOOL trackVisibleCats; BOOL trackVisibleDogs; BOOL trackQRCodes; } autoExposureConfiguration; struct FBCapturePOIDetectorConfiguration { long long detectorType; double executionTimeInterval; double minimumBoundsChange; BOOL drawDebugBounds; } detectorConfiguration; BOOL fbAudioEnabled; NSArray *photoCapturePlugins; BOOL useFBMultiCaptureManager; BOOL enableMultiCapture; struct CGSize { double width; double height; } customizedCapturedPhotoResolution; struct FBPhotoCaptureConfiguration { BOOL stillImageCaptureEnabled; BOOL isFlipFrontCameraOutputEnabled; BOOL stopLivePreviewOnPhotoCapture; BOOL delayImageCaptureWhileAdjustingCamera; BOOL setFlashModeOnPhotoSettingsForSceneMonitoring; unsigned long long setMaxPhotoQualityPrioritization; } photoCaptureConfiguration; BOOL enableSceneDepth; BOOL livePhotoEnabled; BOOL includeTrackingDataInVideoData; struct FBCameraSimulationConfiguration { id /* block */ videoFilePathProvider; id /* block */ imageFilePathProvider; BOOL enableLocalVideoFileInput; BOOL enableLocalVideoFileAudioHandling; BOOL endlessPlaybackEnabled; } cameraSimulationConfiguration; BOOL stereoEnabled; BOOL forceARKit; BOOL pauseResumeOnAsyncSessionQueue; struct FBRecordingConfiguration { id /* block */ depthRecordingHandler; id /* block */ poseRecordingHandler; BOOL shouldCaptureWithRecordingTimestamps; struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumDuration; BOOL useCaptureVideoDataOutputRecommendedVideoSettings; } recordingConfiguration; BOOL enableSetWorldMapForWorldTracking; BOOL enableMETACaptureManagerConvergence; BOOL enableControlPanel; int maxExposureDurationMs; BOOL doNotSetVideoSettings; isARKitAudioDataRequired *videoFormat; BOOL x0; int captureInfoLoggingFrameInterval; BOOL isARFrameRotationDisabled; } cameraConfiguration; struct FBRendererConfiguration { BOOL skipRenderingUntilAllFiltersPrepared; BOOL flushTextureCacheOnEveryFrame; BOOL multipleOutputsEnabled; BOOL overlayOutputEnabled; BOOL batchPostConnectionOperations; BOOL iglSurfaceEnabled; BOOL iglImageFilterEnabled; BOOL iglImageOverlayFilterEnabled; BOOL iglDoodleDrawingFilterEnabled; int renderingType; BOOL cropAspectFitUsingPreviewAspectRatio; BOOL alwaysCropAspectFitUsingPreviewAspectRatio; BOOL output16Bit; BOOL copiesServiceHostOnExport; } rendererConfiguration; struct FBPreviewConfiguration { BOOL isInitialPreviewModeAVCaptureVideoPreviewLayer; NSString *contentsGravity; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } previewCropRect; BOOL disableDefaultPreview; BOOL enableFlushingOnAVSampleBufferDisplayLayer; } previewConfiguration; struct FBGestureConfiguration { BOOL failGatingForConsumedTapGestureData; } gestureConfiguration; unsigned long long requiredCameraCapabilities; unsigned long long imageResolutionSetting; double videoBitratePerPixel; BOOL optimizePreviewForScreen; BOOL warmupARKit; BOOL enableHDRVideoRecordingIfPossible; BOOL disableCameraPreviewViewAspectRatioMatching; BOOL isPhotoCapturePostProcessingOnSeparateQueue; struct CGSize { double width; double height; } recordingVideoSize; BOOL useCaptureManagerFixForIsRunningCheck; BOOL multitaskingCameraAccessEnabled; } _configuration;
  id /* block */ _loggerProvider;
  id /* block */ _filterFactoryProvider;
  id /* block */ _experimentManagerProvider;
  OCMEKSource *_primaryEventsSource;
  NSURL *_directoryForVideoStorage;
  NSObject<FBSystemAudioCaptureSessionInteracting> *_systemAudioCaptureSessionInteractor;
  BOOL _fbAudioEnabled;
  struct final { BOOL enableMicInPreview; BOOL startOutputOnStartInput; BOOL startOutputOnSubgraphInsert; BOOL enableSetAudioMixing; BOOL enableFBAAllowSpeakerDuringRecording; BOOL enableFBAShouldPauseBackgroundWhenApplyingEffect; BOOL enableFBAAllowStartInputForSomeSubgraphInsertion; BOOL enablePushGraph; BOOL shouldConfigureStereoCapture; } _audioPipelineConfiguration;
  NSObject<FBARFilterDownloading> *_filterDownloader;
  FBCaptureCoordinatorBase<FBCaptureCoordinatorFilterManaging><FBCCCaptureModeManaging><FBCCSampleBufferCallbackProviding><FBMPVideoPreviewListening><FBMultiCameraVideoCompositeControlling> *_preCaptureCoordinator;
  FBCaptureCoordinatorBase<FBCaptureCoordinatorFilterManaging><FBCCCaptureModeManaging><FBCCSampleBufferCallbackProviding><FBMPVideoPreviewListening><FBMultiCameraVideoCompositeControlling> *_postCaptureCoordinator;
  NSObject<FBCaptureMode> *_captureMode;
  NSString *_captureModeComponentID;
  long long _currentState;
  FBCaptureController *_captureCoordinator;
  struct FBNewCaptureCoordinatorConfiguration { struct FBCaptureCoordinatorConfiguration { struct FBCameraConfiguration { BOOL shouldFrontCameraVideoMirrored; BOOL multitaskingCameraAccessEnabled; long long startingDevicePosition; long long initialFlashMode; NSString *initialSessionPreset; BOOL retainSinglePreviewLayerWhenSwitchCaptureSession; BOOL retainMultiPreviewLayersWhenSwitchCaptureSession; BOOL useSingleCaptureDeviceAsDefaultCameraPosition; unsigned char initialTargetFPS; BOOL audioCaptureIgnoreRTCClientNotification; BOOL automaticallyConfiguresApplicationAudioSession; BOOL canPreConfigureAudioSession; BOOL shouldRemoveInputsAndOutputsWhenStopped; BOOL enableEchoCancellation; BOOL videoBufferTransformEnabled; long long videoStabilizationMode; BOOL setVideoStabilizationModeAfterStart; BOOL subjectAreaChangeMonitoring; float lowLightDetectionThreshold; float lowLightExposureBias; struct FBBracketedCaptureConfiguration { NSArray *exposureValues; undefined *resolverFunction; BOOL enabled; BOOL autoEnhanceEnabled; unsigned long long downsampleWidth; } bracketedCaptureConfiguration; double maxZoomFactor; BOOL ultraWideCameraSupport; BOOL preserveZoomFactorsDuringCameraSession; BOOL keepAudioSessionActiveDuringCameraSession; BOOL markAVWriterInputsAsFinishedWhenRecordingStops; id /* block */ disableARKitCacheBlock; struct CGSize { double width; double height; } preferredWorldTrackingResolution; BOOL planeDetectionEnabled; BOOL produceWorldTrackingFrames; BOOL worldTrackingAlignmentGravity; BOOL lowLightDetectorEnabled; BOOL flashSceneDetectorEnabled; BOOL audioCaptureEnabled; BOOL audioOnlyCapture; NSArray *preferredCaptureDeviceTypes; NSArray *captureDevices; NSArray *multiCaptureDevices; BOOL useLatestCaptureDevices; unsigned int photoPixelFormat; unsigned int initialCaptureVideoDataOutputPixelFormatType; struct FBCaptureAutoExposureConfiguration { BOOL enableAutoExposureOnTrackedObjects; BOOL trackVisibleFaces; BOOL trackVisibleBodies; BOOL trackVisibleCats; BOOL trackVisibleDogs; BOOL trackQRCodes; } autoExposureConfiguration; struct FBCapturePOIDetectorConfiguration { long long detectorType; double executionTimeInterval; double minimumBoundsChange; BOOL drawDebugBounds; } detectorConfiguration; BOOL fbAudioEnabled; NSArray *photoCapturePlugins; BOOL useFBMultiCaptureManager; BOOL enableMultiCapture; struct CGSize { double width; double height; } customizedCapturedPhotoResolution; struct FBPhotoCaptureConfiguration { BOOL stillImageCaptureEnabled; BOOL isFlipFrontCameraOutputEnabled; BOOL stopLivePreviewOnPhotoCapture; BOOL delayImageCaptureWhileAdjustingCamera; BOOL setFlashModeOnPhotoSettingsForSceneMonitoring; unsigned long long setMaxPhotoQualityPrioritization; } photoCaptureConfiguration; BOOL enableSceneDepth; BOOL livePhotoEnabled; BOOL includeTrackingDataInVideoData; struct FBCameraSimulationConfiguration { id /* block */ videoFilePathProvider; id /* block */ imageFilePathProvider; BOOL enableLocalVideoFileInput; BOOL enableLocalVideoFileAudioHandling; BOOL endlessPlaybackEnabled; } cameraSimulationConfiguration; BOOL stereoEnabled; BOOL forceARKit; BOOL pauseResumeOnAsyncSessionQueue; struct FBRecordingConfiguration { id /* block */ depthRecordingHandler; id /* block */ poseRecordingHandler; BOOL shouldCaptureWithRecordingTimestamps; struct { long long value; int timescale; unsigned int flags; long long epoch; } maximumDuration; BOOL useCaptureVideoDataOutputRecommendedVideoSettings; } recordingConfiguration; BOOL enableSetWorldMapForWorldTracking; BOOL enableMETACaptureManagerConvergence; BOOL enableControlPanel; int maxExposureDurationMs; BOOL doNotSetVideoSettings; isARKitAudioDataRequired *videoFormat; BOOL x0; int captureInfoLoggingFrameInterval; BOOL isARFrameRotationDisabled; } cameraConfiguration; struct FBRendererConfiguration { BOOL skipRenderingUntilAllFiltersPrepared; BOOL flushTextureCacheOnEveryFrame; BOOL multipleOutputsEnabled; BOOL overlayOutputEnabled; BOOL batchPostConnectionOperations; BOOL iglSurfaceEnabled; BOOL iglImageFilterEnabled; BOOL iglImageOverlayFilterEnabled; BOOL iglDoodleDrawingFilterEnabled; int renderingType; BOOL cropAspectFitUsingPreviewAspectRatio; BOOL alwaysCropAspectFitUsingPreviewAspectRatio; BOOL output16Bit; BOOL copiesServiceHostOnExport; } rendererConfiguration; struct FBPreviewConfiguration { BOOL isInitialPreviewModeAVCaptureVideoPreviewLayer; NSString *contentsGravity; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } previewCropRect; BOOL disableDefaultPreview; BOOL enableFlushingOnAVSampleBufferDisplayLayer; } previewConfiguration; struct FBGestureConfiguration { BOOL failGatingForConsumedTapGestureData; } gestureConfiguration; unsigned long long requiredCameraCapabilities; unsigned long long imageResolutionSetting; double videoBitratePerPixel; BOOL optimizePreviewForScreen; BOOL warmupARKit; BOOL enableHDRVideoRecordingIfPossible; BOOL disableCameraPreviewViewAspectRatioMatching; BOOL isPhotoCapturePostProcessingOnSeparateQueue; struct CGSize { double width; double height; } recordingVideoSize; BOOL useCaptureManagerFixForIsRunningCheck; BOOL multitaskingCameraAccessEnabled; } preCaptureConfiguration; struct FBPostCaptureCoordinatorConfiguration { struct FBRendererConfiguration { BOOL skipRenderingUntilAllFiltersPrepared; BOOL flushTextureCacheOnEveryFrame; BOOL multipleOutputsEnabled; BOOL overlayOutputEnabled; BOOL batchPostConnectionOperations; BOOL iglSurfaceEnabled; BOOL iglImageFilterEnabled; BOOL iglImageOverlayFilterEnabled; BOOL iglDoodleDrawingFilterEnabled; int renderingType; BOOL cropAspectFitUsingPreviewAspectRatio; BOOL alwaysCropAspectFitUsingPreviewAspectRatio; BOOL output16Bit; BOOL copiesServiceHostOnExport; } rendererConfiguration; BOOL needsPreview; NSString *previewContentsGravity; } postCaptureConfiguration; } _unifiedConfiguration;
  BOOL _unificationEnabled;
  NSObject<FBCCAudioPipelineProviding> *_audioPipelineProvider;
  NSObject<FBCapturePreviewProviding> *_previewProvider;
  NSObject<FBMPSessionContextConfigProviderDelegate> *_contextConfigProviderDelegate;
}

@property (retain, nonatomic) OCMGraph *graph;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithConfiguration:(struct { id x0; id x1; id x2; long long x3; id x4; BOOL x5; struct final { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; } x6; BOOL x7; id x8; id x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; id x14; id /* block */ x15; BOOL x16; BOOL x17; BOOL x18; long long x19; BOOL x20; })configuration;
- (void)dealloc;
- (void)attachComponents:(id)components;
- (void)attachComponentsWithIDs:(id)ids;
- (void)detachComponentsWithIDs:(id)ids;
- (id)attachedComponentIDs;
- (id)interfaceForComponentID:(id)id;
- (id)interfaceForComponentID:(id)id expectingProtocol:(id)protocol;
- (id)graphValueForKey:(id)key;
- (id)optionalGraphValueForKey:(id)key;
- (id)events;
- (BOOL)isCaptureCoordinatorLoaded;
- (BOOL)isCaptureCoordinatorRunning;
- (id)captureCoordinator;
- (id)cameraCaptureCoordinator;
- (struct FBNewCaptureCoordinatorConfiguration *)newCaptureCoordinatorConfiguration;
- (void)startSessionWithCompletion:(id /* block */)completion;
- (void)stopSessionWithCompletion:(id /* block */)completion;
- (void)stopSessionAndAudio:(BOOL)audio withCompletion:(id /* block */)completion;
- (long long)activeControllerState;
- (id)activeCaptureModeComponent;
- (id)activeCaptureMode;
- (void)mountCaptureModeComponent:(id)component forState:(long long)state switchCaptureModeOnMount:(BOOL)mount completion:(id /* block */)completion;
- (void)mountCaptureModeComponent:(id)component forState:(long long)state completion:(id /* block */)completion;
- (void)mountCaptureModeComponentWithID:(id)id forState:(long long)state completion:(id /* block */)completion;
- (void)unmountCurrentCaptureModeComponentWithCompletion:(id /* block */)completion;
- (struct FBCaptureCoordinatorConfiguration { struct FBCameraConfiguration { BOOL x0; BOOL x1; long long x2; long long x3; id x4; BOOL x5; BOOL x6; BOOL x7; unsigned char x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; long long x15; BOOL x16; BOOL x17; float x18; float x19; struct FBBracketedCaptureConfiguration { id x0; undefined * x1; BOOL x2; BOOL x3; unsigned long long x4; } x20; double x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; id /* block */ x26; struct CGSize { double x0; double x1; } x27; BOOL x28; BOOL x29; BOOL x30; BOOL x31; BOOL x32; BOOL x33; BOOL x34; id x35; id x36; id x37; BOOL x38; unsigned int x39; unsigned int x40; struct FBCaptureAutoExposureConfiguration { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; } x41; struct FBCapturePOIDetectorConfiguration { long long x0; double x1; double x2; BOOL x3; } x42; BOOL x43; id x44; BOOL x45; BOOL x46; struct CGSize { double x0; double x1; } x47; struct FBPhotoCaptureConfiguration { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; unsigned long long x5; } x48; BOOL x49; BOOL x50; BOOL x51; struct FBCameraSimulationConfiguration { id /* block */ x0; id /* block */ x1; BOOL x2; BOOL x3; BOOL x4; } x52; BOOL x53; BOOL x54; BOOL x55; struct FBRecordingConfiguration { id /* block */ x0; id /* block */ x1; BOOL x2; struct { long long x0; int x1; unsigned int x2; long long x3; } x3; BOOL x4; } x56; BOOL x57; BOOL x58; BOOL x59; int x60; BOOL x61; id x62; BOOL x63; int x64; BOOL x65; } x0; struct FBRendererConfiguration { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; int x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; } x1; struct FBPreviewConfiguration { BOOL x0; id x1; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x2; BOOL x3; BOOL x4; } x2; struct FBGestureConfiguration { BOOL x0; } x3; unsigned long long x4; unsigned long long x5; double x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; struct CGSize { double x0; double x1; } x12; BOOL x13; BOOL x14; })activeCaptureCoordinatorConfiguration;
@end

#endif /* OCMController_h */
