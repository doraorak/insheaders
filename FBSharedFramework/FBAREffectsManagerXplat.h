//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBAREffectsManagerXplat_h
#define FBAREffectsManagerXplat_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSString;
@protocol FBARAnalyticsLogging, SparkARFLMConsentManager, struct shared_ptr<arfx::delivery::IEffectsManager> { struct IEffectsManager * x0; struct __shared_weak_count * x1; }, {shared_ptr<arfx::delivery::IAsyncAssetMetadataDownloading>="__ptr_"^{IAsyncAssetMetadataDownloading}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<arfx::delivery::IEffectsManager>="__ptr_"^{IEffectsManager}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<msqrd::logging::IRawEventLogger>="__ptr_"^{IRawEventLogger}"__cntrl_"^{__shared_weak_count}};

@interface FBAREffectsManagerXplat : NSObject<NSObject> {
  /* instance variables */
  struct shared_ptr<msqrd::logging::IRawEventLogger> { struct IRawEventLogger *__ptr_; struct __shared_weak_count *__cntrl_; } _rawEventLogger;
  struct shared_ptr<arfx::delivery::IAsyncAssetMetadataDownloading> { struct IAsyncAssetMetadataDownloading *__ptr_; struct __shared_weak_count *__cntrl_; } _asyncAssetMetadataDownloader;
  NSObject<FBARAnalyticsLogging> *_analyticsLogger;
  int _nmlmlMinVersionTranslationOption;
  NSObject<SparkARFLMConsentManager> *_flmConsentManager;
  BOOL _isNMLMLEffectFilteringEnabled;
}

@property (readonly, nonatomic) struct shared_ptr<arfx::delivery::IEffectsManager> { struct IEffectsManager * x0; struct __shared_weak_count * x1; } effectsManager;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithEffectsManager:(struct shared_ref<arfx::delivery::IEffectsManager> { struct shared_ptr<arfx::delivery::IEffectsManager> { struct IEffectsManager * x0; struct __shared_weak_count * x1; } x0; })manager analyticsLogger:(id)logger asyncAssetMetadataDownloader:(struct shared_ptr<arfx::delivery::IAsyncAssetMetadataDownloading> { struct IAsyncAssetMetadataDownloading * x0; struct __shared_weak_count * x1; })downloader nmlmlMinVersionTranslationOption:(int)option flmConsentManager:(id)manager isNMLMLEffectFilteringEnabled:(BOOL)enabled;
- (id)fetchEffectWithDependencies:(const void *)dependencies loggingInfo:(id)info priority:(int)priority callbackQueue:(id)queue progressCallback:(id /* block */)callback completionCallback:(id /* block */)callback;
- (id)fetchEffectWithDependenciesBatch:(const void *)batch priority:(int)priority callbackQueue:(id)queue completionCallback:(id /* block */)callback;
- (id)fetchAsyncAssetByFBID:(const void *)fbid effectID:(const void *)id priority:(int)priority loggingInfo:(id)info callbackQueue:(id)queue progressCallback:(id /* block */)callback completionCallback:(id /* block */)callback;
- (id)fetchAsyncAssetIfAvailable:(const void *)available effectID:(const void *)id priority:(int)priority loggingInfo:(id)info callbackQueue:(id)queue progressCallback:(id /* block */)callback completionCallback:(id /* block */)callback;
- (id)fetchAsyncAssetMetadata:(const void *)metadata effectID:(const void *)id callbackQueue:(id)queue completionCallback:(id /* block */)callback;
- (id)fetchScriptingPackageWithPriority:(int)priority loggingInfo:(id)info callbackQueue:(id)queue completionCallback:(id /* block */)callback;
- (id)fetch3DObject:(const struct AR3DObjectModel *)dobject loggingInfo:(id)info priority:(int)priority callbackQueue:(id)queue progressCallback:(id /* block */)callback completionCallback:(id /* block */)callback;
- (void)isEffectDownloaded:(const void *)downloaded loggingInfo:(id)info callbackQueue:(id)queue completionCallback:(id /* block */)callback;
- (void)abortAllPendingLoggingEvents;
- (void)removeCachedEffect:(const void *)effect completionCallback:(id /* block */)callback;
@end

#endif /* FBAREffectsManagerXplat_h */
