//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGLContext_h
#define IGLContext_h
@import Foundation;

#include "FBCCPixelBufferPoolCache.h"
#include "IGLSurfaceFactory.h"

@class EAGLContext;
@protocol OS_dispatch_queue, {shared_ptr<igl::ICommandQueue>="__ptr_"^{ICommandQueue}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<igl::IDevice>="__ptr_"^{IDevice}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::filterkit::IFilterFactory>="__ptr_"^{IFilterFactory}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::resourceloader::IResourceLoader>="__ptr_"^{IResourceLoader}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::resourceloader::ResourcePool>="__ptr_"^{ResourcePool}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<iglu::resourceloader::ios::ResourceLoader>="__ptr_"^{ResourceLoader}"__cntrl_"^{__shared_weak_count}};

@interface IGLContext : NSObject {
  /* instance variables */
  struct recursive_mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _mutex;
  NSObject<OS_dispatch_queue> *_dispatchQueue;
  struct shared_ptr<iglu::resourceloader::ios::ResourceLoader> { struct ResourceLoader *__ptr_; struct __shared_weak_count *__cntrl_; } _iosResourceLoader;
}

@property (readonly, nonatomic) EAGLContext *eaglContext;
@property (readonly, nonatomic) const void * device;
@property (readonly, nonatomic) const void * resourceLoader;
@property (readonly, nonatomic) const void * resourcePool;
@property (readonly, nonatomic) const void * filterFactory;
@property (readonly, nonatomic) const void * commandQueue;
@property (readonly, nonatomic) FBCCPixelBufferPoolCache *pixelBufferPoolCache;
@property (readonly, nonatomic) long long type;
@property (readonly, nonatomic) IGLSurfaceFactory *surfaceFactory;

/* class methods */
+ (id)newContextWithType:(long long)type backend:(long long)backend name:(id)name;
+ (id)_newContextWithType:(long long)type backend:(long long)backend name:(id)name eaglContext:(id)context device:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device;

/* instance methods */
- (id)_initWithDevice:(struct shared_ptr<igl::IDevice> { struct IDevice * x0; struct __shared_weak_count * x1; })device type:(long long)type resourceLoader:(struct shared_ptr<iglu::resourceloader::ios::ResourceLoader> { struct ResourceLoader * x0; struct __shared_weak_count * x1; })loader resourcePool:(struct shared_ptr<iglu::resourceloader::ResourcePool> { struct ResourcePool * x0; struct __shared_weak_count * x1; })pool surfaceFactory:(id)factory dispatchQueue:(id)queue eaglContext:(id)context;
- (void)performSync:(id /* block */)sync;
- (void)performAsync:(id /* block */)async;
- (id)createSubContextWithType:(long long)type name:(id)name;
- (id)loadImageFromTextureAsset:(const struct TextureAsset *)asset;
- (void)_performBlock:(id /* block */)block;
- (double)maxTextureSize;
- (struct CGSize { double x0; double x1; })allowedSizeMatchingAspectOf:(struct CGSize { double x0; double x1; })of;
- (void)dealloc;
@end

#endif /* IGLContext_h */
