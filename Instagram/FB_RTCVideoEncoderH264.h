//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FB_RTCVideoEncoderH264_h
#define FB_RTCVideoEncoderH264_h
@import Foundation;

#include "FB_RTCVideoCodecInfo.h"
#include "FB_RTCVideoEncoder-Protocol.h"

@class NSString;
@protocol {H264BitstreamParser="_vptr$BitstreamParser"^^?"sps_"{optional<webrtc_legacy::SpsParser::SpsState>=""(?="__null_state_"c"__val_"{SpsState="profile_idc"C"width"I"height"I"delta_pic_order_always_zero_flag"I"separate_colour_plane_flag"I"frame_mbs_only_flag"I"log2_max_frame_num"I"log2_max_pic_order_cnt_lsb"I"pic_order_cnt_type"I"max_num_ref_frames"I"vui_params_present"I"id"I"gaps_in_frame_num_value_allowed_flag"I"gaps_in_frame_num_byte_offset"Q"gaps_in_frame_num_bit_offset"Q})"__engaged_"B}"pps_"{optional<webrtc_legacy::PpsParser::PpsState>=""(?="__null_state_"c"__val_"{PpsState="bottom_field_pic_order_in_frame_present_flag"B"weighted_pred_flag"B"entropy_coding_mode_flag"B"weighted_bipred_idc"I"redundant_pic_cnt_present_flag"I"pic_init_qp_minus26"i"id"I"sps_id"I})"__engaged_"B}"last_slice_qp_delta_"{optional<int>=""(?="__null_state_"c"__val_"i)"__engaged_"B}}, {map<long long, const __CFNumber *, std::less<long long>, std::allocator<std::pair<const long long, const __CFNumber *>>>="__tree_"{__tree<std::__value_type<long long, const __CFNumber *>, std::__map_value_compare<long long, std::__value_type<long long, const __CFNumber *>, std::less<long long>>, std::allocator<std::__value_type<long long, const __CFNumber *>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<long long, const __CFNumber *>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<long long, std::__value_type<long long, const __CFNumber *>, std::less<long long>>>="__value_"Q}}}, {optional<long long>=""(?="__null_state_"c"__val_"q)"__engaged_"B}, {optional<webrtc_legacy::H264ProfileLevelId>=""(?="__null_state_"c"__val_"{H264ProfileLevelId="profile"i"level"i})"__engaged_"B}, {unique_ptr<webrtc_legacy::BitrateAdjuster, std::default_delete<webrtc_legacy::BitrateAdjuster>>="__ptr_"{__compressed_pair<webrtc_legacy::BitrateAdjuster *, std::default_delete<webrtc_legacy::BitrateAdjuster>>="__value_"^{BitrateAdjuster}}}, {vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}};

@interface FB_RTCVideoEncoderH264 : NSObject<FB_RTCVideoEncoder> {
  /* instance variables */
  FB_RTCVideoCodecInfo *_codecInfo;
  struct unique_ptr<webrtc_legacy::BitrateAdjuster, std::default_delete<webrtc_legacy::BitrateAdjuster>> { struct __compressed_pair<webrtc_legacy::BitrateAdjuster *, std::default_delete<webrtc_legacy::BitrateAdjuster>> { struct BitrateAdjuster *__value_; } __ptr_; } _bitrateAdjuster;
  unsigned int _targetBitrateBps;
  unsigned int _encoderBitrateBps;
  unsigned int _encoderFrameRate;
  unsigned int _maxAllowedFrameRate;
  unsigned long long _packetizationMode;
  struct optional<webrtc_legacy::H264ProfileLevelId> { union { char __null_state_; struct H264ProfileLevelId { int profile; int level; } __val_; } x0; BOOL __engaged_; } _profile_level_id;
  BOOL _enableRealtimeRateControl;
  int _maxAllowedFrameQP;
  int _minAllowedFrameQP;
  int _enableRealtimeResThrd;
  int _maxTemporalLayers;
  id /* block */ _callback;
  int _width;
  int _height;
  struct OpaqueVTCompressionSession * _compressionSession;
  struct __CVPixelBufferPool * _pixelBufferPool;
  unsigned long long _mode;
  struct H264BitstreamParser { undefined * *_vptr$BitstreamParser; struct optional<webrtc_legacy::SpsParser::SpsState> { union { char __null_state_; struct SpsState { unsigned char profile_idc; unsigned int width; unsigned int height; unsigned int delta_pic_order_always_zero_flag; unsigned int separate_colour_plane_flag; unsigned int frame_mbs_only_flag; unsigned int log2_max_frame_num; unsigned int log2_max_pic_order_cnt_lsb; unsigned int pic_order_cnt_type; unsigned int max_num_ref_frames; unsigned int vui_params_present; unsigned int id; unsigned int gaps_in_frame_num_value_allowed_flag; unsigned long long gaps_in_frame_num_byte_offset; unsigned long long gaps_in_frame_num_bit_offset; } __val_; } x0; BOOL __engaged_; } sps_; struct optional<webrtc_legacy::PpsParser::PpsState> { union { char __null_state_; struct PpsState { BOOL bottom_field_pic_order_in_frame_present_flag; BOOL weighted_pred_flag; BOOL entropy_coding_mode_flag; unsigned int weighted_bipred_idc; unsigned int redundant_pic_cnt_present_flag; int pic_init_qp_minus26; unsigned int id; unsigned int sps_id; } __val_; } x0; BOOL __engaged_; } pps_; struct optional<int> { union { char __null_state_; int __val_; } x0; BOOL __engaged_; } last_slice_qp_delta_; } _h264BitstreamParser;
  struct vector<unsigned char, std::allocator<unsigned char>> { char *__begin_; char *__end_; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char *__value_; } __end_cap_; } _frameScaleBuffer;
  BOOL _forceResetEncoder;
  float _dataRateLimitMultiplier;
  int _dataBWETargetRateMultiplierPct;
  int _maxKeyFrameIntervalDuration;
  int _maxKeyFrameInterval;
  BOOL _disableMaxKeyFrameInterval;
  unsigned char _tl0syncLimit;
  struct H264HeaderParser { struct va_h264_parser *parser_; struct va_h264_dpb *dpb_; } _h264Parser;
  BOOL _parseH264Header;
  BOOL _enableLtr;
  BOOL _supportsLtr;
  struct map<long long, const __CFNumber *, std::less<long long>, std::allocator<std::pair<const long long, const __CFNumber *>>> { struct __tree<std::__value_type<long long, const __CFNumber *>, std::__map_value_compare<long long, std::__value_type<long long, const __CFNumber *>, std::less<long long>>, std::allocator<std::__value_type<long long, const __CFNumber *>>> { void *__begin_node_; struct __compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<long long, const __CFNumber *>, void *>>> { struct __tree_end_node<std::__tree_node_base<void *> *> { void *__left_; } __value_; } __pair1_; struct __compressed_pair<unsigned long, std::__map_value_compare<long long, std::__value_type<long long, const __CFNumber *>, std::less<long long>>> { unsigned long long __value_; } __pair3_; } __tree_; } _ltrFrameTokens;
  struct optional<long long> { union { char __null_state_; long long __val_; } x0; BOOL __engaged_; } _latestAckedLtrPicNum;
  struct optional<long long> { union { char __null_state_; long long __val_; } x0; BOOL __engaged_; } _latestLtrToAck;
  BOOL _isLtrpframeRequired;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithCodecInfo:(id)info;
- (void)dealloc;
- (long long)startEncodeWithSettings:(id)settings numberOfCores:(int)cores;
- (void)ackLtrReceivedByReceiver:(struct __CFDictionary *)receiver;
- (long long)encode:(id)encode codecSpecificInfo:(id)info frameTypes:(id)types;
- (void)setCallback:(id /* block */)callback;
- (int)setBitrate:(unsigned int)bitrate framerate:(unsigned int)framerate;
- (long long)releaseEncoder;
- (unsigned int)pixelFormatOfFrame:(id)frame;
- (BOOL)resetCompressionSessionIfNeededWithFrame:(id)frame;
- (int)resetCompressionSessionWithPixelFormat:(unsigned int)format;
- (void)configureCompressionSession;
- (void)destroyCompressionSession;
- (id)implementationName;
- (void)setBitrateBps:(unsigned int)bps frameRate:(unsigned int)rate;
- (void)setEncoderBitrateBps:(unsigned int)bps frameRate:(unsigned int)rate;
- (void)frameWasEncoded:(int)encoded flags:(unsigned int)flags sampleBuffer:(struct opaqueCMSampleBuffer *)buffer codecSpecificInfo:(id)info width:(int)width height:(int)height renderTimeMs:(long long)ms timestamp:(unsigned int)timestamp rotation:(long long)rotation;
- (id)scalingSettings;
- (BOOL)supportsLtr;
- (void)onLtrAck:(long long)ack;
@end

#endif /* FB_RTCVideoEncoderH264_h */
