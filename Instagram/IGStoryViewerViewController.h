//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGStoryViewerViewController_h
#define IGStoryViewerViewController_h
@import Foundation;

#include "IGViewController.h"
#include "FBGNVGenericClickMetadataProvider-Protocol.h"
#include "IGActionableConfirmationToastPresenting-Protocol.h"
#include "IGAddPartnerNetworkManager.h"
#include "IGAppStoreSurfacePresenter.h"
#include "IGApplicationWillEnterForegroundCriticalEventsListener-Protocol.h"
#include "IGAudioStatusChangeListener-Protocol.h"
#include "IGBugReportingRageShakeInterceptionProtocol-Protocol.h"
#include "IGCanvasMediaPrefetchController.h"
#include "IGNotificationHandler-Protocol.h"
#include "IGPresentableStoryViewer-Protocol.h"
#include "IGScopedListener-Protocol.h"
#include "IGScreenshotObserverDelegate-Protocol.h"
#include "IGStoryAdsDeleteAdActivityAdDelegate-Protocol.h"
#include "IGStoryAdsRealTimeIntentRefreshController.h"
#include "IGStoryBloksStickerPreloadController.h"
#include "IGStoryChainingProtocol-Protocol.h"
#include "IGStoryConsumedMediaTracker.h"
#include "IGStoryDataController.h"
#include "IGStoryDataControllerPostLiveItemListener-Protocol.h"
#include "IGStoryDataControllerStoryItemListener-Protocol.h"
#include "IGStoryIntentAwareAdsInsertionController.h"
#include "IGStoryMediaPreloadController.h"
#include "IGStoryTrayDataSource-Protocol.h"
#include "IGStoryTrayDataSourceChangeListener-Protocol.h"
#include "IGStoryViewerAudioLogger.h"
#include "IGStoryViewerCollectionView.h"
#include "IGStoryViewerDataSource-Protocol.h"
#include "IGStoryViewerDelegate-Protocol.h"
#include "IGStoryViewerLaunchPerformanceLogger.h"
#include "IGStoryViewerLoggingContext.h"
#include "IGStoryViewerMultiAuthorCarouselDelegate-Protocol.h"
#include "IGStoryViewerPresentationController.h"
#include "IGStoryViewerPullDownDismissalDelegate-Protocol.h"
#include "IGStoryViewerViewControllerProtocol-Protocol.h"
#include "MAISKOverlayTransitionDelegate-Protocol.h"
#include "UIGestureRecognizerDelegate-Protocol.h"
#include "UIScrollViewDelegate-Protocol.h"
#include "_TtC12IGXAndBrowse33IGXAndBrowseIntegrationController.h"
#include "_TtP12IGXAndBrowse30IGXAndBrowseControllerDelegate_-Protocol.h"

@class IGListAdapter, IGMediaPreloaderSessionDeps, IGScrollPerfManualLogger, IGSoundStateListener, IGSponsoredSupportConfiguration, IGStoryFacebookEligibilityProvider, IGStorySeenState, IGStoryTrayViewModel, IGStoryViewSessionSeenStateManager, IGStoryViewerConfiguration, IGStoryViewerViewModel, IGUserSession, NSDate, NSDictionary, NSMutableArray, NSMutableSet, NSNumber, NSSet, NSString, UIScrollView, UIView, UIWindow;
@protocol IGAdInsertionProtocol><IGAdInsertionMediaViewTracking><IGAdPlatformStatesProviding, IGAdPlatformSponsoredItemInfoProviding><IGUnitItemInformationProviding><IGAdGapRuleEnforceable><NSCopying><IGNetworkResponseProviding, IGStoryItemType><IGUnitItemInformationProviding;

@interface IGStoryViewerViewController : IGViewController<FBGNVGenericClickMetadataProvider, IGAudioStatusChangeListener, IGScreenshotObserverDelegate, IGStoryDataControllerPostLiveItemListener, IGStoryDataControllerStoryItemListener, IGStoryTrayDataSourceChangeListener, IGActionableConfirmationToastPresenting, UIGestureRecognizerDelegate, UIScrollViewDelegate, IGBugReportingRageShakeInterceptionProtocol, IGApplicationWillEnterForegroundCriticalEventsListener, _TtP12IGXAndBrowse30IGXAndBrowseControllerDelegate_, IGStoryViewerMultiAuthorCarouselDelegate, IGPresentableStoryViewer, IGNotificationHandler, IGStoryViewerViewControllerProtocol, MAISKOverlayTransitionDelegate, IGScopedListener> {
  /* instance variables */
  IGStoryDataController *_dataController;
  NSObject<IGStoryTrayDataSource> *_trayDataSource;
  IGStoryViewerLoggingContext *_loggingContext;
  IGStoryViewerConfiguration *_configuration;
  NSObject<IGStoryViewerDataSource> *_storyViewerDataSource;
  IGStoryViewerCollectionView *_collectionView;
  UIScrollView *_dismissScrollView;
  UIView *_dimmingView;
  IGListAdapter *_listAdapter;
  BOOL _isDismissing;
  struct CGPoint { double x; double y; } _dismissScrollOffset;
  struct CGPoint { double x; double y; } _dismissCollectionViewOffset;
  double _lastScrollViewOffsetX;
  long long _dismissNavigationAction;
  NSNumber *_navigationActionOverride;
  long long _entryPoint;
  long long _entryIndex;
  BOOL _loggedInitialEntry;
  NSObject<IGStoryItemType><IGUnitItemInformationProviding> *_firstSeenStoryItem;
  NSMutableSet *_seenReelIds;
  NSObject<IGStoryItemType><IGUnitItemInformationProviding> *_focusStoryItemOnEntry;
  NSString *_focusReelPKOnEntry;
  IGStoryViewerViewModel *_focusedModelItem;
  NSMutableSet *_reelPKsFetchedWithoutYetFailing;
  NSMutableArray *_reelPKsFetchedEmpty;
  long long _lastTrayRefreshType;
  BOOL _hasAppStorePreloaded;
  IGAddPartnerNetworkManager *_addPartnerManager;
  IGSponsoredSupportConfiguration *_sponsoredSupportConfiguration;
  IGStoryConsumedMediaTracker *_consumedMediaTracker;
  UIWindow *_flexWindow;
  long long _currentlyDisplayedSectionControllerIndex;
  NSObject<IGAdInsertionProtocol><IGAdInsertionMediaViewTracking><IGAdPlatformStatesProviding> *_adInsertionHandler;
  NSObject<IGAdInsertionProtocol><IGAdInsertionMediaViewTracking><IGAdPlatformStatesProviding> *_intentAwareStoryAdInsertionHandler;
  long long _lastFirstAdPodAdInsertionIndex;
  long long _maxRenderedIndex;
  BOOL _soundManagerConsolidationEnabled;
  IGSoundStateListener *_soundStateListener;
  IGStoryViewerAudioLogger *_audioLogger;
  IGStorySeenState *_pendingSeenState;
  IGScrollPerfManualLogger *_scrollPerfLogger;
  IGStoryMediaPreloadController *_mediaPreloadController;
  IGCanvasMediaPrefetchController *_canvasMediaPreloadController;
  BOOL _hasLoggedLaunchQPL;
  BOOL _bugReportWindowPresented;
  BOOL _didEditSuggestedHighlight;
  BOOL _isTransitioningBetweenStories;
  BOOL _enableGNVGenericClick;
  BOOL _isWaitingForUserConfirmSharingInterstitial;
  BOOL _isShowingFullscreenNux;
  IGStoryViewerViewModel *_enteringViewerViewModel;
  IGStoryBloksStickerPreloadController *_bloksPreloadController;
  IGStoryFacebookEligibilityProvider *_fbEligibilityProvider;
  IGStoryViewerLaunchPerformanceLogger *_perfLogger;
  BOOL _viewDidAppear;
  double _swipeVelocityThresholdAd;
  double _swipeVelocityThresholdOrganic;
  double _swipeDistanceThresholdAd;
  double _swipeDistanceThresholdOrganic;
  double _swipeCancelVelocityThreshold;
  long long _minRamGbForSwipeOptimization;
  id /* block */ _bloksActionOnAppear;
  NSDate *_vcCreationTimestamp;
  NSString *_moduleType;
  NSObject<IGStoryAdsDeleteAdActivityAdDelegate> *_adActivityDelegate;
  IGStoryIntentAwareAdsInsertionController *_storyIntentAwareAdsInsertionController;
  IGStoryAdsRealTimeIntentRefreshController *_storyAdsRealTimeIntentRefreshController;
  BOOL _shouldFadeStoryBackgroundWhenDraggingDownForDismissal;
  IGStoryViewerPresentationController *_presentationController;
  IGMediaPreloaderSessionDeps *_mediaPreloaderSessionDeps;
  BOOL _didAttemptSurveyFetch;
  NSMutableSet *_integrationPointsAttempted;
  IGAppStoreSurfacePresenter *_appStoreSurfacePresenter;
  NSSet *_storyGrowthNotificationExperimentsPushCategories;
  _TtC12IGXAndBrowse33IGXAndBrowseIntegrationController *_xAndBrowseIntegrationController;
  long long _currentBrowserState;
  long long _prefetchMaxBatchSize;
  BOOL _collectionViewContentSizeResetNeeded;
  struct CGSize { double width; double height; } _contentSizePriorToScrollLimit;
  BOOL _useDataStore;
  long long _preloadDistance;
  BOOL _skipVPVDOnInterstitialEnabled;
  NSObject<IGStoryChainingProtocol> *_storyChainingProtocol;
  NSSet *_userPKsToExcludeFromChainingFetch;
}

@property (readonly, nonatomic) IGUserSession *userSession;
@property (readonly, nonatomic) IGStoryViewerViewModel *currentViewModel;
@property (weak, nonatomic) NSObject<IGStoryViewerDelegate> *delegate;
@property (weak, nonatomic) NSObject<IGStoryViewerPullDownDismissalDelegate> *storyPulldownDismissalDelegate;
@property (readonly, copy, nonatomic) NSString *previousPlayedReelPK;
@property (readonly, nonatomic) BOOL mutedInViewer;
@property (readonly, nonatomic) BOOL unmutedInViewer;
@property (readonly, nonatomic) BOOL unfollowedInViewer;
@property (nonatomic) BOOL isEligibleForPagination;
@property (retain, nonatomic) IGStoryTrayViewModel *enteringTrayViewModel;
@property (retain, nonatomic) NSObject<IGAdPlatformSponsoredItemInfoProviding><IGUnitItemInformationProviding><IGAdGapRuleEnforceable><NSCopying><IGNetworkResponseProviding> *hp0SponsoredItem;
@property (readonly, nonatomic) NSString *sessionId;
@property (readonly, nonatomic) IGStoryViewSessionSeenStateManager *viewingSessionSeenStateManager;
@property (nonatomic) double startingTime;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) UIView *profileImageViewForAnimation;
@property (readonly, nonatomic) UIView *contentViewForAnimation;
@property (readonly, nonatomic) UIView *contentViewForSnapshot;
@property (readonly, nonatomic) UIView *backgroundViewForAnimation;
@property (readonly, copy, nonatomic) NSString *viewModelIdentifier;
@property (readonly, nonatomic) NSDictionary *magicMoveSubviews;

/* instance methods */
- (id)initWithUserSession:(id)session viewModels:(id)models currentViewModel:(id)model dataController:(id)controller trayDataSource:(id)source storyViewerDataSource:(id)source loggingContext:(id)context entryPoint:(long long)point delegate:(id)delegate isStoryOverviewControllerEnabled:(BOOL)enabled storyChainingProtocol:(id)protocol configuration:(id)configuration perfLogger:(id)logger deleteAdActivityAdDelegate:(id)delegate;
- (void)dealloc;
- (void)applicationWillEnterForegroundListener;
- (void)_appDidBecomeActive:(id)active;
- (void)_appWillResignActive:(id)active;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (unsigned long long)notificationPresentationPermissionsForNotificationSource:(unsigned long long)source;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewWillDisappear:(BOOL)disappear;
- (void)viewDidDisappear:(BOOL)disappear;
- (void)viewDidAppear:(BOOL)appear;
- (BOOL)prefersStatusBarHidden;
- (long long)preferredStatusBarStyle;
- (BOOL)prefersNavigationBarHidden;
- (long long)preferredTabBarBehavior;
- (void)screenshotObserverDidSeeScreenshotTaken:(id)taken;
- (void)screenshotObserverDidSeeActiveScreenCapture:(id)capture event:(long long)event;
- (void)storyTrayDataSourceWillUpdate:(id)update;
- (void)storyTrayDataSource:(id)source didUpdateReel:(id)reel positionChanged:(BOOL)changed;
- (void)storyTrayDataSource:(id)source didUpdateWithRefreshType:(long long)type deliveryLoggingKey:(id)key;
- (void)storyTrayDataSource:(id)source updateFailedWithRefreshType:(long long)type error:(id)error;
- (void)refreshTraySectionControllerWithStoryAdItems:(id)items;
- (void)storyDataController:(id)controller didUpdateReel:(id)reel refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller fetchItemsDidFailForReelPK:(id)pk error:(id)error refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller didReturnNoStoryItemResultsForReelPK:(id)pk refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller didUpdatePostLiveItem:(id)item updateDuration:(double)duration;
- (void)storyDataController:(id)controller didDeletePostLiveItem:(id)item updateDuration:(double)duration;
- (void)storyDataController:(id)controller fetchPostLiveItemsDidFailWithError:(id)error refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller didReturnNoPostLiveItemResultsForUserPK:(id)pk updateDuration:(double)duration;
- (void)adInsertionHandler:(id)handler shouldTryToInsertSponsoredItem:(id)item atInsertionIndex:(long long)index focusedIndex:(long long)index validationResultString:(id)string insertionContext:(id)context;
- (void)adPlatformDidDeliverSponsoredItem:(id)item atAdRequestIndex:(long long)index;
- (void)optimisticPrefetchMediaForSponsoredItem:(id)item;
- (void)moveSponsoredItemFromIndex:(unsigned long long)index toIndex:(unsigned long long)index;
- (void)handleNilSponsoredItem;
- (BOOL)deleteInsertedSponsoredItem:(id)item;
- (BOOL)isReenteredActiveSession;
- (void)receivedSponsoredItems:(id)items;
- (void)adPlatformDidCompleteAdsFetch;
- (long long)adInsertionSurfaceEntryIndex;
- (long long)focusedIndexforInsertion;
- (long long)adInsertionCurrentPageIndex;
- (long long)currentMaxRenderedIndex;
- (struct _NSRange { unsigned long long x0; unsigned long long x1; })rangeOfMoveableItems;
- (BOOL)isScrolling;
- (BOOL)isPTRSession;
- (long long)lastSeenSponsoredItemIndexWithItemType:(unsigned long long)type currentIndex:(long long)index;
- (long long)lastFirstAdPodAdInsertionIndex;
- (id)adPlatformAnalyticsModule;
- (id)createSurfaceAdRequestParams;
- (id)allSurfaceDataSourceItems;
- (long long)indexOfSponsoredItem:(id)item;
- (BOOL)surfaceSupportsAd;
- (id)surfaceFlexibleDataDict;
- (id)consumedMediaTracker;
- (id)allNonSponsoredItems;
- (id)allSponsoredItems;
- (id)adPlatformSurfaceLoggingExtraForSponsoredItem:(id)item;
- (void)fullscreenSectionControllerEndFlow:(id)flow;
- (void)fullscreenSectionController:(id)controller willDisplayStoryModel:(id)model;
- (void)fullscreenSectionController:(id)controller didDisplayStoryModel:(id)model;
- (void)fullscreenSectionController:(id)controller willDisplayFullscreenCell:(id)cell;
- (void)fullscreenSectionController:(id)controller didUpdateFromStoryModel:(id)model toStoryModel:(id)model storyItem:(id)item;
- (void)fullscreenSectionController:(id)controller didNavFromStoryItem:(id)item toStoryItem:(id)item story:(id)story navAction:(long long)action;
- (void)fullscreenSectionController:(id)controller didTapStoryTrayViewModel:(id)model withChannelDataSource:(id)source;
- (BOOL)fullscreenSectionControllerCanResumePlayback:(id)playback;
- (void)fullscreenSectionControllerDidDismissOverlayView:(id)view;
- (BOOL)fullscreenSectionController:(id)controller shouldDisplayGestureNuxAtStoryItem:(id)item story:(id)story;
- (void)fullscreenSectionController:(id)controller willStartMediaFetchForStoryItem:(id)item;
- (void)fullscreenSectionController:(id)controller didFinishMediaFetchForStoryItem:(id)item;
- (void)fullscreenSectionController:(id)controller didFailMediaFetchForStoryItem:(id)item errorMessage:(id)message;
- (void)fullscreenSectionController:(id)controller didStartToProgressWithStoryItem:(id)item;
- (void)fullscreenSectionControllerMediaViewDidPlayToEnd;
- (void)fullscreenSectionController:(id)controller didAdvancePastLastItemWithNavigationAction:(long long)action;
- (void)fullscreenSectionController:(id)controller didRewindPastFirstItemWithNavigationAction:(long long)action;
- (void)fullscreenSectionControllerDidTapDismiss:(id)dismiss;
- (void)fullscreenSectionControllerDidLongPress:(id)press;
- (void)fullscreenSectionControllerDidTapRetry:(id)retry;
- (void)fullscreenSectionController:(id)controller didMarkItemAsSeen:(id)seen;
- (void)fullscreenSectionController:(id)controller didMarkStoryViewModelAsHidden:(id)hidden showAlertMessage:(BOOL)message isCarouselPopup:(BOOL)popup;
- (void)fullscreenSectionController:(id)controller didMarkStoryItemAsHiddenAtArrayIndex:(long long)index withViewModel:(id)model showAlertMessage:(BOOL)message;
- (void)fullscreenSectionControllerDidTapEmptyStoryBadge:(id)badge;
- (void)fullscreenSectionControllerDidTapActionableInsightsTip:(id)tip;
- (void)fullscreenSectionControllerDidTapInternalStickerReshare:(id)reshare;
- (void)fullscreenSectionControllerDidTapSharedListReshare:(id)reshare sharedList:(id)list fromStoryOverview:(BOOL)overview;
- (void)fullscreenSectionControllerDidTapPromptStickerReshare:(id)reshare promptStickerModel:(id)model isFromParticipantList:(BOOL)list;
- (void)fullscreenSectionControllerDidTapGroupMentionStickerAddStory:(id)story groupMentionStickerModel:(id)model isFromUserListBottomSheet:(BOOL)sheet;
- (void)fullscreenSectionController:(id)controller didMuteWithViewModel:(id)model;
- (void)fullscreenSectionController:(id)controller didAllowSponsorPartnerToBoost:(BOOL)boost withUser:(id)user;
- (void)fullscreenSectionController:(id)controller didAddSponsorPartner:(id)partner didAllowSponsorPartnerToBoost:(BOOL)boost;
- (void)fullscreenSectionController:(id)controller didRemoveSponsorPartner:(id)partner didAllowSponsorPartnerToBoost:(BOOL)boost;
- (void)fullscreenSectionController:(id)controller didReplaceSponsorPartner:(id)partner newUser:(id)user didAllowSponsorPartnerToBoost:(BOOL)boost;
- (void)fullscreenSectionControllerDidDisplayFullscreenNux:(id)nux;
- (void)fullscreenSectionControllerDidDismissFullscreenNux:(id)nux;
- (void)fullscreenSectionController:(id)controller didPublishSuggestedHighlightWithNavigationAction:(long long)action;
- (void)fullscreenSectionControllerDidEditSuggestedHighlight:(id)highlight addedItems:(id)items removedItems:(id)items title:(id)title coverModel:(id)model;
- (void)fullscreenSectionController:(id)controller didRemoveSuggestedHighlightWithPK:(id)pk;
- (void)fullscreenSectionController:(id)controller didUpdateSundialModel:(id)model;
- (void)fullscreenSectionControllerDidEndDisplaying:(id)displaying;
- (BOOL)fullscreenSectionControllerIsTransitioning:(id)transitioning;
- (void)fullscreenSectionController:(id)controller didActionOnNuxStoryItem:(id)item story:(id)story;
- (void)fullscreenSectionController:(id)controller willDisplayProgressView:(id)view;
- (BOOL)fullscreenSectionControllerIsDisplayingFirstReelInInventory:(id)inventory;
- (BOOL)fullscreenSectionController:(id)controller needsInitialStickyFooterConfigurationForReelPk:(id)pk;
- (BOOL)fullscreenSectionControllerShouldPresentCamera:(id)camera;
- (void)fullscreenSectionControllerDidTapTryIt:(id)it onEffectWithID:(id)id effectName:(id)name effectIconURL:(id)url;
- (void)fullscreenSectionControllerDidTapViewDay:(id)day;
- (void)fullscreenSectionControllerDidMuteUser:(id)user shouldMute:(BOOL)mute selectedChangePostsMuteStatus:(BOOL)status;
- (void)fullscreenSectionControllerDidMuteFanClubStoriesTeaser;
- (void)fullscreenSectionControllerDidUnfollowUser:(id)user;
- (void)fullscreenSectionControllerDidFollowUser:(id)user;
- (void)fullscreenSectionControllerDidTapStoryCreationUpsellCreateStory:(id)story;
- (void)fullscreenSectionControllerDidTapStoryCreationUpsellProfilePicture:(id)picture;
- (void)fullscreenSectionController:(id)controller didSetPanGestureEnabled:(BOOL)enabled;
- (void)fullscreenSectionController:(id)controller mediaViewDidSetAudioEnabled:(BOOL)enabled;
- (void)fullscreenSectionControllerShouldExecuteBloksActionOnAppear:(id)appear bloksActionOnAppear:(id /* block */)appear;
- (void)fullscreenSectionControlleDidTapPolaroidTryIt:(id)it;
- (void)fullscreenSectionControllerShouldDisableScrolling:(id)scrolling;
- (void)fullscreenSectionControllerShouldEnableScrolling:(id)scrolling;
- (void)fullscreenSectionControllerUpdateBrowserToState:(id)state withReason:(unsigned long long)reason;
- (void)hideStoryItemAtMACIndex:(long long)macindex;
- (void)_hideStoryItemAtMACIndex:(long long)macindex onFullscreenSectionController:(id)controller withViewModel:(id)model showAlertMessage:(BOOL)message shouldNavigateToNextStoryAfterHide:(BOOL)hide;
- (void)fullscreenSectionControllerDidSyncContacts:(id)contacts;
- (BOOL)fullscreenSectionControllerShouldDisplayDuringDelayedSkipAd:(id)ad;
- (BOOL)isAudioEnabledByDefaultForStoryViewerDataSource;
- (id)sectionLoggingContextForStory:(id)story storyItem:(id)item;
- (id)allStoryViewerViewModels;
- (id)allTrayReelViewModels;
- (long long)entryIndex;
- (long long)currentPageIndex;
- (double)storyViewerCollectionViewLayout:(id)layout dimmingPercentForItemAtIndexPath:(id)path proposedDimmingPercent:(double)percent;
- (BOOL)accessibilityScroll:(long long)scroll;
- (void)scrollViewWillBeginDragging:(id)dragging;
- (void)scrollViewDidScroll:(id)scroll;
- (void)scrollViewWillEndDragging:(id)dragging withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(inout struct CGPoint *)offset;
- (void)scrollViewDidEndDragging:(id)dragging willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidEndDecelerating:(id)decelerating;
- (void)scrollViewDidEndScrollingAnimation:(id)animation;
- (void)_handleBugReportWindowPresented;
- (void)_handleBugReportWindowDismissed;
- (id)currentStoryItem;
- (void)tryResumePlayback;
- (void)pauseWithReason:(long long)reason;
- (void)dismissWithNavAction:(long long)action;
- (void)enumerateVisibleStoryControllersWithBlock:(id /* block */)block;
- (BOOL)_delaySkippingAd;
- (BOOL)shouldZoomToTransition;
- (id)transitionZoomViewToItem:(id)item withZoomContext:(id)context;
- (id)transitionZoomItemOverrideOnExit;
- (void)prepareForwardZoomTransitionWithContext:(id)context completionHandler:(id /* block */)handler;
- (void)didCompleteForwardZoomTransition;
- (void)zoomTransitionWillPrepareWithContext:(id)context;
- (void)zoomTransitionWillBeginWithContext:(id)context;
- (void)soundListenerDidUpdate:(id)update audioStatusChangeReason:(long long)reason;
- (void)soundListenerDidSetStickySoundState:(id)state;
- (void)audioStatusDidChangeIsAudioEnabled:(BOOL)enabled forReason:(long long)reason;
- (BOOL)gestureRecognizer:(id)recognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)recognizer;
- (BOOL)gestureRecognizer:(id)recognizer shouldReceiveTouch:(id)touch;
- (BOOL)gestureRecognizer:(id)recognizer shouldBeRequiredToFailByGestureRecognizer:(id)recognizer;
- (void)storyChainingListener:(id)listener didLoadReels:(id)reels deliveryLoggingKey:(id)key;
- (void)storyChainingListener:(id)listener didFailLoadReelsWithErrorMessage:(id)message;
- (void)storyInterstitialViewUserConfirm:(id)confirm;
- (BOOL)isWaitingForUserConfirmSharingInterstitial;
- (void)storyViewerFullScreenLatelyNuxViewDidTapView:(id)view;
- (void)storyViewerFullScreenLatelyNuxViewDidTapNotNow:(id)now;
- (double)actionableConfirmationToastBottomPadding;
- (double)actionableConfirmationToastTopPadding;
- (id)getCurrentStoryItem:(id)item;
- (void)didDeleteStoryReelWithPK:(id)pk;
- (id)analyticsModule;
- (id)analyticsExtras;
- (id)analyticsModuleUniqueIndex;
- (id)contentMetadata;
- (BOOL)shouldPerformActionInsteadOfReportingForRageShakeInterval:(double)interval;
- (id /* block */)actionToPerformOnRageShake;
- (void)maiSKOverlayWillStartPresentation:(id)presentation;
- (void)maiSKOverlayDidFinishDismissal:(id)dismissal;
- (void)xAndBrowseControllerDidUpdateBrowserState:(long long)state browserTop:(double)top;
- (void)xAndBrowseControllerDidDismissBrowser;
- (void)xAndBrowseControllerDidTapXButtonOnBrowser;
- (void)xAndBrowseControllerDidBeginDragOnBrowser;
- (void)xAndBrowseControllerDidEndDragOnBrowser;
- (id)_getModelItems;
- (void)_setModelItems:(id)items;
- (void)_announceGnvVirtualNav;
@end

#endif /* IGStoryViewerViewController_h */
