//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef TorchModule_h
#define TorchModule_h
@import Foundation;

@protocol {Module="object_"{intrusive_ptr<c10::ivalue::Object, c10::detail::intrusive_target_default_null_type<c10::ivalue::Object>>="target_"^{Object}}"metadata_"{unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>>="__table_"{__hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}"cu_"{shared_ptr<torch::jit::mobile::CompilationUnit>="__ptr_"^{CompilationUnit}"__cntrl_"^{__shared_weak_count}}"debug_table_"{MobileDebugTable="callstack_ptr_map_"{flat_hash_map<long long, std::tuple<torch::jit::SourceRange, std::string, c10::intrusive_ptr<torch::jit::InlinedCallStack>>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<long long, std::tuple<torch::jit::SourceRange, std::string, c10::intrusive_ptr<torch::jit::InlinedCallStack>>>>>="entries"^v"num_slots_minus_one"Q"hash_policy"{fibonacci_hash_policy="shift"c}"max_lookups"c"_max_load_factor"f"num_elements"Q}}"has_debug_handles_"B"min_operator_version_"q"bytecode_version_"q"mem_to_delete_"{shared_ptr<char>="__ptr_"*"__cntrl_"^{__shared_weak_count}}};

@interface TorchModule : NSObject {
  /* instance variables */
  struct Module { struct intrusive_ptr<c10::ivalue::Object, c10::detail::intrusive_target_default_null_type<c10::ivalue::Object>> { struct Object *target_; } object_; struct unordered_map<std::string, std::string, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::string>>> { struct __hash_table<std::__hash_value_type<std::string, std::string>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::string>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::string>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::string>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::string>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } metadata_; struct shared_ptr<torch::jit::mobile::CompilationUnit> { struct CompilationUnit *__ptr_; struct __shared_weak_count *__cntrl_; } cu_; struct MobileDebugTable { struct flat_hash_map<long long, std::tuple<torch::jit::SourceRange, std::string, c10::intrusive_ptr<torch::jit::InlinedCallStack>>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<long long, std::tuple<torch::jit::SourceRange, std::string, c10::intrusive_ptr<torch::jit::InlinedCallStack>>>>> { void *entries; unsigned long long num_slots_minus_one; struct fibonacci_hash_policy { char shift; } hash_policy; char max_lookups; float _max_load_factor; unsigned long long num_elements; } callstack_ptr_map_; } debug_table_; BOOL has_debug_handles_; long long min_operator_version_; long long bytecode_version_; struct shared_ptr<char> { char *__ptr_; struct __shared_weak_count *__cntrl_; } mem_to_delete_; } _module;
}

/* instance methods */
- (id)initWithFileAtPath:(id)path;
@end

#endif /* TorchModule_h */
