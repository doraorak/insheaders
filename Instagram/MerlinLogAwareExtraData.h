//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef MerlinLogAwareExtraData_h
#define MerlinLogAwareExtraData_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSDictionary, NSString;
@protocol {unique_ptr<StructuredLogger::MerlinSecondChannelIgExtraPayloadType, std::default_delete<StructuredLogger::MerlinSecondChannelIgExtraPayloadType>>="__ptr_"{__compressed_pair<StructuredLogger::MerlinSecondChannelIgExtraPayloadType *, std::default_delete<StructuredLogger::MerlinSecondChannelIgExtraPayloadType>>="__value_"^{MerlinSecondChannelIgExtraPayloadType}}}, {unique_ptr<StructuredLogger::MerlinUnifiedProtocolEventPayloadType, std::default_delete<StructuredLogger::MerlinUnifiedProtocolEventPayloadType>>="__ptr_"{__compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadType *, std::default_delete<StructuredLogger::MerlinUnifiedProtocolEventPayloadType>>="__value_"^{MerlinUnifiedProtocolEventPayloadType}}};

@interface MerlinLogAwareExtraData : NSObject<NSObject> {
  /* instance variables */
  struct unique_ptr<StructuredLogger::MerlinSecondChannelIgExtraPayloadType, std::default_delete<StructuredLogger::MerlinSecondChannelIgExtraPayloadType>> { struct __compressed_pair<StructuredLogger::MerlinSecondChannelIgExtraPayloadType *, std::default_delete<StructuredLogger::MerlinSecondChannelIgExtraPayloadType>> { struct MerlinSecondChannelIgExtraPayloadType *__value_; } __ptr_; } _igExtraPayloadPtr;
  struct unique_ptr<StructuredLogger::MerlinUnifiedProtocolEventPayloadType, std::default_delete<StructuredLogger::MerlinUnifiedProtocolEventPayloadType>> { struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadType *, std::default_delete<StructuredLogger::MerlinUnifiedProtocolEventPayloadType>> { struct MerlinUnifiedProtocolEventPayloadType *__value_; } __ptr_; } _primaryEventPayloadPtr;
}

@property (readonly, nonatomic) NSString *tracking;
@property (readonly, nonatomic) NSString *adId;
@property (readonly, nonatomic) NSString *trackingToken;
@property (readonly, nonatomic) BOOL isSponsored;
@property (retain, nonatomic) NSString *navChain;
@property (readonly, nonatomic) NSDictionary *extraData;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithTracking:(id)tracking adId:(id)id trackingToken:(id)token isSponsored:(BOOL)sponsored navChain:(id)chain extraData:(id)data;
- (BOOL)igExtraPayloadExists;
- (struct MerlinSecondChannelIgExtraPayloadType { struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; })igExtraPayload;
- (BOOL)primaryEventPayloadExists;
- (struct MerlinUnifiedProtocolEventPayloadType { id x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; id x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; id x15; id x16; id x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; id x23; id x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; id x30; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x31; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x32; id x33; id x34; id x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; id x37; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x43; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x44; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x45; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x46; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x47; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x48; id x49; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x53; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x54; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x55; id x56; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x57; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x58; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x59; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x60; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x61; id x62; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x63; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x64; id x65; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x66; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x67; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x68; id x69; id x70; id x71; struct optional<std::vector<std::unordered_map<std::string, std::string>>> { union { char x0; struct vector<std::unordered_map<std::string, std::string>, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; void * x1; struct __compressed_pair<std::unordered_map<std::string, std::string> *, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; } x2; } x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; id x74; id x75; struct optional<StructuredLogger::IgshoppingcollectionslogginginfoType> { union { char x0; struct IgshoppingcollectionslogginginfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x76; id x77; id x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x80; id x81; id x82; id x83; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x84; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x85; id x86; id x87; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x88; id x89; id x90; id x91; id x92; id x93; id x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; id x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x101; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x102; id x103; id x104; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x105; id x106; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x121; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x122; id x123; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x124; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x125; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x126; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x127; id x128; id x129; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x130; id x131; id x132; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x133; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x134; id x135; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x136; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x137; id x138; id x139; id x140; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x141; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x142; id x143; id x144; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x145; id x146; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x147; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x148; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x149; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x150; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x151; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x152; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x153; id x154; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x155; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x156; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x157; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x158; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x159; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x160; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x161; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x162; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x163; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x164; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x165; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x166; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x167; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x168; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x169; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x170; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x171; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x172; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x173; id x174; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x175; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x176; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x177; id x178; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x179; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x180; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x181; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x182; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x183; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x184; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x185; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x186; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x187; id x188; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x189; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x190; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x191; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x192; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x193; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x194; id x195; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x196; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x197; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x198; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x199; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x200; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x201; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x202; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x203; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x204; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x205; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x0; } x2; } x1; } x0; BOOL x1; } x12; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x22; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x23; id x24; id x25; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x30; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x33; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x34; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x37; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x42; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x43; id x44; } x1; } x0; BOOL x1; } x206; id x207; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x208; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x209; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x210; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x211; id x212; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x213; id x214; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x215; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x216; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x217; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x218; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x219; id x220; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x221; id x222; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x223; id x224; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x225; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x226; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x227; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x228; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x229; id x230; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x231; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x232; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x233; id x234; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x235; id x236; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x237; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x238; id x239; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x240; id x241; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x242; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x243; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x244; id x245; id x246; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x247; id x248; id x249; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x250; id x251; id x252; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x253; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x254; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x255; id x256; id x257; id x258; id x259; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x260; id x261; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x262; id x263; id x264; struct optional<std::unordered_map<long long, std::vector<long long>>> { union { char x0; struct unordered_map<long long, std::vector<long long>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, std::vector<long long>>>> { struct __hash_table<std::__hash_value_type<long long, std::vector<long long>>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, std::vector<long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x265; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x266; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; id x6; } x1; } x0; BOOL x1; } x267; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x268; id x269; id x270; id x271; id x272; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x273; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x274; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x275; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x276; id x277; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x278; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x279; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x280; id x281; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x282; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x283; id x284; id x285; id x286; id x287; id x288; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x289; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x290; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x291; id x292; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x293; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x294; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x295; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x296; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x297; id x298; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x299; id x300; id x301; id x302; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionShoppingStickerInfoType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionShoppingStickerInfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; id x3; id x4; } x1; } x0; BOOL x1; } x303; id x304; id x305; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x306; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x307; id x308; id x309; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x310; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x311; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x312; id x313; id x314; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x315; id x316; id x317; id x318; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x319; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x320; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x321; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x322; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x323; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutType { struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutCtaTextType { double x0; double x1; double x2; id x3; double x4; } x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutMoreOptionsButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutMoreOptionsButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutReshareButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutReshareButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x2; } x1; } x0; BOOL x1; } x324; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x325; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x326; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x327; id x328; id x329; id x330; id x331; id x332; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x333; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x334; id x335; id x336; id x337; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x338; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x339; id x340; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x341; id x342; id x343; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x344; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x345; id x346; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x347; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; id x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; id x15; id x16; id x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; id x23; id x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; id x30; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x31; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x32; id x33; id x34; id x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; id x37; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x43; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x44; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x45; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x46; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x47; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x48; id x49; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x53; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x54; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x55; id x56; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x57; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x58; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x59; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x60; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x61; id x62; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x63; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x64; id x65; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x66; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x67; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x68; id x69; id x70; id x71; struct optional<std::vector<std::unordered_map<std::string, std::string>>> { union { char x0; struct vector<std::unordered_map<std::string, std::string>, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; void * x1; struct __compressed_pair<std::unordered_map<std::string, std::string> *, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; } x2; } x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; id x74; id x75; struct optional<StructuredLogger::IgshoppingcollectionslogginginfoType> { union { char x0; struct IgshoppingcollectionslogginginfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x76; id x77; id x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x80; id x81; id x82; id x83; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x84; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x85; id x86; id x87; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x88; id x89; id x90; id x91; id x92; id x93; id x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; id x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x101; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x102; id x103; id x104; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x105; id x106; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x121; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x122; id x123; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x124; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x125; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x126; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x127; id x128; id x129; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x130; id x131; id x132; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x133; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x134; id x135; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x136; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x137; id x138; id x139; id x140; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x141; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x142; id x143; id x144; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x145; id x146; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x147; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x148; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x149; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x150; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x151; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x152; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x153; id x154; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x155; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x156; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x157; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x158; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x159; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x160; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x161; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x162; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x163; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x164; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x165; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x166; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x167; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x168; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x169; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x170; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x171; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x172; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x173; id x174; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x175; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x176; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x177; id x178; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x179; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x180; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x181; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x182; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x183; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x184; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x185; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x186; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x187; id x188; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x189; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x190; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x191; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x192; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x193; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x194; id x195; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x196; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x197; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x198; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x199; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x200; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x201; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x202; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x203; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x204; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x205; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x0; } x2; } x1; } x0; BOOL x1; } x12; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x22; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x23; id x24; id x25; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x30; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x33; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x34; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x37; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x42; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x43; id x44; } x1; } x0; BOOL x1; } x206; id x207; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x208; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x209; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x210; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x211; id x212; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x213; id x214; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x215; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x216; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x217; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x218; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x219; id x220; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x221; id x222; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x223; id x224; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x225; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x226; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x227; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x228; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x229; id x230; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x231; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x232; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x233; id x234; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x235; id x236; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x237; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x238; id x239; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x240; id x241; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x242; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x243; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x244; id x245; id x246; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x247; id x248; id x249; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x250; id x251; id x252; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x253; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x254; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x255; id x256; id x257; id x258; id x259; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x260; id x261; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x262; id x263; id x264; struct optional<std::unordered_map<long long, std::vector<long long>>> { union { char x0; struct unordered_map<long long, std::vector<long long>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, std::vector<long long>>>> { struct __hash_table<std::__hash_value_type<long long, std::vector<long long>>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, std::vector<long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x265; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x266; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; id x6; } x1; } x0; BOOL x1; } x267; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x268; id x269; id x270; id x271; id x272; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x273; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x274; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x275; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x276; id x277; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x278; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x279; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x280; id x281; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x282; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x283; id x284; id x285; id x286; id x287; id x288; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x289; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x290; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x291; id x292; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x293; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x294; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x295; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x296; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x297; id x298; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x299; id x300; id x301; id x302; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionShoppingStickerInfoType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionShoppingStickerInfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; id x3; id x4; } x1; } x0; BOOL x1; } x303; id x304; id x305; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x306; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x307; id x308; id x309; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x310; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x311; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x312; id x313; id x314; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x315; id x316; id x317; id x318; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x319; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x320; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x321; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x322; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x323; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutType { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutCtaTextType { double x0; double x1; double x2; id x3; double x4; } x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutMoreOptionsButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutMoreOptionsButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutReshareButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutReshareButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x2; } x1; } x0; BOOL x1; } x324; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x325; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x326; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x327; id x328; id x329; id x330; id x331; id x332; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x333; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x334; id x335; id x336; id x337; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x338; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x339; id x340; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x341; id x342; id x343; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x344; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x345; id x346; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x347; } x1; } x0; BOOL x1; } x2; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; id x5; id x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x8; id x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; id x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x23; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; id x26; id x27; id x28; id x29; id x30; id x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x33; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x34; id x35; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x36; id x37; id x38; id x39; id x40; id x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x43; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x44; id x45; id x46; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x47; id x48; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x49; id x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<StructuredLogger::InstagramisaudiomutedtypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x53; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x54; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x55; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x56; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x57; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x58; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x59; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x60; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x61; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x62; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x63; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x64; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x65; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x66; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x67; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x68; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x69; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x70; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x71; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x74; id x75; id x76; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x77; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x80; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x81; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x82; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x83; id x84; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x85; id x86; id x87; id x88; id x89; id x90; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x91; id x92; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x93; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; id x101; id x102; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x103; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x104; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; id x5; } x1; } x0; BOOL x1; } x105; id x106; id x107; id x108; id x109; id x110; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x111; id x112; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x113; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x114; id x115; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; id x121; id x122; id x123; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x124; id x125; id x126; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x127; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x128; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x129; id x130; id x131; id x132; id x133; id x134; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x135; id x136; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvViewMetadataType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvViewMetadataType { struct optional<StructuredLogger::IgmediadisplayformatEnum> { union { char x0; int x1; } x0; BOOL x1; } x0; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x3; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x4; long long x5; long long x6; } x1; } x0; BOOL x1; } x137; id x138; } x1; } x0; BOOL x1; } x3; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelType { id x0; id x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x0; } x2; } x1; } x0; BOOL x1; } x6; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; long long x10; id x11; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x12; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x0; } x2; } x1; } x0; BOOL x1; } x13; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelProductMetadataType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelProductMetadataType { id x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x14; struct optional<StructuredLogger::MerlinclientreleasephaseEnum> { union { char x0; int x1; } x0; BOOL x1; } x15; id x16; int x17; id x18; id x19; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x0; } x2; } x1; } x0; BOOL x1; } x20; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x21; } x1; } x0; BOOL x1; } x4; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMerlinSecondChannelType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMerlinSecondChannelType { id x0; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x1; id x2; } x1; } x0; BOOL x1; } x5; id x6; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadVpvType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadVpvType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x4; id x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; id x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; id x14; id x15; } x1; } x0; BOOL x1; } x7; })primaryEventPayload;
- (void)setIgExtraPayload:(struct MerlinSecondChannelIgExtraPayloadType { struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; })payload;
- (void)setPrimaryEventPayload:(struct MerlinUnifiedProtocolEventPayloadType { id x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; id x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; id x15; id x16; id x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; id x23; id x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; id x30; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x31; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x32; id x33; id x34; id x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; id x37; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x43; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x44; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x45; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x46; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x47; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x48; id x49; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x53; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x54; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x55; id x56; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x57; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x58; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x59; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x60; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x61; id x62; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x63; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x64; id x65; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x66; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x67; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x68; id x69; id x70; id x71; struct optional<std::vector<std::unordered_map<std::string, std::string>>> { union { char x0; struct vector<std::unordered_map<std::string, std::string>, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; void * x1; struct __compressed_pair<std::unordered_map<std::string, std::string> *, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; } x2; } x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; id x74; id x75; struct optional<StructuredLogger::IgshoppingcollectionslogginginfoType> { union { char x0; struct IgshoppingcollectionslogginginfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x76; id x77; id x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x80; id x81; id x82; id x83; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x84; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x85; id x86; id x87; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x88; id x89; id x90; id x91; id x92; id x93; id x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; id x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x101; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x102; id x103; id x104; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x105; id x106; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x121; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x122; id x123; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x124; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x125; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x126; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x127; id x128; id x129; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x130; id x131; id x132; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x133; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x134; id x135; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x136; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x137; id x138; id x139; id x140; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x141; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x142; id x143; id x144; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x145; id x146; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x147; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x148; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x149; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x150; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x151; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x152; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x153; id x154; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x155; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x156; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x157; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x158; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x159; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x160; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x161; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x162; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x163; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x164; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x165; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x166; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x167; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x168; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x169; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x170; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x171; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x172; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x173; id x174; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x175; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x176; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x177; id x178; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x179; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x180; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x181; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x182; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x183; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x184; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x185; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x186; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x187; id x188; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x189; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x190; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x191; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x192; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x193; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x194; id x195; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x196; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x197; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x198; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x199; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x200; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x201; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x202; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x203; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x204; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x205; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutCaptionHighlightsShowedType * x0; } x2; } x1; } x0; BOOL x1; } x12; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x22; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x23; id x24; id x25; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x30; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x33; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x34; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x37; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x42; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x43; id x44; } x1; } x0; BOOL x1; } x206; id x207; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x208; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x209; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x210; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x211; id x212; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x213; id x214; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x215; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x216; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x217; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x218; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x219; id x220; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x221; id x222; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x223; id x224; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x225; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x226; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x227; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x228; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x229; id x230; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x231; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x232; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x233; id x234; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x235; id x236; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x237; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x238; id x239; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x240; id x241; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x242; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x243; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x244; id x245; id x246; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x247; id x248; id x249; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x250; id x251; id x252; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x253; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x254; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x255; id x256; id x257; id x258; id x259; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x260; id x261; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x262; id x263; id x264; struct optional<std::unordered_map<long long, std::vector<long long>>> { union { char x0; struct unordered_map<long long, std::vector<long long>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, std::vector<long long>>>> { struct __hash_table<std::__hash_value_type<long long, std::vector<long long>>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, std::vector<long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x265; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x266; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; id x6; } x1; } x0; BOOL x1; } x267; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x268; id x269; id x270; id x271; id x272; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x273; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x274; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x275; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x276; id x277; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x278; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x279; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x280; id x281; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x282; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x283; id x284; id x285; id x286; id x287; id x288; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x289; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x290; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x291; id x292; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x293; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x294; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x295; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x296; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x297; id x298; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x299; id x300; id x301; id x302; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionShoppingStickerInfoType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionShoppingStickerInfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; id x3; id x4; } x1; } x0; BOOL x1; } x303; id x304; id x305; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x306; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x307; id x308; id x309; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x310; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x311; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x312; id x313; id x314; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x315; id x316; id x317; id x318; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x319; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x320; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x321; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x322; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x323; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutType { struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutCtaTextType { double x0; double x1; double x2; id x3; double x4; } x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutMoreOptionsButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutMoreOptionsButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutReshareButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgImpressionToolbarLayoutReshareButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x2; } x1; } x0; BOOL x1; } x324; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x325; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x326; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x327; id x328; id x329; id x330; id x331; id x332; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x333; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x334; id x335; id x336; id x337; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x338; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x339; id x340; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x341; id x342; id x343; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x344; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x345; id x346; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x347; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; id x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; id x15; id x16; id x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; id x23; id x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; id x30; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x31; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x32; id x33; id x34; id x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; id x37; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x43; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x44; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x45; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x46; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x47; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x48; id x49; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x53; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x54; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x55; id x56; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x57; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x58; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x59; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x60; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x61; id x62; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x63; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x64; id x65; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x66; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x67; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x68; id x69; id x70; id x71; struct optional<std::vector<std::unordered_map<std::string, std::string>>> { union { char x0; struct vector<std::unordered_map<std::string, std::string>, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; void * x1; struct __compressed_pair<std::unordered_map<std::string, std::string> *, std::allocator<std::unordered_map<std::string, std::string>>> { void * x0; } x2; } x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; id x74; id x75; struct optional<StructuredLogger::IgshoppingcollectionslogginginfoType> { union { char x0; struct IgshoppingcollectionslogginginfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x76; id x77; id x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x80; id x81; id x82; id x83; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x84; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x85; id x86; id x87; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x88; id x89; id x90; id x91; id x92; id x93; id x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; id x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x101; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x102; id x103; id x104; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x105; id x106; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x107; id x108; id x109; id x110; id x111; id x112; id x113; id x114; id x115; id x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x121; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x122; id x123; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x124; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x125; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x126; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x127; id x128; id x129; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x130; id x131; id x132; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x133; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x134; id x135; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x136; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x137; id x138; id x139; id x140; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x141; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x142; id x143; id x144; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x145; id x146; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x147; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x148; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x149; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x150; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x151; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x152; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x153; id x154; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x155; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x156; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x157; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x158; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x159; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x160; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x161; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x162; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x163; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x164; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x165; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x166; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x167; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x168; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x169; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x170; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x171; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x172; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x173; id x174; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x175; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x176; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x177; id x178; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x179; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x180; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x181; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x182; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x183; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x184; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x185; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x186; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x187; id x188; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x189; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x190; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x191; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x192; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x193; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x194; id x195; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x196; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x197; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x198; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x199; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x200; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x201; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x202; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x203; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x204; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x205; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; id x5; id x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType>> { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutCaptionHighlightsShowedType * x0; } x2; } x1; } x0; BOOL x1; } x12; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x22; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x23; id x24; id x25; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x26; id x27; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x28; id x29; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x30; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x33; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x34; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x35; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x36; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x37; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x38; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x39; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x40; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x41; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x42; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionMediaLayoutStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x43; id x44; } x1; } x0; BOOL x1; } x206; id x207; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x208; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x209; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x210; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x211; id x212; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x213; id x214; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x215; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x216; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x217; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x218; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x219; id x220; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x221; id x222; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x223; id x224; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x225; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x226; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x227; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x228; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x229; id x230; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x231; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x232; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x233; id x234; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x235; id x236; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x237; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x238; id x239; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x240; id x241; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x242; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x243; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x244; id x245; id x246; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x247; id x248; id x249; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x250; id x251; id x252; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x253; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x254; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x255; id x256; id x257; id x258; id x259; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x260; id x261; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x262; id x263; id x264; struct optional<std::unordered_map<long long, std::vector<long long>>> { union { char x0; struct unordered_map<long long, std::vector<long long>, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, std::vector<long long>>>> { struct __hash_table<std::__hash_value_type<long long, std::vector<long long>>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, std::vector<long long>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, std::vector<long long>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, std::vector<long long>>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, std::vector<long long>>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x265; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x266; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; id x6; } x1; } x0; BOOL x1; } x267; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x268; id x269; id x270; id x271; id x272; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x273; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x274; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x275; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x276; id x277; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x278; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x279; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x280; id x281; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x282; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x283; id x284; id x285; id x286; id x287; id x288; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x289; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x290; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x291; id x292; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x293; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x294; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x295; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x296; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x297; id x298; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x299; id x300; id x301; id x302; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionShoppingStickerInfoType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionShoppingStickerInfoType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; id x3; id x4; } x1; } x0; BOOL x1; } x303; id x304; id x305; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x306; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x307; id x308; id x309; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerStylesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x310; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickerTypesType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x311; struct optional<std::unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>> { union { char x0; struct unordered_map<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>>> { struct __hash_table<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>, std::allocator<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::hash<long long>, std::equal_to<long long>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionStickersType>, std::equal_to<long long>, std::hash<long long>>> { float x0; } x3; } x0; } x1; } x0; BOOL x1; } x312; id x313; id x314; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x315; id x316; id x317; id x318; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x319; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x320; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x321; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x322; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x323; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutType { struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutCtaTextType { double x0; double x1; double x2; id x3; double x4; } x0; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutMoreOptionsButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutMoreOptionsButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x1; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutReshareButtonType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgSubImpressionToolbarLayoutReshareButtonType { long long x0; double x1; double x2; long long x3; } x1; } x0; BOOL x1; } x2; } x1; } x0; BOOL x1; } x324; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x325; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x326; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x327; id x328; id x329; id x330; id x331; id x332; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x333; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x334; id x335; id x336; id x337; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x338; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x339; id x340; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x341; id x342; id x343; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x344; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x345; id x346; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x347; } x1; } x0; BOOL x1; } x2; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvType { struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x0; id x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; id x5; id x6; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x7; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x8; id x9; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x10; id x11; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x12; id x13; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x14; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x15; id x16; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x17; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x18; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x19; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x20; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x21; id x22; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x23; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x24; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x25; id x26; id x27; id x28; id x29; id x30; id x31; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x32; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x33; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x34; id x35; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x36; id x37; id x38; id x39; id x40; id x41; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x42; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x43; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x44; id x45; id x46; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x47; id x48; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x49; id x50; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x51; id x52; struct optional<StructuredLogger::InstagramisaudiomutedtypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x53; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x54; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x55; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x56; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x57; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x58; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x59; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x60; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x61; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x62; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x63; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x64; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x65; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x66; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x67; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x68; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x69; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x70; struct optional<StructuredLogger::InstagramclipsvieweractiontypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x71; struct optional<StructuredLogger::InstagramclipsvieweractionsourcetypeEnum> { union { char x0; int x1; } x0; BOOL x1; } x72; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x73; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x74; id x75; id x76; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x77; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x78; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x79; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x80; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x81; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x82; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x83; id x84; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x85; id x86; id x87; id x88; id x89; id x90; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x91; id x92; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x93; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x94; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x95; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x96; id x97; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x98; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x99; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x100; id x101; id x102; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x103; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x104; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvProfileShopLinkType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvProfileShopLinkType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x4; id x5; } x1; } x0; BOOL x1; } x105; id x106; id x107; id x108; id x109; id x110; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x111; id x112; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x113; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x114; id x115; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x116; id x117; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x118; id x119; id x120; id x121; id x122; id x123; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x124; id x125; id x126; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x127; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x128; struct optional<double> { union { char x0; double x1; } x0; BOOL x1; } x129; id x130; id x131; id x132; id x133; id x134; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x135; id x136; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadIgVpvViewMetadataType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadIgVpvViewMetadataType { struct optional<StructuredLogger::IgmediadisplayformatEnum> { union { char x0; int x1; } x0; BOOL x1; } x0; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x3; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x4; long long x5; long long x6; } x1; } x0; BOOL x1; } x137; id x138; } x1; } x0; BOOL x1; } x3; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelType { id x0; id x1; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; id x4; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x5; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelFrameInfoType * x0; } x2; } x1; } x0; BOOL x1; } x6; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; long long x10; id x11; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x12; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelPlayerTimeType * x0; } x2; } x1; } x0; BOOL x1; } x13; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelProductMetadataType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelProductMetadataType { id x0; id x1; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x2; id x3; id x4; id x5; id x6; } x1; } x0; BOOL x1; } x14; struct optional<StructuredLogger::MerlinclientreleasephaseEnum> { union { char x0; int x1; } x0; BOOL x1; } x15; id x16; int x17; id x18; id x19; struct optional<std::vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { union { char x0; struct vector<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x0; struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x1; struct __compressed_pair<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType *, std::allocator<StructuredLogger::MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType>> { struct MerlinUnifiedProtocolEventPayloadMediaPlaybackCompoundSecondChannelViperVideoEventsType * x0; } x2; } x1; } x0; BOOL x1; } x20; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x21; } x1; } x0; BOOL x1; } x4; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadMerlinSecondChannelType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadMerlinSecondChannelType { id x0; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x1; id x2; } x1; } x0; BOOL x1; } x5; id x6; struct optional<StructuredLogger::MerlinUnifiedProtocolEventPayloadVpvType> { union { char x0; struct MerlinUnifiedProtocolEventPayloadVpvType { id x0; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x1; id x2; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x3; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x4; id x5; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x6; id x7; struct optional<bool> { union { char x0; BOOL x1; } x0; BOOL x1; } x8; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x9; id x10; struct optional<long long> { union { char x0; long long x1; } x0; BOOL x1; } x11; id x12; id x13; id x14; id x15; } x1; } x0; BOOL x1; } x7; })payload;
@end

#endif /* MerlinLogAwareExtraData_h */
