//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGLiveRoomGuestBroadcastViewController_h
#define IGLiveRoomGuestBroadcastViewController_h
@import Foundation;

#include "IGViewController.h"
#include "IGCameraViewController.h"
#include "IGKeyboardObserverHideDelegate-Protocol.h"
#include "IGKeyboardObserverShowDelegate-Protocol.h"
#include "IGLiveBroadcastCaptureManager.h"
#include "IGLiveBroadcastInviteLoggingContext.h"
#include "IGLiveBroadcastLogger.h"
#include "IGLiveBroadcastVideoGenerator.h"
#include "IGLiveBroadcastWidgetViewController.h"
#include "IGLiveDarkOverlayView.h"
#include "IGLiveRTCRoomOngoingCall.h"
#include "IGLiveRTCRoomPendingInvite.h"
#include "IGLiveRTCRoomViewerSession.h"
#include "IGLiveRoomBroadcastView.h"
#include "IGLiveRoomGuestVideoView.h"
#include "IGLiveUserKey.h"

@class IGKeyboardObserver, IGLiveBroadcast, IGUserSession, NSLock, NSMutableDictionary, NSSet, NSString;
@protocol IGLiveAddonCoordinating, IGLiveRoomGuestBroadcastViewControllerDelegate, IGLiveRoomUserTracking;

@interface IGLiveRoomGuestBroadcastViewController : IGViewController<IGKeyboardObserverHideDelegate, IGKeyboardObserverShowDelegate> {
  /* instance variables */
  IGUserSession *_userSession;
  IGLiveUserKey *_selfUserKey;
  IGLiveBroadcast *_broadcast;
  IGLiveUserKey *_broadcastOwnerUserKey;
  BOOL _isGuestWidgetInTapState;
  NSObject<IGLiveRoomGuestBroadcastViewControllerDelegate> *_delegate;
  IGLiveBroadcastWidgetViewController *_guestWidgetViewController;
  NSMutableDictionary *_participantKeyByAttributionViews;
  NSSet *_allParticipantKeys;
  IGLiveBroadcastCaptureManager *_broadcastCaptureManager;
  IGLiveRoomBroadcastView *_liveRoomBroadcastView;
  IGLiveRoomGuestVideoView *_guestVideoContainerView;
  IGLiveBroadcastLogger *_logger;
  IGLiveBroadcastInviteLoggingContext *_loggingInviteContext;
  IGLiveDarkOverlayView *_darkOverlayView;
  long long _state;
  BOOL _isVisible;
  NSLock *_subviewLock;
  IGLiveRTCRoomViewerSession *_roomViewerSession;
  IGLiveRTCRoomPendingInvite *_roomPendingInvite;
  IGLiveRTCRoomOngoingCall *_roomOngoingCall;
  IGKeyboardObserver *_keyboardObserver;
  IGLiveBroadcastVideoGenerator *_videoGenerator;
  BOOL _videoToggledOff;
  long long _commentsDisplayMode;
  NSObject<IGLiveRoomUserTracking> *_userTracker;
}

@property (readonly, nonatomic) IGCameraViewController *cameraViewController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<IGLiveAddonCoordinating> *coordinator;
@property (readonly, nonatomic) NSString *identifier;
@property (nonatomic) BOOL disabled;
@property (nonatomic) BOOL addonLifeCycleEventEnabled;

/* instance methods */
- (void)dealloc;
- (id)initWithUserSession:(id)session broadcast:(id)broadcast broadcastOwner:(id)owner cameraViewController:(id)controller delegate:(id)delegate;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewWillDisappear:(BOOL)disappear;
- (void)viewDidDisappear:(BOOL)disappear;
- (void)switchCaptureDevice:(id)device withUserInput:(unsigned long long)input;
- (void)_onAppWillResignActive;
- (void)_onAppDidBecomeActive;
- (void)captureManagerWillChangeCamera:(id)camera;
- (void)captureManagerDidChangeCamera:(id)camera toPosition:(long long)position;
- (void)captureManager:(id)manager didCaptureAudioBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (void)captureManager:(id)manager didCaptureVideoBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (void)captureManager:(id)manager activatingAudioSessionDidError:(id)error;
- (void)captureManagerDidStartRunning:(id)running;
- (void)captureManagerWasInterrupted:(id)interrupted;
- (void)captureManagerDidEndInterruption:(id)interruption;
- (void)liveBroadcastVideoGeneratorWillStartGeneratingVideo:(id)video;
- (void)liveBroadcastVideoGeneratorDidStartGeneratingVideo:(id)video;
- (void)liveBroadcastVideoGenerator:(id)generator didGenerateSampleBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (void)liveBroadcastVideoGeneratorFailedGenerateVideo:(id)video;
- (void)liveBroadcastVideoGeneratorDidStopGeneratingVideo:(id)video;
- (struct CGSize { double x0; double x1; })liveRoomBroadcastView:(id)view contentSizeForHostView:(id)view;
- (struct CGSize { double x0; double x1; })liveRoomBroadcastView:(id)view contentSizeForGuestView:(id)view;
- (unsigned long long)liveRoomBroadcastView:(id)view accessoryAlignmentForHostView:(id)view;
- (unsigned long long)liveRoomBroadcastView:(id)view accessoryAlignmentForGuestView:(id)view;
- (void)arEffectApplicatorUserDidTurnOffAREffect:(id)areffect;
- (void)arEffectApplicatorAREffectDidBecomeAvailable:(id)available;
- (void)arEffectApplicator:(id)applicator didUpdateAREffectTouchSupportedStatus:(BOOL)status;
- (void)arEffectApplicatorDidUpdateEffectList:(id)list fromNetwork:(BOOL)network;
- (void)arEffectApplicator:(id)applicator didDownloadAREffectAsset:(id)asset withIsPrefetch:(BOOL)prefetch;
- (void)arEffectApplicator:(id)applicator didFailWithTargetEffectResponse:(id)response;
- (void)arEffectApplicatorDidFailToDownload:(id)download;
- (void)arEffectApplicator:(id)applicator didFailToDownloadAssetForAssetModel:(id)model;
- (void)arEffectApplicatorDidFailToDownloadRemoteModel:(id)model;
- (void)arEffectApplicator:(id)applicator didFailFetchWithError:(id)error;
- (BOOL)cameraViewControllerShouldFetchForSwitcherMode:(id)mode;
- (void)cameraViewController:(id)controller didBeginFetchingEffectTarget:(id)target;
- (void)cameraViewController:(id)controller didCompleteFetchForEffectTarget:(id)target;
- (void)cameraViewController:(id)controller didFailFetchForEffectTarget:(id)target response:(id)response;
- (void)cameraViewControllerDidTurnOffAREffects:(id)areffects;
- (void)cameraViewController:(id)controller didFailFetchWithError:(id)error;
- (BOOL)cameraViewControllerCropAspectRatio:(id)ratio;
- (void)arEffectApplicator:(id)applicator willApplyAREffect:(id)areffect;
- (void)arEffectApplicatorWillUnApplyAREffect:(id)areffect isSwitchingAREffect:(BOOL)areffect;
- (void)arEffectApplicator:(id)applicator willAddFilterWithConfig:(id)config assetModel:(id)model completion:(id /* block */)completion;
- (void)arEffectApplicator:(id)applicator willAddFilter:(id)filter completion:(id /* block */)completion;
- (BOOL)arEffectApplicatorCanUseAREngineFilterFlow:(id)flow;
- (void)arEffectApplicator:(id)applicator willAddFilter:(id)filter completionWithServiceHost:(id /* block */)host;
- (void)arEffectApplicator:(id)applicator didSetEffect:(id)effect withAttribution:(id)attribution;
- (void)arEffectApplicatorDidFailToRender:(id)render;
- (void)arEffectApplicator:(id)applicator didRenderEffect:(id)effect;
- (void)instructionServiceHandler:(id)handler requestsShowAREffectTextInstructions:(id)instructions forDuration:(double)duration;
- (void)instructionServiceHandler:(id)handler requestsShowAREffectImages:(id)images;
- (void)instructionServiceHandlerRequestsHideAREffectInstructions:(id)instructions;
- (void)keyboardObserver:(id)observer keyboardWillShowWithBeginFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame endFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame duration:(double)duration curve:(long long)curve;
- (void)keyboardObserverKeyboardDidShow:(id)show;
- (void)keyboardObserver:(id)observer keyboardWillHideWithBeginFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame endFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame duration:(double)duration curve:(long long)curve;
- (void)keyboardObserverKeyboardDidHide:(id)hide;
- (void)receiveEvent:(unsigned long long)event from:(id)from payload:(id)payload;
- (BOOL)canHandleRequest:(id)request;
- (id)handleRequest:(id)request;
@end

#endif /* IGLiveRoomGuestBroadcastViewController_h */
