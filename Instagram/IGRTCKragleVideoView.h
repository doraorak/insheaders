//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGRTCKragleVideoView_h
#define IGRTCKragleVideoView_h
@import Foundation;

#include "UIView.h"
#include "FB_RTCVideoRenderer-Protocol.h"
#include "FB_RTCVideoViewDelegate-Protocol.h"
#include "NSCopying-Protocol.h"
#include "VideoRenderInfo-Protocol.h"

@class FBTimer, IGConditionalExecutor, NSString, UIImageView;
@protocol UIView<FB_RTCObservableVideoRenderer, {atomic<long long>="__a_"{__cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>>="__a_value"Aq}};

@interface IGRTCKragleVideoView : UIView<FB_RTCVideoViewDelegate, FB_RTCVideoRenderer, VideoRenderInfo> {
  /* instance variables */
  UIView<FB_RTCObservableVideoRenderer> *_videoView;
  UIImageView *_hdIndicatorView;
  BOOL _supportsLandscape;
  struct CGSize { double width; double height; } _prevSize;
  BOOL _didSetCustomVideoScale;
  NSObject<NSCopying> *_userIdentifier;
  BOOL _needsConvertToI420Frame;
  IGConditionalExecutor *_firstFrameRenderedExecutor;
  BOOL _forceScaleToFit;
  BOOL _hasRegisteredFrameRenderCallback;
  BOOL _qplLoggingEnabled;
  int _qplLoggingIntervalInSeconds;
  id /* block */ _frameRenderedListener;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _setupTexturesForFrameErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _setupMetalErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _initializeTextureCacheErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _prepareVertexBufferWithRotationErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _createAndSetupNV12ProgramErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _createAndSetupI420ProgramErrorCount;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _createEAGLContextErrorCount;
  FBTimer *_timer;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) struct CGSize { double x0; double x1; } videoSize;
@property (readonly, nonatomic) double timeIntervalSinceLastFrame;
@property (readonly, nonatomic) BOOL hasVideoStarted;
@property (nonatomic) unsigned long long videoScaleType;
@property (readonly, nonatomic) BOOL shouldResizeView;

/* instance methods */
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })frame supportsLandscape:(BOOL)landscape canRenderInBackground:(BOOL)background userIdentifier:(id)identifier needsConvertToI420Frame:(BOOL)frame useMetal:(BOOL)metal qplLoggingEnabled:(BOOL)enabled qplLoggingEnabledIntervalInSeconds:(int)seconds;
- (void)layoutSubviews;
- (id)view;
- (id)userIdentifier;
- (void)renderVideoFrame:(struct __RSVideoFrame *)frame cropType:(int)type;
- (void)renderVideoFrame:(struct __CVBuffer *)frame;
- (void)setSize:(struct CGSize { double x0; double x1; })size;
- (void)renderFrame:(id)frame;
- (void)videoView:(id)view didChangeVideoSize:(struct CGSize { double x0; double x1; })size;
- (void)videoStreamRestarted;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (void)onRenderFirstFrame:(id /* block */)frame;
@end

#endif /* IGRTCKragleVideoView_h */
