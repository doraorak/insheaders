//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FoACanvasViewContext_h
#define FoACanvasViewContext_h
@import Foundation;

@protocol {Optional<Canvas::Canvas>="_storage"{Storage<Canvas::Canvas, false, false, true>="hasValue"B""(?="emptyState"c"value"{Canvas="width"{Optional<double>="_storage"{Storage<double, true, true, true>="hasValue"Q"value"d}}"height"{Optional<double>="_storage"{Storage<double, true, true, true>="hasValue"Q"value"d}}"children"{vector<std::shared_ptr<Canvas::CanvasElement>, std::allocator<std::shared_ptr<Canvas::CanvasElement>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::shared_ptr<Canvas::CanvasElement> *, std::allocator<std::shared_ptr<Canvas::CanvasElement>>>="__value_"^v}}})}};

@interface FoACanvasViewContext : NSObject {
  /* instance variables */
  struct Optional<Canvas::Canvas> { struct Storage<Canvas::Canvas, false, false, true> { BOOL hasValue; union { char emptyState; struct Canvas { struct Optional<double> { struct Storage<double, true, true, true> { unsigned long long hasValue; double value; } _storage; } width; struct Optional<double> { struct Storage<double, true, true, true> { unsigned long long hasValue; double value; } _storage; } height; struct vector<std::shared_ptr<Canvas::CanvasElement>, std::allocator<std::shared_ptr<Canvas::CanvasElement>>> { void *__begin_; void *__end_; struct __compressed_pair<std::shared_ptr<Canvas::CanvasElement> *, std::allocator<std::shared_ptr<Canvas::CanvasElement>>> { void *__value_; } __end_cap_; } children; } value; } x0; } _storage; } _canvas;
}

/* instance methods */
- (id)initWithCanvas:(void *)canvas;
- (void)drawInContext:(struct CGContext *)context;
@end

#endif /* FoACanvasViewContext_h */
