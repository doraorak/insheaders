//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGHighlightsStoryTrayDataSource_h
#define IGHighlightsStoryTrayDataSource_h
@import Foundation;

#include "IGBaseHighlightsStoryTrayDataSource-Protocol.h"
#include "IGHighlightsStoryTrayNetworkSource.h"
#include "IGListDiffable-Protocol.h"
#include "IGMediaDeletedListener-Protocol.h"
#include "IGStoryDataControllerStoryItemListener-Protocol.h"
#include "IGStorySharePostListener-Protocol.h"
#include "IGStoryTrayDataSourceAnnouncer.h"

@class IGObjectDiskStorage, IGUserSession, NSArray, NSDate, NSOrderedSet, NSString;

@interface IGHighlightsStoryTrayDataSource : NSObject<IGStorySharePostListener, IGMediaDeletedListener, IGStoryDataControllerStoryItemListener, IGBaseHighlightsStoryTrayDataSource, IGListDiffable> {
  /* instance variables */
  NSString *_userPK;
  IGUserSession *_userSession;
  IGStoryTrayDataSourceAnnouncer *_announcer;
  NSOrderedSet *_reelPKs;
  NSArray *_trayViewModelsForLoggingContext;
  BOOL _isCurrentUser;
  NSDate *_lastHighlightsFetchDate;
  IGObjectDiskStorage *_storageHighlightStoryTray;
  IGHighlightsStoryTrayNetworkSource *_networkSource;
  BOOL _hasLatelyHighlightCacheForCurrentUser;
}

@property (readonly, nonatomic) BOOL isFetching;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSArray *reels;
@property (readonly, nonatomic) BOOL isEmpty;
@property (readonly, nonatomic) BOOL trayShouldScrollToEndOnDismiss;
@property (readonly, nonatomic) BOOL hasSeenStateEnabled;

/* instance methods */
- (id)initWithUserPK:(id)pk userSession:(id)session diskManager:(id)manager;
- (void)invalidateCache;
- (void)fetch;
- (BOOL)tryFetchInitial;
- (void)createNewReelWithFeedItems:(id)items title:(id)title coverMediaID:(id)id cropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect entryPoint:(long long)point creationToken:(id)token onComplete:(id /* block */)complete;
- (void)addFeedItems:(id)items toReelPK:(id)pk entryPoint:(long long)point onComplete:(id /* block */)complete;
- (void)removeFeedItems:(id)items fromReelPK:(id)pk entryPoint:(long long)point onComplete:(id /* block */)complete;
- (void)removeReelWithPK:(id)pk;
- (void)updateWithNewReel:(id)reel isAppendingToPaginatedTray:(BOOL)tray;
- (void)updateExistingReel:(id)reel moveToFront:(BOOL)front;
- (void)removeEmptyStateStory;
- (id)allItemsForTray;
- (id)viewModelForReel:(id)reel;
- (id)viewModelForLiveBroadcast:(id)broadcast;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (id)storyTrayViewModelsForLoggingContext;
- (id)diffIdentifier;
- (BOOL)isEqualToDiffableObject:(id)object;
- (void)highlightRemoved:(id)removed;
- (void)highlightUpdated:(id)updated;
- (void)highlightsTrayUpdatedForUserPk:(id)pk;
- (void)mediaItemDeleted:(id)deleted storyReelPK:(id)pk;
- (void)mediaHiddenFeedItem:(id)item sourceModule:(id)module storyReelPK:(id)pk reason:(long long)reason;
- (void)storyItemPosted:(id)posted videoFileURL:(id)url shareType:(long long)type mediaData:(id)data postId:(id)id postShareId:(id)id reelOwner:(id)owner reelPk:(id)pk;
- (void)highlightsStoryTrayNetworkSource:(id)source didFetchHighlightsFromNetwork:(id)network;
- (void)highlightsStoryTrayNetworkSource:(id)source didFetchFirstPortionOfTrayFromNetwork:(id)network;
- (void)highlightsStoryTrayNetworkSource:(id)source didFetchPaginatedTrayFromNetwork:(id)network;
- (void)highlightsStoryTrayNetworkSource:(id)source didFetchAdditionaTrayItemsFromNetwork:(id)network;
- (void)highlightsStoryTrayNetworkSource:(id)source didFetchTrayFromNetworkAndUpdateStoryViewer:(id)viewer;
- (void)highlightsStoryTrayNetworkSource:(id)source didFailWithError:(id)error;
- (void)highlightsStoryTrayNetworkSource:(id)source parsedCacheableResponse:(id)response;
- (void)storyDataController:(id)controller didUpdateWithRefreshType:(long long)type updateDuration:(double)duration storyRankToken:(id)token deliveryLoggingKey:(id)key;
- (void)storyDataController:(id)controller fetchTrayDidFailWithError:(id)error errorMessageToDisplay:(id)display httpStatusCode:(long long)code requestReason:(long long)reason refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller didUpdateReel:(id)reel refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller fetchItemsDidFailForReelPK:(id)pk error:(id)error refreshType:(long long)type updateDuration:(double)duration;
- (void)storyDataController:(id)controller didReturnNoStoryItemResultsForReelPK:(id)pk refreshType:(long long)type updateDuration:(double)duration;
@end

#endif /* IGHighlightsStoryTrayDataSource_h */
