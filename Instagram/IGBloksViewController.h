//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGBloksViewController_h
#define IGBloksViewController_h
@import Foundation;

#include "IGViewController.h"
#include "BKScreenCore.h"
#include "IGAnalyticsModuleClassOverride-Protocol.h"
#include "IGBloksBarButtonItem.h"
#include "IGBloksNavBarBadgingService-Protocol.h"
#include "IGBloksScreenNavbarUpdating-Protocol.h"
#include "IGBloksViewControllerNetworkEventListener-Protocol.h"
#include "IGScrollableViewControllerProtocol-Protocol.h"
#include "IGTransitionZoomFromCapable-Protocol.h"
#include "IGTransitionZoomToCapable-Protocol.h"

@class BKContext, BKGlobalStateStore, BKLispyExpression, BKObjectSet, BKParseResult, IGCollapsibleNavigationCoordinator, IGDeviceSession, IGKeyboardObserver, IGScrollViewAnnouncer, IGTapButton, IGUserSession, NSArray, NSDictionary, NSString, UINavigationController, UIScrollView, UIView;

@interface IGBloksViewController : IGViewController<IGScrollableViewControllerProtocol, IGBloksScreenNavbarUpdating, IGTransitionZoomFromCapable, IGTransitionZoomToCapable, IGAnalyticsModuleClassOverride> {
  /* instance variables */
  IGDeviceSession *_deviceSession;
  IGUserSession *_session;
  NSDictionary *_params;
  BKContext *_contextForContentView;
  BKObjectSet *_optionalAdditionalObjects;
  BOOL _wasInitializedLoggedOut;
  BKGlobalStateStore *_loggedOutGlobalState;
  NSObject<IGBloksViewControllerNetworkEventListener> *_networkListener;
  NSObject<IGBloksNavBarBadgingService> *_badgingService;
  UIView *_customLoadingView;
  UIView *_viewpointBlockingView;
  BOOL _showsCloseActionOnError;
  BOOL _wasPanGestureNavigationEnabled;
  BOOL _hasLoadedView;
  struct IGBloksScreenModel { NSString *analyticsModule; NSString *screenId; BOOL needsLayoutOnKeyboardEvent; NSString *appId; struct IGBloksScreenNavbarModel { long long iosStatusBarStyle; NSString *title; BOOL hideNavbar; BOOL hideBackButton; BOOL hideDivider; UIColor *tintColorLight; UIColor *tintColorDark; leadingButtons *onBackPressLispyExpression; NSArray * x0; NSArray *trailingButtons; NSString *subtitle; IGBloksScreenNavbarCustomTitle *customTitle; BOOL centerAlignCustomTitle; BKSourceMapNode *sourceMapNode; } navbarModel; BOOL rendersInUnsafeArea; BOOL rendersInUnsafeAreaTop; BOOL rendersInUnsafeAreaBottom; long long tabbarBehavior; BKParseResult *initialContent; ttiMarkerId *onExitLispyExpression; NSNumber * x0; NSNumber *ttiMarkerInstanceId; BOOL shouldDisableAnimation; unsigned long long secondsCacheIsValidFor; NSString *customCacheKey; BOOL shouldDisableSwiping; NSDictionary *analyticsExtras; struct { FBEitherObject *onNavigateToAction; FBEitherObject *onNavigateFromAction; } lifecycleCallbackModel; } _screenModel;
  IGKeyboardObserver *_keyboardObserver;
  IGBloksBarButtonItem *_leftBarButtonItem;
  NSArray *_rightBarButtonItems;
  NSArray *_badgeableBarButtons;
  BKParseResult *_parsedInitialScreen;
  IGTapButton *_closeButton;
  int _customQPLMarkerID;
  id /* block */ _viewWillDisappearBlock;
  BKScreenCore *_screenCore;
  UIView *_screenCoreView;
  NSDictionary *_externalVariables;
  NSDictionary *_analyticsExtras;
  id /* block */ _viewDismissedBlock;
  IGCollapsibleNavigationCoordinator *_collapsibleNavigationCoordinator;
  IGScrollViewAnnouncer *_scrollViewAnnouncer;
  UIScrollView *_scrollView;
  BKLispyExpression *_onPercentCollapsed;
  UINavigationController *_navigationControllerForObjectSet;
  id _loggingScriptToEvaluateOnViewDisappear;
  IGBloksBarButtonItem *_leftBarButtonItemFallback;
  UIView *_backwardTransitionView;
  UIView *_forwardTransitionView;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSDictionary *magicMoveSubviews;

/* instance methods */
- (id)initWithUserSession:(id)session screenModel:(struct IGBloksScreenModel { id x0; id x1; BOOL x2; id x3; struct IGBloksScreenNavbarModel { long long x0; id x1; BOOL x2; BOOL x3; BOOL x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; BOOL x12; id x13; } x4; BOOL x5; BOOL x6; BOOL x7; long long x8; id x9; id x10; id x11; id x12; BOOL x13; unsigned long long x14; id x15; BOOL x16; id x17; struct { id x0; id x1; } x18; })model params:(id)params extras:(struct IGBloksViewControllerExtras { id x0; id x1; id x2; BOOL x3; id x4; id x5; id x6; id x7; id /* block */ x8; id /* block */ x9; id x10; })extras;
- (id)initLoggedOutWithScreenModel:(struct IGBloksScreenModel { id x0; id x1; BOOL x2; id x3; struct IGBloksScreenNavbarModel { long long x0; id x1; BOOL x2; BOOL x3; BOOL x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; BOOL x12; id x13; } x4; BOOL x5; BOOL x6; BOOL x7; long long x8; id x9; id x10; id x11; id x12; BOOL x13; unsigned long long x14; id x15; BOOL x16; id x17; struct { id x0; id x1; } x18; })model loggedOutGlobalState:(id)state params:(id)params extras:(struct IGBloksViewControllerExtras { id x0; id x1; id x2; BOOL x3; id x4; id x5; id x6; id x7; id /* block */ x8; id /* block */ x9; id x10; })extras;
- (id)analyticsExtras;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewWillDisappear:(BOOL)disappear;
- (void)viewDidDisappear:(BOOL)disappear;
- (void)traitCollectionDidChange:(id)change;
- (void)dealloc;
- (id)analyticsModule;
- (id)analyticsModuleClassOverride;
- (void)updateNavigationBar:(struct IGBloksScreenNavbarModel { long long x0; id x1; BOOL x2; BOOL x3; BOOL x4; id x5; id x6; id x7; id x8; id x9; id x10; id x11; BOOL x12; id x13; })bar;
- (long long)preferredTabBarBehavior;
- (BOOL)prefersNavigationBarHidden;
- (long long)preferredStatusBarStyle;
- (BOOL)prefersNavigationBarDividerHidden;
- (BOOL)wantsLayoutOnKeyboardChanges;
- (id)userSession;
- (void)_didTapCloseButton;
- (void)bloksErrorViewActionButtonTapped:(id)tapped;
- (void)initScrollawayWithScrollView:(id)view config:(id)config;
- (void)setScrollawayNavigation:(BOOL)navigation;
- (void)scrollawayScrollViewWillEndDragging:(id)dragging withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(inout struct CGPoint *)offset;
- (void)scrollawayScrollViewDidScroll:(id)scroll;
- (void)scrollawayScrollViewDidEndDragging:(id)dragging willDecelerate:(BOOL)decelerate;
- (void)scrollawayScrollViewWillBeginDragging:(id)dragging;
- (void)scrollawayScrollViewDidEndDecelerating:(id)decelerating;
- (void)scrollawayScrollViewDidEndScrollingAnimation:(id)animation;
- (id)scrollView;
- (id)scrollViewAnnouncer;
- (void)collapsibleNavigationCoordinator:(id)coordinator didUpdateNavigationBarPercentCollapsed:(double)collapsed;
- (void)collapsibleNavigationCoordinator:(id)coordinator didUpdateTabBarPercentCollapsed:(double)collapsed;
- (void)zoomTransitionWillPrepareWithContext:(id)context;
- (void)zoomTransitionWillBeginWithContext:(id)context;
- (BOOL)shouldZoomFromTransition;
- (void)prepareBackwardZoomTransitionWithContext:(id)context completionHandler:(id /* block */)handler;
- (id)transitionZoomViewFromItem:(id)item withZoomContext:(id)context shouldMoveToVisiblePosition:(BOOL)position;
- (void)didCompleteBackwardZoomTransition;
- (BOOL)shouldZoomToTransition;
- (id)transitionZoomViewToItem:(id)item withZoomContext:(id)context;
- (id)transitionZoomItemOverrideOnExit;
- (void)didCompleteForwardZoomTransition;
- (void)prepareForwardZoomTransitionWithContext:(id)context completionHandler:(id /* block */)handler;
@end

#endif /* IGBloksViewController_h */
