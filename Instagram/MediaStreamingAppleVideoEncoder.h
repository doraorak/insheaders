//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef MediaStreamingAppleVideoEncoder_h
#define MediaStreamingAppleVideoEncoder_h
@import Foundation;

@class NSDictionary, NSError;
@protocol OS_dispatch_queue, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}, {function<void (const mediastreaming::StreamingError &)>="__f_"{__value_func<void (const mediastreaming::StreamingError &)>="__buf_"{type="__lx"[24C]}"__f_"^v}}, {function<void (mediastreaming::CMSampleBufferSmartPtr)>="__f_"{__value_func<void (mediastreaming::CMSampleBufferSmartPtr)>="__buf_"{type="__lx"[24C]}"__f_"^v}}, {unique_ptr<mediastreaming::VideoEncoderConfig, std::default_delete<mediastreaming::VideoEncoderConfig>>="__ptr_"{__compressed_pair<mediastreaming::VideoEncoderConfig *, std::default_delete<mediastreaming::VideoEncoderConfig>>="__value_"^{VideoEncoderConfig}}};

@interface MediaStreamingAppleVideoEncoder : NSObject {
  /* instance variables */
  struct OpaqueVTCompressionSession * _compressionSession;
  NSDictionary *_supportedCompressionSessionProperties;
  NSObject<OS_dispatch_queue> *_encodingQueue;
  struct unique_ptr<mediastreaming::VideoEncoderConfig, std::default_delete<mediastreaming::VideoEncoderConfig>> { struct __compressed_pair<mediastreaming::VideoEncoderConfig *, std::default_delete<mediastreaming::VideoEncoderConfig>> { struct VideoEncoderConfig *__value_; } __ptr_; } _config;
  int _dataProcessingMode;
  struct function<void (mediastreaming::CMSampleBufferSmartPtr)> { struct __value_func<void (mediastreaming::CMSampleBufferSmartPtr)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } _writeEncodedData;
  struct function<void (const mediastreaming::StreamingError &)> { struct __value_func<void (const mediastreaming::StreamingError &)> { struct type { unsigned char x[24] __lx; } __buf_; void *__f_; } __f_; } _fireError;
  struct WeakHolder * _weakHolder;
  BOOL _isInErrorState;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _isTearedDown;
  NSError *_encoderError;
  BOOL _hasReceivedFirstPreEncodedKeyFrame;
}

@property (retain, nonatomic) void * colorPrimaries;
@property (retain, nonatomic) void * colorTransfer;
@property (retain, nonatomic) void * colorMatrix;

/* instance methods */
- (id)initWithConfig:(const void *)config dataProcessingMode:(const int *)mode encodingQueue:(id)queue writeDataCallback:(struct function<void (mediastreaming::CMSampleBufferSmartPtr)> { struct __value_func<void (mediastreaming::CMSampleBufferSmartPtr)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })callback errorCallback:(struct function<void (const mediastreaming::StreamingError &)> { struct __value_func<void (const mediastreaming::StreamingError &)> { struct type { unsigned char x0[24] } x0; void * x1; } x0; })callback;
- (void)dealloc;
- (void)teardown;
- (void)performOnEncodingQueueSync:(id /* block */)sync;
- (void)performOnEncodingQueue:(id /* block */)queue;
- (void)raiseEncoderError:(int)error description:(id)description reason:(id)reason;
- (void)stopWithEncoderError;
- (BOOL)setupCompressionSession;
- (BOOL)setupCompressionSessionImpl;
- (BOOL)createCompressionSession;
- (void)updateColorConfigFromImageBuffer:(struct __CVBuffer *)buffer;
- (BOOL)configureCompressonSessionColorInfoColorPrimaries;
- (BOOL)configureCompressonSessionColorInfoColorTransferFunction;
- (BOOL)configureCompressonSessionColorInfoColorMatrix;
- (BOOL)configureCompressonSessionColorInfo;
- (BOOL)_isCompressionSessionPropertySupportedForKey:(struct __CFString *)key andValue:(void *)value;
- (BOOL)_isColorMatrixSupported:(void *)supported;
- (void)encodeVideo:(struct CMSampleBufferSmartPtr { undefined * * x0; struct opaqueCMSampleBuffer * x1; struct unique_ptr<mediastreaming::Resource<int>, std::default_delete<mediastreaming::Resource<int>>> { struct __compressed_pair<mediastreaming::Resource<int> *, std::default_delete<mediastreaming::Resource<int>>> { void * x0; } x0; } x2; })video;
- (void)vtCallBackWithStatus:(int)status infoFlags:(unsigned int)flags buffer:(struct opaqueCMSampleBuffer *)buffer sourceAttachments:(struct __CFDictionary *)attachments;
- (void)_teardownCompressionSession;
- (void)setVideoConfig:(const void *)config;
@end

#endif /* MediaStreamingAppleVideoEncoder_h */
