//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGFBVideoPlaybackView_h
#define IGFBVideoPlaybackView_h
@import Foundation;

#include "UIView.h"
#include "NSObject-Protocol.h"

@class FBMetalSurface, FBMetalSurfaceView, FBSurfaceView, IGGLVVideoPlayer, IGLContext, IGVideoComposition, NSString;
@protocol IGVideoPlaybackViewDelegate, {shared_ptr<iglu::filterkit::IFilter>="__ptr_"^{IFilter}"__cntrl_"^{__shared_weak_count}};

@interface IGFBVideoPlaybackView : UIView<NSObject> {
  /* instance variables */
  FBMetalSurface *_currentFrameInputMetalSurface;
  IGLContext *_context;
  struct shared_ptr<iglu::filterkit::IFilter> { struct IFilter *__ptr_; struct __shared_weak_count *__cntrl_; } _imageFilter;
  struct CGSize { double width; double height; } _maxResolution;
  FBMetalSurfaceView *_thumbnailMetalView;
  IGGLVVideoPlayer *_videoPlayer;
  FBMetalSurfaceView *_filteredMetalView;
}

@property (nonatomic) BOOL isPlaying;
@property (nonatomic) double progress;
@property (retain, nonatomic) FBSurfaceView *thumbnailView;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak, nonatomic) NSObject<IGVideoPlaybackViewDelegate> *delegate;
@property (retain, nonatomic) IGVideoComposition *video;
@property (readonly, nonatomic) double effectivePlaybackRate;
@property (nonatomic) double filterStrength;
@property (nonatomic) BOOL presentsWithTransaction;
@property (nonatomic) BOOL looping;
@property (nonatomic) BOOL muted;
@property (nonatomic) struct { struct { long long x0; int x1; unsigned int x2; long long x3; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; } playableRange;
@property (nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } startTime;
@property (nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } endTime;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } currentTime;
@property (readonly, nonatomic) struct { long long x0; int x1; unsigned int x2; long long x3; } duration;
@property (copy, nonatomic) id /* block */ didReceivePixelBuffer;
@property (nonatomic) BOOL supportCurrentFrameRerenders;
@property (readonly, copy, nonatomic) NSString *filterIdentifier;

/* instance methods */
- (id)initWithSize:(struct CGSize { double x0; double x1; })size context:(id)context;
- (id)initWithSize:(struct CGSize { double x0; double x1; })size maxResolution:(struct CGSize { double x0; double x1; })resolution context:(id)context;
- (void)layoutSubviews;
- (BOOL)isMuted;
- (BOOL)isLooping;
- (void)setFilterIdentifier:(id)identifier strength:(double)strength;
- (void)makeKey;
- (void)seekToPosition:(double)position;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)playFromStart;
- (void)playFromTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)stop;
- (void)play;
- (void)playInReverse;
- (void)_stopOnGoingIntoBackground;
- (void)setPlaybackRate:(double)rate time:(double)time atHostTime:(double)time;
- (void)togglePlayback;
- (void)videoPlayer:(id)player willLoadPixelBufferForTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time fromPlayerItem:(id)item;
- (void)videoPlayer:(id)player didLoadPixelBuffer:(struct __CVBuffer *)buffer forTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time fromPlayerItem:(id)item;
- (unsigned int)videoPlayer:(id)player formatOfPixelBufferForPlayerItem:(id)item;
- (void)videoPlayer:(id)player didLoadPlayerItem:(id)item;
- (struct CGSize { double x0; double x1; })videoPlayer:(id)player sizeOfPixelBufferForPlayerItem:(id)item;
- (id)videoPlayer:(id)player colorPropertiesForPlayerItem:(id)item;
- (void)videoPlayer:(id)player effectivePlaybackRateDidChange:(double)change;
- (void)rerenderCurrentFrame;
@end

#endif /* IGFBVideoPlaybackView_h */
