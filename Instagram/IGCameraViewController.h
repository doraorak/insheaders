//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGCameraViewController_h
#define IGCameraViewController_h
@import Foundation;

#include "UIViewController.h"
#include "IGCameraCaptureController.h"
#include "IGCameraConfig.h"
#include "IGCameraViewControllerSampleBufferObserver-Protocol.h"
#include "IGCaptureManaging-Protocol.h"
#include "IGLastFrameImageView.h"
#include "NSObject-Protocol.h"
#include "OS_dispatch_source-Protocol.h"
#include "_TtC20IGCameraControlPanel20IGCameraControlPanel.h"
#include "_TtC29IGCameraReactionEffectAlerter29IGCameraReactionEffectAlerter.h"
#include "_TtP20IGCameraControlPanel28IGCameraControlPanelDelegate_-Protocol.h"
#include "_TtP29IGCameraReactionEffectAlerter37IGCameraReactionEffectAlerterDelegate_-Protocol.h"

@class IGAREffectApplicator, IGAREffectModel, IGAREffectTargetModel, IGAsyncTask, IGCameraAREffectsLoggingContext, IGCameraDraftEffectConsentDialogueController, IGCameraDynamicPreviewView, IGCameraLoggerContext, IGCameraOpenPerfComponentsModel, IGMLARDeliveryDownloader, IGMLController, IGPopoverController, IGUserSession, NSArray, NSMutableDictionary, NSString, NSTimer, UIImageView, UIImpactFeedbackGenerator, UIView;
@protocol IGCameraViewControllerAREffectDelegate, IGCameraViewControllerAREffectNativeUIDelegate, IGCameraViewControllerAdditionalCaptureMetadataObserver, IGCameraViewControllerDataSource, IGCameraViewControllerDelegate, IGCameraViewControllerMLOutputListener;

@interface IGCameraViewController : UIViewController<_TtP20IGCameraControlPanel28IGCameraControlPanelDelegate_, _TtP29IGCameraReactionEffectAlerter37IGCameraReactionEffectAlerterDelegate_, NSObject> {
  /* instance variables */
  IGCameraConfig *_config;
  IGCameraCaptureController *_captureController;
  IGUserSession *_userSession;
  IGCameraDraftEffectConsentDialogueController *_draftEffectConsentDialogueController;
  IGPopoverController *_draftEffectConsentPopoverController;
  IGAREffectTargetModel *_draftEffectTarget;
  IGLastFrameImageView *_lastFrameImageView;
  UIView *_boomerangBurstView;
  UIImageView *_focusRing;
  UIView *_fakeTorchOverlayView;
  BOOL _unmirrorOutboundFrontCameraVideoFeatureEnabled;
  BOOL _isFrontCameraVideoMirrored;
  BOOL _isCameraPreviewMirrored;
  BOOL _isVideoCall;
  BOOL _wasLastCameraSwitchUsingMultiCaptureIfPossible;
  BOOL _isBackgrounded;
  BOOL _waitingForFirstFrameAfterCameraSwitched;
  double _initialZoomScale;
  NSMutableDictionary *_lastReceivedBuffers;
  IGAsyncTask *_multiPhotoCaptureTask;
  IGAsyncTask *_photoCaptureTask;
  BOOL _didReceiveFirstBuffer;
  long long _draftEffectLoadingInstanceKey;
  BOOL _needToCancelCleanup;
  IGCameraOpenPerfComponentsModel *_perfComponents;
  IGCameraLoggerContext *_loggerContext;
  IGCameraAREffectsLoggingContext *_effectsLoggingContext;
  NSTimer *_idleTimer;
  UIImpactFeedbackGenerator *_impactGenerator;
  NSObject<OS_dispatch_source> *_boomerangBurstHapticFeedbackTimer;
  BOOL _isFlipping;
  long long _mlFramesCounter;
  IGMLARDeliveryDownloader *_mlDownloader;
  IGMLController *_handGestureController;
  BOOL _isCameraOverlayAnimating;
  long long _arEffectSurface;
  BOOL _isHdrEnabledWhenNoAREffect;
  _TtC20IGCameraControlPanel20IGCameraControlPanel *_controlPanel;
  struct { IGStrictUserFlowLogger *strictLogger; unsigned long long userFlowInstanceId; } _photoCaptureLoggerStruct;
  _TtC29IGCameraReactionEffectAlerter29IGCameraReactionEffectAlerter *_reactionEffectAlerter;
  BOOL _isGestureControlSupported;
  BOOL _isAREffectAvailable;
  BOOL _showTapIndicator;
  BOOL _isDemoEffectCreationStyleApplied;
  BOOL _bracketedCaptureLowLight;
  BOOL _keepDeviceAwake;
  BOOL _pauseCameraInfoChangeNotifications;
  BOOL _preventCleanupCaptureOnDisappear;
  BOOL _preventEffectDeactivationOnDisappear;
  BOOL _isMicrophoneDisabled;
  BOOL _multiClipCaptureEnabled;
  BOOL _canVideoCallInPiP;
  NSObject<IGCameraViewControllerAREffectDelegate> *_arEffectDelegate;
  NSObject<IGCameraViewControllerSampleBufferObserver> *_sampleBufferObserver;
  NSObject<IGCameraViewControllerAREffectNativeUIDelegate> *_arEffectNativeUIDelegate;
  NSObject<IGCameraViewControllerAdditionalCaptureMetadataObserver> *_additionalCaptureMetadataObserver;
  NSObject<IGCameraViewControllerMLOutputListener> *_mlOutputListener;
  IGAREffectTargetModel *_pendingEffectTarget;
}

@property (nonatomic) long long lightingMode;
@property (readonly, nonatomic) BOOL isCaptureAvailable;
@property (readonly, nonatomic) BOOL isInCaptureSession;
@property (readonly, nonatomic) BOOL isVideoCaptureRunning;
@property (readonly, nonatomic) BOOL isRecording;
@property (readonly, nonatomic) NSObject<IGCaptureManaging> *captureManager;
@property (nonatomic) long long captureState;
@property (readonly, nonatomic) IGAREffectApplicator *arEffectApplicator;
@property (readonly, nonatomic) long long cameraPosition;
@property (readonly, nonatomic) NSString *mainCameraDeviceID;
@property (readonly, nonatomic) long long deviceOrientation;
@property (weak, nonatomic) NSObject<IGCameraViewControllerDataSource> *dataSource;
@property (weak, nonatomic) NSObject<IGCameraViewControllerDelegate> *delegate;
@property (nonatomic) double maxVideoDuration;
@property (readonly, nonatomic) IGCameraDynamicPreviewView *cameraPreviewView;
@property (nonatomic) BOOL allowHighResolutionCapture;
@property (nonatomic) BOOL hdrVideoCaptureEnabled;
@property (readonly, nonatomic) BOOL bracketedCaptureEnabled;
@property (readonly, nonatomic) BOOL dualEnabled;
@property (readonly, nonatomic) double zoomLevel;
@property (readonly, nonatomic) NSArray *captureDevices;
@property (nonatomic) unsigned long long analyticsProductName;
@property (readonly, nonatomic) IGAREffectModel *currentEffect;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (void)dealloc;
- (id)initWithConfig:(id)config userSession:(id)session perfComponents:(id)components loggingContext:(id)context photoCaptureLoggerStruct:(struct { id x0; unsigned long long x1; })struct;
- (id)initWithConfig:(id)config userSession:(id)session perfComponents:(id)components loggingContext:(id)context;
- (void)loadView;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidLoad;
- (void)viewDidDisappear:(BOOL)disappear;
- (void)viewWillLayoutSubviews;
- (void)viewDidLayoutSubviews;
- (void)lastDisplayedFrameWithCompletion:(id /* block */)completion;
- (BOOL)setEffectListWithIDs:(id)ids;
- (void)setMultiClipCaptureEnabled:(BOOL)enabled;
- (void)startCaptureSession;
- (void)_fetchTargetEffectModelAndMetadata:(id)metadata;
- (void)stopCaptureSessionAndCleanup;
- (void)reset;
- (void)didBecomeActive;
- (void)willBecomeInactive;
- (void)stopRecording;
- (void)prepareToTakeCaptureScreenshot;
- (void)finishedTakingCaptureScreenshot;
- (void)setZoomDelta:(double)delta;
- (void)switchCaptureDevice:(id)device withUserInput:(unsigned long long)input;
- (void)_applicationDidBecomeActive:(id)active;
- (void)_applicationDidEnterBackground:(id)background;
- (void)browserControllerDidDismissWithUrl:(id)url;
- (void)browserControllerDidChangeUrl:(id)url;
- (void)didRequestPopupForNavigationAction:(id)action;
- (void)nativeUIControlServiceHandler:(id)handler shouldConfigurePickerWithConfiguration:(id)configuration;
- (void)nativeUIControlServiceHandlerShouldShowPicker:(id)picker;
- (void)nativeUIControlServiceHandlerShouldHidePicker:(id)picker;
- (void)nativeUIControlServiceHandler:(id)handler shouldSelectPickerIndex:(unsigned long long)index;
- (void)nativeUIControlServiceHandler:(id)handler didSelectPickerItem:(id)item atIndex:(unsigned long long)index;
- (void)nativeUIControlServiceHandlerShouldShowSlider:(id)slider;
- (void)nativeUIControlServiceHandlerShouldHideSlider:(id)slider;
- (void)nativeUIControlServiceHandler:(id)handler shouldChangeSliderValue:(double)value;
- (void)nativeUIControlServiceHandlerShouldShowEditableTextInput:(id)input currentText:(id)text;
- (void)nativeUIControlServiceHandlerShouldShowTextInput:(id)input currentText:(id)text;
- (void)nativeUIControlServiceHandlerShouldHideTextInput:(id)input;
- (void)nativeUIControlServiceHandler:(id)handler configureSlider:(id)slider;
- (void)captureManagerDidDropAudioBuffer;
- (void)captureManagerDidCaptureAudioBuffer:(struct opaqueCMSampleBuffer *)buffer withVolumeLevel:(float)level;
- (void)captureManagerDidCaptureVideoPreviewBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (void)captureManagerDidDropVideoBuffer;
- (void)captureManagerDidCaptureVideoBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (void)captureManagerSystemPressureLevelDidChange:(id)change;
- (void)captureManagerReactionEffectTriggered:(id)triggered;
- (void)captureManagerWillProcessSampleBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (struct opaqueCMSampleBuffer *)captureManagerModifyProcessedSampleBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (void)captureManagerDidProcessVideoSampleBuffer:(struct opaqueCMSampleBuffer *)buffer updatedSampleBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (void)captureManagerWillTakePhoto;
- (void)captureManagerNeedsResume:(BOOL)resume;
- (void)captureManagerDidReceiveUnhandledError:(id)error;
- (void)captureManagerDidChangeFlashAvailability;
- (struct CGSize { double x0; double x1; })captureManagerPreviewOutputSize;
- (void)cameraCaptureController:(id)controller didUpdateRecordProgress:(double)progress;
- (void)cameraCaptureController:(id)controller didFinishWithDevicePosition:(long long)position videoInfos:(id)infos images:(id)images;
- (void)cameraCaptureController:(id)controller didFinishWithBoomerangManager:(id)manager;
- (void)cameraCaptureControllerWillStopRecording:(id)recording;
- (void)cameraCaptureControllerDidStopRecording:(id)recording timestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration error:(id)error;
- (void)cameraCaptureControllerWillRequestStartRecording:(id)recording;
- (void)cameraCaptureControllerDidRequestStartRecording:(id)recording;
- (void)cameraCaptureController:(id)controller didFailToStartRecordingWithError:(id)error;
- (void)cameraCaptureControllerDidStartRecording:(id)recording timestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (void)cameraCaptureController:(id)controller failedToCapturePhotoWithError:(id)error;
- (void)cameraCaptureController:(id)controller startAudioSessionDidError:(id)error;
- (void)cameraCaptureControllerSuccessfullyCapturedPhoto:(id)photo;
- (void)cameraCaptureController:(id)controller didPauseRecording:(struct { long long x0; int x1; unsigned int x2; long long x3; })recording;
- (void)cameraCaptureController:(id)controller didResumeRecording:(struct { long long x0; int x1; unsigned int x2; long long x3; })recording;
- (void)captureManagerHasFinishedLoadingCaptureSession;
- (void)captureManagerVideoSessionWillStartRunning;
- (void)captureManagerVideoSessionDidStartRunning;
- (void)captureManagerVideoSessionWillStopRunning;
- (void)captureManagerVideoSessionDidStopRunning;
- (void)captureManagerVideoSessionWasInterrupted;
- (void)captureManagerVideoSessionInterruptionEnded;
- (void)captureManagerDidDetectFaceRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect;
- (void)captureManagerDidUpdateIsFlashScene:(BOOL)scene;
- (void)instructionServiceHandler:(id)handler requestsShowAREffectTextInstructions:(id)instructions forDuration:(double)duration;
- (void)instructionServiceHandler:(id)handler requestsShowAREffectImages:(id)images;
- (void)instructionServiceHandlerRequestsHideAREffectInstructions:(id)instructions;
- (void)arEffectApplicator:(id)applicator didFailWithTargetEffectResponse:(id)response;
- (void)arEffectApplicator:(id)applicator didFailFetchWithError:(id)error;
- (void)arEffectApplicatorAREffectDidBecomeAvailable:(id)available;
- (void)arEffectApplicatorUserDidTurnOffAREffect:(id)areffect;
- (void)arEffectApplicator:(id)applicator didUpdateAREffectTouchSupportedStatus:(BOOL)status;
- (void)arEffectApplicatorDidUpdateEffectList:(id)list fromNetwork:(BOOL)network;
- (void)arEffectApplicator:(id)applicator didDownloadAREffectAsset:(id)asset withIsPrefetch:(BOOL)prefetch;
- (void)arEffectApplicatorDidFailToDownload:(id)download;
- (void)arEffectApplicator:(id)applicator didFailToDownloadAssetForAssetModel:(id)model;
- (void)arEffectApplicatorDidFailToDownloadRemoteModel:(id)model;
- (void)arEffectApplicator:(id)applicator willApplyAREffect:(id)areffect;
- (void)arEffectApplicatorWillUnApplyAREffect:(id)areffect isSwitchingAREffect:(BOOL)areffect;
- (void)arEffectApplicator:(id)applicator willAddFilterWithConfig:(id)config assetModel:(id)model completion:(id /* block */)completion;
- (void)arEffectApplicator:(id)applicator willAddFilter:(id)filter completion:(id /* block */)completion;
- (BOOL)arEffectApplicatorCanUseAREngineFilterFlow:(id)flow;
- (void)arEffectApplicator:(id)applicator willAddFilter:(id)filter completionWithServiceHost:(id /* block */)host;
- (void)arEffectApplicator:(id)applicator didSetEffect:(id)effect withAttribution:(id)attribution;
- (void)arEffectApplicatorDidFailToRender:(id)render;
- (void)arEffectApplicator:(id)applicator didRenderEffect:(id)effect;
- (void)recognizedHandGesture:(id)gesture;
- (BOOL)arEffectApplicator:(id)applicator canRequestChangeCaptureDevicePosition:(long long)position;
- (void)arEffectApplicator:(id)applicator requestUpdateCaptureDevicePosition:(long long)position;
- (void)cameraControlPanelWantsDisablingOfAREffects;
- (void)cameraControlPanelWantsDisablingOfDual;
- (void)cameraControlPanelDidModifyHDRSettingWithIsOn:(BOOL)on;
- (BOOL)cameraReactionsEffectAlerterIsArEffectActive;
@end

#endif /* IGCameraViewController_h */
