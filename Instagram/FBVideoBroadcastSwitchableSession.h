//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBVideoBroadcastSwitchableSession_h
#define FBVideoBroadcastSwitchableSession_h
@import Foundation;

#include "FBVideoBroadcastInfraSwitchHandler.h"
#include "FBVideoBroadcastRTCSessionFactoryProtocol-Protocol.h"
#include "FBVideoBroadcastSession-Protocol.h"
#include "FBVideoBroadcastSessionBase.h"
#include "FBVideoBroadcastSessionDelegate-Protocol.h"
#include "FBVideoBroadcastSessionLiveWithDelegate-Protocol.h"
#include "FBVideoBroadcastSwitchableSessionDelegateShim-Protocol.h"
#include "FBVideoBroadcastSwitchableSessionRTCExtensions-Protocol.h"
#include "FBVideoRecordingResultDataSource-Protocol.h"
#include "FBVideoStreamingLogger-Protocol.h"

@class NSMutableSet, NSSet, NSString;
@protocol FBVideoBroadcastDynamicConfigProvider, FBVideoBroadcastSessionConnectionSetupDelegate, FBVideoBroadcastSessionLiveWithDelegate><FBVideoBroadcastSwitchableSessionDelegate><FBVideoBroadcastSessionDelegate, {?="diskRecordingConfig"{DiskVideoRecorderConfig="availableSpaceThresholdInMB"i"checkAvailableSpaceIntervalInSeconds"{duration<double, std::ratio<1>>="__rep_"d}"movieFragmentIntervalInSeconds"{duration<double, std::ratio<1>>="__rep_"d}"videoConfig"{VideoConfig="width"i"height"i"bitRate"i"fps"i"allowBFrames"B"keyFrameIntervalFrames"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"keyFrameIntervalSeconds"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"useMainProfile"B"codecType"C"allowPreEncodedFrames"B}"audioConfig"{AudioConfig="sampleRate"i"bitRate"i"channels"i"profile"C"useAudioASC"B"allowPreEncodedFrames"B"useAudioCBR"B}"enablePartialRecordingIfNoEnoughSpace"B"minValidDurationMs"i"maxValidDvrLiveDurationDiffMs"i"frameCheckRateThreshold"d"frameCheckTimePeriod"i"wifiDVRUploadFileSizeThresholdInBytes"Q"lteDVRUploadFileSizeThresholdInBytes"Q"cellDVRUploadFileSizeThresholdInBytes"Q"offlineStreamingDVRFileSizeLimitInBytes"Q"enableSmartDVRUpload"B"enableDebugLogging"B"thermalThreshold"i"batteryLevelThreshold"i"dvrMaxDurationMs"i"adaptiveBitratePredictionThreshold"d}"recordOnDisk"B"useTimeSeriesLogging"B"skipFlushDuringSwap"B"initialVideoBitrateKbps"i"minVideoBitrateKbps"i"maxVideoBitrateKbps"i"bitrateScalerGranularity"i"bitrateScalerMinHeight"i"bitrateScalerMaxHeight"i"framerate"i"h264MaxEncodeFailureRetries"i"h264UseCABAC"B"audioInterruptionRestartDisabled"B"aacOverride"B"useAudioUnitWrapper"B"rtcH264ResetEncoderOnError"B"preferWifi"B"loggingLevels"@"NSString""useSendStreamDry"B"useNewFrameDropperImplementation"B"enableSendSidePacer"B"useMediaFromJoinResponse"B"isLiveWithRsysStack"B"canHostInviteGuestAudioOnly"B"cameraEnabled"B"backgroundModeEnabled"B"microphoneEnabledAtStartup"B"enablVideoFrameCenterCropping"B}, {SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault>="state_"{atomic<unsigned int>="__a_"{__cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>>="__a_value"AI}}}, {shared_ptr<FB::Functional::PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}};

@interface FBVideoBroadcastSwitchableSession : NSObject<FBVideoBroadcastSessionDelegate, FBVideoBroadcastSessionLiveWithDelegate, FBVideoRecordingResultDataSource, FBVideoBroadcastSession, FBVideoBroadcastSwitchableSessionRTCExtensions> {
  /* instance variables */
  struct SharedMutexImpl<false, void, std::atomic, folly::SharedMutexPolicyDefault> { struct atomic<unsigned int> { struct __cxx_atomic_impl<unsigned int, std::__cxx_atomic_base_impl<unsigned int>> { atomic  __a_value; unsigned int x0; } __a_; } state_; } _sessionImlMutex;
  struct { struct DiskVideoRecorderConfig { int availableSpaceThresholdInMB; struct duration<double, std::ratio<1>> { double __rep_; } checkAvailableSpaceIntervalInSeconds; struct duration<double, std::ratio<1>> { double __rep_; } movieFragmentIntervalInSeconds; struct VideoConfig { int width; int height; int bitRate; int fps; BOOL allowBFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalSeconds; BOOL useMainProfile; unsigned char codecType; BOOL allowPreEncodedFrames; } videoConfig; struct AudioConfig { int sampleRate; int bitRate; int channels; unsigned char profile; BOOL useAudioASC; BOOL allowPreEncodedFrames; BOOL useAudioCBR; } audioConfig; BOOL enablePartialRecordingIfNoEnoughSpace; int minValidDurationMs; int maxValidDvrLiveDurationDiffMs; double frameCheckRateThreshold; int frameCheckTimePeriod; unsigned long long wifiDVRUploadFileSizeThresholdInBytes; unsigned long long lteDVRUploadFileSizeThresholdInBytes; unsigned long long cellDVRUploadFileSizeThresholdInBytes; unsigned long long offlineStreamingDVRFileSizeLimitInBytes; BOOL enableSmartDVRUpload; BOOL enableDebugLogging; int thermalThreshold; int batteryLevelThreshold; int dvrMaxDurationMs; double adaptiveBitratePredictionThreshold; } diskRecordingConfig; BOOL recordOnDisk; BOOL useTimeSeriesLogging; BOOL skipFlushDuringSwap; int initialVideoBitrateKbps; int minVideoBitrateKbps; int maxVideoBitrateKbps; int bitrateScalerGranularity; int bitrateScalerMinHeight; int bitrateScalerMaxHeight; int framerate; int h264MaxEncodeFailureRetries; BOOL h264UseCABAC; BOOL audioInterruptionRestartDisabled; BOOL aacOverride; BOOL useAudioUnitWrapper; BOOL rtcH264ResetEncoderOnError; BOOL preferWifi; NSString *loggingLevels; BOOL useSendStreamDry; BOOL useNewFrameDropperImplementation; BOOL enableSendSidePacer; BOOL useMediaFromJoinResponse; BOOL isLiveWithRsysStack; BOOL canHostInviteGuestAudioOnly; BOOL cameraEnabled; BOOL backgroundModeEnabled; BOOL microphoneEnabledAtStartup; BOOL enablVideoFrameCenterCropping; } _rtcConfig;
  NSObject<FBVideoBroadcastDynamicConfigProvider> *_dynamicConfig;
  NSObject<FBVideoBroadcastRTCSessionFactoryProtocol> *_rtcSessionFactory;
  id /* block */ _rtmpSessionFactory;
  FBVideoBroadcastSessionBase *_broadcastSessionImpl;
  FBVideoBroadcastSessionBase *_upcomingBroadcastSessionImpl;
  FBVideoBroadcastInfraSwitchHandler *_infraSwitchHandler;
  BOOL _skipFlushDuringSwap;
  NSString *_userID;
  long long _liveSwapState;
  NSObject<FBVideoStreamingLogger> *_logger;
  BOOL _awaitingFirstRTCFrame;
  BOOL _awaitingFirstRTCDVRAudio;
  NSObject<FBVideoBroadcastSwitchableSessionDelegateShim> *_delegateShim;
  struct FBVideoBroadcastRtmpSwapStats { double audioBufferDurationSeconds; double videoBufferDurationSeconds; double lastAudioPts; double lastVideoPts; double lastAudioPtsStreamTime; double callStartedToSocketWritabilityLatencySeconds; double callJoinedToSocketWritabilityLatencySeconds; } _swapStats;
  NSMutableSet *_guestsToBeInvitedAfterSwap;
  unsigned long long _layoutToUseAfterSwap;
  BOOL _abortFutureSwapBacks;
  struct { struct CGSize { double width; double height; } cropSize; BOOL isPortrait; } _lastCropInfo;
  BOOL _microphoneEnabledPriorToSwap;
  struct shared_ptr<FB::Functional::PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } _diskRecordingResultPromise;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak) NSObject<FBVideoBroadcastSessionDelegate> *delegate;
@property (weak) NSObject<FBVideoBroadcastSessionConnectionSetupDelegate> *connectionSetupDelegate;
@property (readonly, copy, nonatomic) NSSet *currentOrInvitedGuests;

/* instance methods */
- (id)initWithState:(long long)state rtmpSessionFactory:(id /* block */)factory rtcSessionFactory:(id)factory rtcSessionConfig:(struct { struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x0; BOOL x1; BOOL x2; BOOL x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; id x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; BOOL x26; BOOL x27; BOOL x28; })config dynamicConfigProvider:(id)provider skipFlushDuringSwap:(BOOL)swap logger:(id)logger userID:(id)id sessionDelegateShim:(id)shim;
- (void)finallyFetchedBroadcastID:(id)id withRTCSessionConfig:(struct { struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x0; BOOL x1; BOOL x2; BOOL x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; id x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; BOOL x26; BOOL x27; BOOL x28; })config rtmpConfig:(struct { id x0; id x1; id x2; id x3; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x4; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x5; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x6; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x7; struct { int x0; int x1; int x2; double x3; int x4; int x5; int x6; int x7; int x8; int x9; unsigned long long x10; double x11; int x12; double x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; id x23; double x24; long long x25; int x26; BOOL x27; int x28; BOOL x29; BOOL x30; int x31; int x32; long long x33; BOOL x34; BOOL x35; int x36; BOOL x37; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x38; BOOL x39; BOOL x40; int x41; BOOL x42; BOOL x43; BOOL x44; int x45; BOOL x46; } x8; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x9; struct AdaptiveBitrateConfig { BOOL x0; int x1; int x2; int x3; int x4; int x5; double x6; int x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x8; BOOL x9; double x10; double x11; double x12; int x13; int x14; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x15; BOOL x16; int x17; struct AdaptiveBitrateExperimentalParameters { int x0; float x1; } x18; struct AdaptiveBitrateBandwidthBasedParameters { int x0; int x1; int x2; int x3; int x4; } x19; } x10; struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x11; BOOL x12; struct FBVideoBroadcastSessionTimestampConfig { BOOL x0; BOOL x1; BOOL x2; } x13; struct LiveTraceConfig { BOOL x0; int x1; int x2; } x14; BOOL x15; BOOL x16; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x17; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x18; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x19; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x20; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x21; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x22; })config rtmpMessageChannel:(id)channel;
- (void)updateRtmpConfig:(struct { id x0; id x1; id x2; id x3; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x4; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x5; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x6; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x7; struct { int x0; int x1; int x2; double x3; int x4; int x5; int x6; int x7; int x8; int x9; unsigned long long x10; double x11; int x12; double x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; id x23; double x24; long long x25; int x26; BOOL x27; int x28; BOOL x29; BOOL x30; int x31; int x32; long long x33; BOOL x34; BOOL x35; int x36; BOOL x37; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x38; BOOL x39; BOOL x40; int x41; BOOL x42; BOOL x43; BOOL x44; int x45; BOOL x46; } x8; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x9; struct AdaptiveBitrateConfig { BOOL x0; int x1; int x2; int x3; int x4; int x5; double x6; int x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x8; BOOL x9; double x10; double x11; double x12; int x13; int x14; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x15; BOOL x16; int x17; struct AdaptiveBitrateExperimentalParameters { int x0; float x1; } x18; struct AdaptiveBitrateBandwidthBasedParameters { int x0; int x1; int x2; int x3; int x4; } x19; } x10; struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x11; BOOL x12; struct FBVideoBroadcastSessionTimestampConfig { BOOL x0; BOOL x1; BOOL x2; } x13; struct LiveTraceConfig { BOOL x0; int x1; int x2; } x14; BOOL x15; BOOL x16; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x17; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x18; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x19; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x20; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x21; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x22; })config;
- (void)setMicrophoneEnabled:(BOOL)enabled;
- (BOOL)isMicrophoneEnabled;
- (void)softMuteUsers:(id)users;
- (void)processAudio:(struct opaqueCMSampleBuffer *)audio;
- (void)processVideo:(struct opaqueCMSampleBuffer *)video;
- (void)processEventMessage:(unsigned long long)message payload:(id)payload;
- (void)processEventMessage:(unsigned long long)message duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration payload:(id)payload;
- (void)processEventMessage:(unsigned long long)message duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration delay:(struct { long long x0; int x1; unsigned int x2; long long x3; })delay payload:(id)payload;
- (void)connectAndImmediatelyAllowStreaming:(BOOL)streaming;
- (void)stop:(BOOL)stop;
- (void)swapVideoWidthAndHeightAfterOrientationChange;
- (void)pause:(BOOL)pause;
- (void)resumeAndUpload:(BOOL)upload;
- (void)startProcessingDataAndStreamToServer;
- (void)ringUsers:(id)users withLayout:(unsigned long long)layout;
- (void)addUsers:(id)users withLayout:(unsigned long long)layout;
- (void)startCall;
- (void)removeGuest:(id)guest completion:(id /* block */)completion;
- (void)cancelInvitationForGuest:(id)guest completion:(id /* block */)completion;
- (void)join;
- (void)leave;
- (void)declineInvitation;
- (struct FBVideoBroadcastSessionStats { struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; struct { long long x0; int x1; unsigned int x2; long long x3; } x3; double x4; unsigned long long x5; unsigned long long x6; struct { long long x0; int x1; unsigned int x2; long long x3; } x7; struct { long long x0; int x1; unsigned int x2; long long x3; } x8; double x9; double x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; double x14; long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; BOOL x23; BOOL x24; unsigned int x25; unsigned int x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; })stats;
- (void)onInterruptionForReasonBackground:(BOOL)background;
- (void)onInterruptionEnded;
- (Class)videoEncoderClass;
- (void)cameraWillChange;
- (void)cameraDidChange;
- (void)stopDVRIfRunning;
- (void)updateAudioEnhancementEngineForNoiseRemover:(BOOL)remover andVoiceEnhancer:(BOOL)enhancer;
- (void)setAudioEnhancementPreLiveRecording:(BOOL)recording;
- (void)setAudioEnhancementPreLiveRecordingReset;
- (void)setAudioEnhancementPreLivePlayback:(BOOL)playback;
- (void)setAudioEnhancementPreLivePlaybackRewind;
- (BOOL)isConnectedToServer;
- (BOOL)hasSentMediaDataToServer;
- (BOOL)supportOfflineStreaming;
- (long long)readyState;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastRecordedAudioTimestamp;
- (void)setBaseTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })baseTimestamp;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })convertDeviceTimestampToStreamTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (id)diskRecorder;
- (void)broadcastSessionDidConnect:(id)connect withSpeedTestStatus:(struct FBNetworkSpeedTestStatus { int x0; double x1; unsigned long long x2; id x3; BOOL x4; })status;
- (void)broadcastSessionDidFinishRecording:(id)recording withResult:(id)result;
- (void)broadcastSessionDidDisconnectNetwork:(id)network withEndOfStreamError:(id)error;
- (void)broadcastSessionDidFail:(id)fail withLoggingInfo:(struct FBVideoBroadcastSessionLoggingInfo { id x0; id x1; BOOL x2; })info;
- (void)broadcastSessionDidLoseConnection:(id)connection error:(id)error;
- (void)broadcastSessionSendDidTimeout:(id)timeout;
- (void)broadcastSession:(id)session didDropPackets:(struct shared_ptr<std::vector<facebook::mobile::xplat::livestreaming::DroppedFrame>> { void * x0; struct __shared_weak_count * x1; })packets dropReason:(id)reason;
- (void)broadcastSession:(id)session didDropFrameWithType:(id)type pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })pts dropReason:(id)reason;
- (void)broadcastSessionDidReceiveEventMessageAck:(id)ack;
- (void)broadcastSessionShowUserActionableMessage:(int)message;
- (BOOL)broadcastSessionShouldAdjustTimer:(id)timer;
- (void)broadcastSession:(id)session setAccumulatedStreamGapSeconds:(id)seconds;
- (void)broadcastSession:(id)session didChangeBaseTimestamp:(struct { long long x0; int x1; unsigned int x2; long long x3; })timestamp;
- (void)broadcastSessionDidProcessAudio:(id)audio;
- (void)broadcastSession:(id)session completedSpeedTestWithStatus:(struct FBNetworkSpeedTestStatus { int x0; double x1; unsigned long long x2; id x3; BOOL x4; })status;
- (void)broadcastSession:(id)session didUpdateStreamingInfo:(struct Info { struct Optional<std::string> { struct StorageNonTriviallyDestructible { union { char x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; } x0; BOOL x1; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; })info;
- (void)broadcastSession:(id)session didRemoveCurrentOrInvitedGuests:(id)guests;
- (void)broadcastSession:(id)session didInviteGuests:(id)guests;
- (void)broadcastSession:(id)session didUpdateStatusToConnectingGuest:(id)guest;
- (void)broadcastSession:(id)session guestDidNotRespondToInvitation:(id)invitation;
- (void)broadcastSession:(id)session guestDidDeclineInvitation:(id)invitation;
- (void)broadcastSession:(id)session guestDidAcceptInvitation:(id)invitation;
- (void)broadcastSession:(id)session guest:(id)guest didJoinBroadcastWithVideoView:(id)view;
- (void)broadcastSession:(id)session didStallForGuest:(id)guest;
- (void)broadcastSession:(id)session didResumeForGuest:(id)guest;
- (void)broadcastSession:(id)session isUnreachableForGuest:(id)guest;
- (void)broadcastSession:(id)session guestDidLeaveBroadcast:(id)broadcast;
- (void)broadcastSessionDidReceiveInvitation:(id)invitation;
- (void)broadcastSessionDidReceiveDismiss:(id)dismiss reason:(id)reason;
- (void)broadcastSession:(id)session guestDidFailToLeaveBroadcast:(id)broadcast;
- (void)broadcastSession:(id)session didUpdateFlowState:(long long)state;
- (void)broadcastSession:(id)session didUpdateDebugInfo:(id)info;
- (void)broadcastSession:(id)session didUpdateCallModel:(id)model;
- (void)setDiskRecorder:(id)recorder;
- (void)switchToRTMPWithTimeout:(unsigned long long)timeout;
- (long long)liveSwapState;
- (void)setVideoSubscriptions:(id)subscriptions dominantStreamQuality:(unsigned long long)quality;
- (void)setFrameCropInfo:(struct { struct CGSize { double x0; double x1; } x0; BOOL x1; })info;
- (id)liveWithSessionStartedTime;
- (id)liveWithSessionUserJoinedTime;
- (struct shared_ptr<FB::Functional::PromiseEither<NSError *, FBDiskVideoRecorderDiskResults *>> { void * x0; struct __shared_weak_count * x1; })diskRecordingResults;
@end

#endif /* FBVideoBroadcastSwitchableSession_h */
