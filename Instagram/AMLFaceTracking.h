//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef AMLFaceTracking_h
#define AMLFaceTracking_h
@import Foundation;

@protocol {FaceTrackerWrapper="faceTracker"{AMLFaceTrackerOcean="_vptr$IFaceTracker"^^?"_vptr$QuickPerformanceLoggable"^^?"performanceLogger_"{shared_ptr<facebook::perflogger::QPLBase>="__ptr_"^{QPLBase}"__cntrl_"^{__shared_weak_count}}"_vptr$BugReportLoggable"^^?"bugReportLogger_"{shared_ref<arfx::logging::IBugReportLogger>="target_"{shared_ptr<arfx::logging::IBugReportLogger>="__ptr_"^{IBugReportLogger}"__cntrl_"^{__shared_weak_count}}}"_vptr$CrashMetadataLoggable"^^?"crashMetadataLogger_"{shared_ptr<arfx::logging::ICrashMetadataLogger>="__ptr_"^{ICrashMetadataLogger}"__cntrl_"^{__shared_weak_count}}"impl_"{unique_ptr<aml::facetracker::AMLFaceTrackerOcean::Impl, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>>="__ptr_"{__compressed_pair<aml::facetracker::AMLFaceTrackerOcean::Impl *, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>>="__value_"^{Impl}}}"meshType_"C"trackerMode_"C"referenceFaceShapeLoader_"{unique_ref<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>>="target_"{unique_ptr<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>>="__ptr_"{__compressed_pair<aml::facetracker::ReferenceFaceShapeLoader *, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>>="__value_"^{ReferenceFaceShapeLoader}}}}}};

@interface AMLFaceTracking : NSObject {
  /* instance variables */
  struct FaceTrackerWrapper { struct AMLFaceTrackerOcean { undefined * *_vptr$IFaceTracker; undefined * *_vptr$QuickPerformanceLoggable; struct shared_ptr<facebook::perflogger::QPLBase> { struct QPLBase *__ptr_; struct __shared_weak_count *__cntrl_; } performanceLogger_; undefined * *_vptr$BugReportLoggable; struct shared_ref<arfx::logging::IBugReportLogger> { struct shared_ptr<arfx::logging::IBugReportLogger> { struct IBugReportLogger *__ptr_; struct __shared_weak_count *__cntrl_; } target_; } bugReportLogger_; undefined * *_vptr$CrashMetadataLoggable; struct shared_ptr<arfx::logging::ICrashMetadataLogger> { struct ICrashMetadataLogger *__ptr_; struct __shared_weak_count *__cntrl_; } crashMetadataLogger_; struct unique_ptr<aml::facetracker::AMLFaceTrackerOcean::Impl, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>> { struct __compressed_pair<aml::facetracker::AMLFaceTrackerOcean::Impl *, std::default_delete<aml::facetracker::AMLFaceTrackerOcean::Impl>> { struct Impl *__value_; } __ptr_; } impl_; unsigned char meshType_; unsigned char trackerMode_; struct unique_ref<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> { struct unique_ptr<aml::facetracker::ReferenceFaceShapeLoader, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> { struct __compressed_pair<aml::facetracker::ReferenceFaceShapeLoader *, std::default_delete<aml::facetracker::ReferenceFaceShapeLoader>> { struct ReferenceFaceShapeLoader *__value_; } __ptr_; } target_; } referenceFaceShapeLoader_; } faceTracker; } _faceTracker;
}

/* instance methods */
- (id)initWithTrackerMode:(unsigned char)mode setHighPolyMode:(BOOL)mode maxDetectionScales:(unsigned long long)scales;
- (id)initWithTrackerMode:(unsigned char)mode setHighPolyMode:(BOOL)mode maxDetectionScales:(unsigned long long)scales setUseEarTracker:(BOOL)tracker;
- (id)initWithTrackerMode:(unsigned char)mode setHighPolyMode:(BOOL)mode maxDetectionScales:(unsigned long long)scales setUseEarTracker:(BOOL)tracker setUseIrisTracker:(BOOL)tracker;
- (id)initWithTrackerMode:(unsigned char)mode setHighPolyMode:(BOOL)mode maxDetectionScales:(unsigned long long)scales setUseEarTracker:(BOOL)tracker setUseIrisTracker:(BOOL)tracker setUseFacialGestures:(BOOL)gestures;
@end

#endif /* AMLFaceTracking_h */
