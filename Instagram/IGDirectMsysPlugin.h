//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGDirectMsysPlugin_h
#define IGDirectMsysPlugin_h
@import Foundation;

#include "NSObject-Protocol.h"

@class NSString;

@interface IGDirectMsysPlugin : NSObject<NSObject>

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (void)activateAndGetActiveUnderlyingMailboxForUserSession:(id)session completion:(id /* block */)completion;
+ (BOOL)underlyingMailboxIsActiveForUserSession:(id)session;
+ (void)getActiveUnderlyingMailboxForUserSession:(id)session completion:(id /* block */)completion;
+ (id)armadilloDataLoaderForUserSession:(id)session;
+ (id)armadilloInboxBadgeCountSubscriptionPipeForUserSession:(id)session;
+ (id)armadilloInboxUnreadThreadsCountSubscriptionPipeForUserSession:(id)session;
+ (id)armadilloPendingThreadCountSubscriptionPipeForUserSession:(id)session;
+ (id)createArmadilloInboxViewModelSubscriptionPipeForUserSession:(id)session analyticsModule:(id)module viewModelGenerationQueue:(id)queue inboxConfig:(id)config selectedTab:(id)tab filterType:(long long)type selectCoordinator:(id)coordinator;
+ (id)createArmadilloMessageRequestsSubscriptionPipeForUserSession:(id)session analyticsModule:(id)module viewModelGenerationQueue:(id)queue threadCellContentTheme:(id)theme tableLayoutSpec:(id)spec cellSelectStateCoordinator:(id)coordinator folderType:(long long)type sortType:(long long)type;
+ (id)msysMessageSendServiceForUserSession:(id)session mediaRequester:(id)requester;
+ (id)receiverFetchPreviewDataProviderWithUserSession:(id)session;
+ (id)msysDualSendTestMessageSendingListenerForUserSession:(id)session;
+ (id)msysDualSendTestThreadUpdateListenerForUserSession:(id)session;
+ (id)msysBlendedThreadTestThreadUpdateListenerForUserSession:(id)session;
+ (id)msysTestMessageSendGetTestThreadCacheFromUserSession:(id)session;
+ (id)msysOutgoingUpdateServiceForUserSession:(id)session;
+ (id)msysVaultForUserSession:(id)session;
+ (id)msysThreadDetailsDataSourceWithDetailViewConfig:(id)config msysThreadIdentifier:(id)identifier directAggregatedMediaCache:(id)cache userSession:(id)session;
+ (id)msysThreadRedesignDetailsDataSourceWithDetailViewConfig:(id)config msysThreadIdentifier:(id)identifier userSession:(id)session themeOverridesManager:(id)manager;
+ (id)msysThreadMetadataUpdateWithUserSession:(id)session threadKey:(id)key completion:(id /* block */)completion;
+ (id)msysThreadInterventionsUpdateWithUserSession:(id)session analyticsModule:(id)module threadKey:(id)key completion:(id /* block */)completion;
+ (void)createMsysThreadWithUserSession:(id)session participantIds:(id)ids threadName:(id)name completion:(id /* block */)completion;
+ (void)msysThreadViewControllerWithUserSession:(id)session threadKey:(id)key entryPoint:(id)point searchContext:(id)context perfComponents:(id)components threadLoggingContext:(id)context messageIslandContext:(id)context initialThreadAppearance:(long long)appearance completion:(id /* block */)completion;
+ (void)cutoverThreadViewControllerWithUserSession:(id)session cutoverThreadIdentifier:(id)identifier entryPoint:(id)point searchContext:(id)context perfComponents:(id)components threadLoggingContext:(id)context initialThreadAppearance:(long long)appearance completion:(id /* block */)completion;
+ (id)subscribeToLoadTamReportForUserSession:(id)session reportingContext:(id)context senderFbId:(id)id completion:(id /* block */)completion;
+ (void)sendTamReportForUserSession:(id)session reportingContext:(id)context threadPk:(id)pk openThreadId:(id)id messagePk:(id)pk openMessageId:(id)id openMessageTimestamp:(id)timestamp senderFbId:(id)id selectedTags:(id)tags messageToUpload:(long long)upload completion:(id /* block */)completion;
+ (void)sendTamImpersonationReportForUserSession:(id)session reportingContext:(id)context threadPk:(id)pk senderFbId:(id)id victimId:(id)id evidenceType:(int)type selectedTags:(id)tags completion:(id /* block */)completion;
+ (id)msysSecureOutgoingUpdateServiceForUserSession:(id)session;
+ (void)getSecureInboxViewControllerWithUserSession:(id)session completion:(id /* block */)completion;
+ (void)fetchSecureThreadsWithUserSession:(id)session searchString:(id)string shouldFilterUnmessageableSecureThreads:(BOOL)threads shouldIncludeSelectedUsers:(BOOL)users selectedUserPks:(id)pks prefixQuery:(id)query completion:(id /* block */)completion;
+ (id)secureNotificationCoordinatorForUserSession:(id)session threadNotificationPresenter:(id)presenter;
+ (void)getSecureGroupThreadParticipantsLimitWithUserSession:(id)session completion:(id /* block */)completion;
+ (void)getSecureGroupThreadNameLengthLimitWithUserSession:(id)session completion:(id /* block */)completion;
+ (void)getSearchThreadsContainingExactlySelectedUsersWithUserSession:(id)session selectedContactIds:(id)ids threadName:(id)name completion:(id /* block */)completion;
+ (void)verifyHybridThreadExistsWithUserSession:(id)session occamadilloThreadId:(long long)id waGroupThreadId:(long long)id participantFbidArray:(id)array isGroupThread:(BOOL)thread completion:(id /* block */)completion;
+ (void)getMaybeE2EEThreadKeyForThread:(id)thread userSession:(id)session completion:(id /* block */)completion;
+ (void)getMaybeE2EEThreadKeyForUsers:(id)users userSession:(id)session completion:(id /* block */)completion;
+ (void)getMaybeE2EEThreadKeyForUserIds:(id)ids userSession:(id)session completion:(id /* block */)completion;
+ (void)getMaybeE2EEThreadKeyWithThreadKey:(id)key userSession:(id)session completion:(id /* block */)completion;
+ (void)getCutoverDjangoThreadsWithUserSession:(id)session completion:(id /* block */)completion;
+ (void)createCutoverThreadOnServerWithUserSession:(id)session openThreadId:(long long)id completion:(id /* block */)completion;
+ (void)uncutoverThreadOnServerWithUserSession:(id)session threadPk:(long long)pk completion:(id /* block */)completion;
+ (id)readOnlyFeatureLimitSubscriptionPipeWithUserScopedObjects:(id)objects loggingTag:(id)tag;
+ (void)updateBlockStatusForUser:(id)user userSession:(id)session blockingStatus:(BOOL)status;
+ (void)updateRestrictStatusForUser:(id)user userSession:(id)session restrictStatus:(BOOL)status;
+ (id)gifCategorySubscriptionPipeForUserSession:(id)session;
+ (id)blendedThreadSubscriptionServiceWithUserSession:(id)session;
+ (id)blendedMessageMapProviderForUserSession:(id)session;
+ (id)blendedThreadOutgoingUpdateListenersForUserSession:(id)session;
+ (id)mailboxProviderForUserSession:(id)session;
+ (id)accountSessionProviderForUserSession:(id)session;
+ (void)sendMessage:(id)message withMessageId:(id)id messageSendType:(long long)type asMessageProductType:(long long)type toThreadKey:(unsigned long long)key participantEIMUs:(id)eimus asUnsend:(BOOL)unsend isTTLCSend:(BOOL)ttlcsend isDualSendTestNoNetworkMessage:(BOOL)message hideDecryptionFailurePlaceholder:(BOOL)placeholder accountSession:(id)session logger:(id)logger launcherSetProvider:(id)provider completion:(id /* block */)completion;
+ (void)uploadMediaWithURL:(id)url withMediaType:(long long)type accountSession:(id)session completion:(id /* block */)completion;
+ (void)fetchPreKeysForUsers:(id)users mailbox:(id)mailbox completion:(id /* block */)completion;
+ (void)deviceRefreshForUserId:(id)id mailbox:(id)mailbox completion:(id /* block */)completion;
+ (void)sendReportForUserSession:(id)session reportingContext:(id)context reportTags:(id)tags openThreadId:(id)id reportedOpenMessageId:(id)id reportedUserId:(id)id instamadilloMessages:(id)messages completion:(id /* block */)completion;
+ (void)sendInstamadilloImpersonationReportForUserSession:(id)session reportingContext:(id)context reportTags:(id)tags reportedUserId:(id)id victimId:(id)id completion:(id /* block */)completion;
+ (void)expireReverbMessagesWithAccountSessionProvider:(id)provider expirationTimestamp:(id)timestamp completion:(id /* block */)completion;
+ (void)queryReverbNextExpirationTimestampWithAccountSessionProvider:(id)provider completion:(id /* block */)completion;
+ (void)purgeDeletedReverbMessagesWithAccountSessionProvider:(id)provider completion:(id /* block */)completion;
+ (void)queryReverbNextDeletedMessagePurgeTimestampWithAccountSessionProvider:(id)provider completion:(id /* block */)completion;
+ (void)rescheduleInstamadilloTaskWithAccountSessionProvider:(id)provider queue:(id)queue minExecutionTime:(id)time task:(id)task logId:(id)id completion:(id /* block */)completion;
+ (void)startListeningToSurfaceEventsWithUserSession:(id)session;
+ (void)queryReverbWithAccountSessionProvider:(id)provider threadId:(id)id oldestCursor:(id)cursor encryptedMessagePayloads:(id)payloads tags:(id)tags loggingContext:(id)context completion:(id /* block */)completion;
+ (void)queryReverbWithAccountSessionProvider:(id)provider threadId:(id)id clientContextId:(id)id includeDeleted:(BOOL)deleted encryptedMessagePayloads:(id)payloads loggingContext:(id)context completion:(id /* block */)completion;
+ (void)deleteThreadFromReverbWithAccountSessionProvider:(id)provider threadId:(id)id deletionTimestampMs:(id)ms deletionOfflineThreadingId:(id)id completion:(id /* block */)completion;
+ (void)queryReverbForReportingWithAccountSessionProvider:(id)provider threadId:(id)id startCursor:(id)cursor limit:(id)limit isQueryForMessagesBefore:(BOOL)before loggingContext:(id)context completion:(id /* block */)completion;
+ (void)queryReverbWithAccountSessionProvider:(id)provider threadIdToMessagesDict:(id)dict numberOfMessages:(id)messages tags:(id)tags loggingContext:(id)context completion:(id /* block */)completion;
@end

#endif /* IGDirectMsysPlugin_h */
