//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGMediaLibraryViewController_h
#define IGMediaLibraryViewController_h
@import Foundation;

#include "IGViewController.h"
#include "IGContentSchedulingCoordinatorProtocol-Protocol.h"
#include "IGFeedGalleryNavigationPerfComponents.h"
#include "IGGalleryAlbumPickerDelegate-Protocol.h"
#include "IGGestureHandler-Protocol.h"
#include "IGGridViewControllerDelegate-Protocol.h"
#include "IGLibraryAccessPromptView.h"
#include "IGMediaCropViewController.h"
#include "IGMediaLibraryAlbumLoadCoordinator.h"
#include "IGMediaLibraryViewControllerDelegate-Protocol.h"
#include "IGMediaLibraryViewControllerFeedCreationDelegate-Protocol.h"
#include "IGQuietBroadcastingBannerView.h"
#include "IGSidecarCollectionController.h"
#include "IGSundialCoordinatorProtocol-Protocol.h"
#include "_TtC16IGFeedSharingQPL22IGFeedSharingQPLLogger.h"
#include "_TtP23IGGalleryCollectionView41IGGalleryCollectionViewControllerDelegate_-Protocol.h"
#include "_TtP23IGGalleryCollectionView47IGGalleryCollectionViewControllerScrollDelegate_-Protocol.h"

@class IGAPIHighlightsAttributionDict, IGCameraLogger, IGChevronTitleButton, IGComposition, IGDraftPreview, IGMetaGalleryDataSource, IGScrollPerfManualLogger, IGStrictUserFlowLogger, IGTapButton, IGTooltipView, IGUserSession, NSDictionary, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSNumber, NSOperationQueue, NSString, UIBarButtonItem, UIPanGestureRecognizer, UITapGestureRecognizer, UIView;
@protocol IGMediaLibraryViewControllerCameraDelegate, IGMediaLibraryViewControllerContentSchedulingDelegate, IGMediaLibraryViewControllerLayoutDelegate, IGMediaLibraryViewControllerSelectAlbumDelegate, IGMedialibraryViewControllerSetAssetDelegate, OS_dispatch_queue, UIViewController<IGMediaLibraryViewControllerGalleryAdapterProtocol_DELETE_ME_AFTER_QE><IGGestureHandler;

@interface IGMediaLibraryViewController : IGViewController<IGGalleryAlbumPickerDelegate, IGGridViewControllerDelegate, _TtP23IGGalleryCollectionView47IGGalleryCollectionViewControllerScrollDelegate_, _TtP23IGGalleryCollectionView41IGGalleryCollectionViewControllerDelegate_, IGGestureHandler> {
  /* instance variables */
  IGFeedGalleryNavigationPerfComponents *_perfComponents;
  IGMediaLibraryAlbumLoadCoordinator *_albumLoadingCoordinator;
  BOOL _isProfilePictureUploadLoading;
  IGStrictUserFlowLogger *_strictUserFlowLogger;
  NSObject<OS_dispatch_queue> *_albumPickerLoadingQueue;
  BOOL _addYoursPromptIsSet;
  BOOL _hdrSupported;
  IGMetaGalleryDataSource *_metaGalleryDataSource;
  _TtC16IGFeedSharingQPL22IGFeedSharingQPLLogger *_feedQPLLogger;
  BOOL _supportsNewGallery;
  long long _mediaAudience;
  BOOL _shouldLandOnDrafts;
  BOOL _hasConfirmedMusicRemovalDialog;
  IGScrollPerfManualLogger *_scrollPerfLogger;
  BOOL _hasUnregisteredGalleryDataSource;
  double _startMediaLibraryPanTouchPointY;
  double _mediaLibraryPanOffsetY;
  UIPanGestureRecognizer *_mediaLibraryToolbarExpandPan;
  double _startMediaLibraryToolbarPanTouchInsetY;
  BOOL _swipeExpandGalleryEnabled;
  BOOL _swipeExpandGalleryToolbarDraggable;
  NSMutableArray *_aspectRatioStates;
  NSMutableDictionary *_optimisticMetadatas;
  BOOL _cameraCloseButton;
  BOOL _multiSelectEnabledByDefault;
  BOOL _entrypointAllowsLivePhotoConversion;
  BOOL _nonSquareEnabled;
  BOOL _draftsEnabled;
  BOOL _manageDraftsEnabled;
  BOOL _scheduledEnabled;
  BOOL _gridViewIsLoaded;
  BOOL _isLoadingDraftFromNewGallery;
  BOOL _isPushingCropView;
  NSObject<IGMediaLibraryViewControllerSelectAlbumDelegate> *_selectAlbumDelegate;
  NSObject<IGMediaLibraryViewControllerContentSchedulingDelegate> *_contentSchedulingDelegate;
  NSObject<IGMedialibraryViewControllerSetAssetDelegate> *_setAssetDelegate;
  NSObject<IGMediaLibraryViewControllerCameraDelegate> *_cameraDelegate;
  long long _minimumNumberOfAssets;
  UIBarButtonItem *_nextButtonItem;
  UIView *_selectMultipleButton;
  IGDraftPreview *_draftToSelect;
  long long _preselectedAssetIndex;
  NSObject<IGMediaLibraryViewControllerFeedCreationDelegate> *_feedCreationDelegate;
  long long _cropMaskStyle;
  long long _scheduledContentCount;
  UIViewController<IGMediaLibraryViewControllerGalleryAdapterProtocol_DELETE_ME_AFTER_QE><IGGestureHandler> *_gridViewController;
  NSMutableDictionary *_loadedAssetsMetadata;
  NSMutableDictionary *_pendingAssetRequests;
  NSMutableDictionary *_pendingMetaGalleryAssetRequests;
  id _fullResolutionSource;
  UIView *_mediaLibraryToolbar;
  double _currentAspectRatio;
  id /* block */ _allAssetsLoadedCompletionBlock;
  id /* block */ _multiClipCompletionBlock;
  IGChevronTitleButton *_chevronTitleButton;
  IGTapButton *_draftsTabButton;
  IGTapButton *_scheduledTabButton;
  double _startCropMaxY;
  double _startCropPanTouchInsetY;
  double _cropOffsetY;
  UITapGestureRecognizer *_cropTap;
  UIPanGestureRecognizer *_cropPanExpand;
  IGTooltipView *_NUXView;
  UIBarButtonItem *_cancelButtonItem;
  UIBarButtonItem *_dismissToCameraButton;
  UIBarButtonItem *_closeAlbumPickerButton;
  UIBarButtonItem *_loadingNextButtonItem;
  IGLibraryAccessPromptView *_accessDeniedView;
  long long _draftsTotalCount;
  long long _draftsLoadedCount;
  NSOperationQueue *_previewLoadingQueue;
  NSMutableDictionary *_previewLoadingOperations;
  IGCameraLogger *_cameraLogger;
  NSObject<IGSundialCoordinatorProtocol> *_sundialCoordinator;
  NSObject<IGContentSchedulingCoordinatorProtocol> *_contentSchedulingCoordinator;
}

@property (copy, nonatomic) NSString *analyticsModule;
@property (retain, nonatomic) IGComposition *composition;
@property (retain, nonatomic) IGUserSession *userSession;
@property (nonatomic) struct IGAssetSelectionMechanic { unsigned long long x0; unsigned long long x1; } assetSelectionMechanic;
@property (nonatomic) unsigned long long assetFilterType;
@property (retain, nonatomic) NSMutableOrderedSet *orderedAssetIdentifiers;
@property (retain, nonatomic) id selectedAsset;
@property (retain, nonatomic) NSNumber *selectedAssetIndex;
@property (retain, nonatomic) NSDictionary *metadata;
@property (retain, nonatomic) IGMediaCropViewController *mediaCropViewController;
@property (retain, nonatomic) IGSidecarCollectionController *sideCarCollectionViewController;
@property (retain, nonatomic) IGAPIHighlightsAttributionDict *linkedHighlightModel;
@property (nonatomic) BOOL shouldShareToFeed;
@property (retain, nonatomic) IGQuietBroadcastingBannerView *quietBroadcastingBannerView;
@property (weak, nonatomic) NSObject<IGMediaLibraryViewControllerDelegate> *delegate;
@property (weak, nonatomic) NSObject<IGMediaLibraryViewControllerLayoutDelegate> *layoutDelegate;
@property (readonly, nonatomic) double verticalOffset;
@property (nonatomic) BOOL isHidden;
@property (readonly, nonatomic) BOOL draftsButtonIsHidden;
@property (retain, nonatomic) UIView *cameraButton;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithComposition:(id)composition userSession:(id)session cameraLogger:(id)logger feedCreationDelegate:(id)delegate assetSelectionMechanic:(struct IGAssetSelectionMechanic { unsigned long long x0; unsigned long long x1; })mechanic assetFilterType:(unsigned long long)type nonSquareEnabled:(BOOL)enabled cropMaskStyle:(long long)style draftsEnabled:(BOOL)enabled manageDraftsEnabled:(BOOL)enabled shouldLandOnDrafts:(BOOL)drafts analyticsModule:(id)module addYoursPromptIsSet:(BOOL)set hdrSupported:(BOOL)supported mediaAudience:(long long)audience linkedHighlightModel:(id)model shouldShareToFeed:(BOOL)feed;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)appear;
- (void)viewDidAppear:(BOOL)appear;
- (void)viewDidLayoutSubviews;
- (void)viewWillDisappear:(BOOL)disappear;
- (void)viewDidDisappear:(BOOL)disappear;
- (BOOL)prefersStatusBarHidden;
- (BOOL)gridViewController:(id)controller shouldShowDialogForAsset:(id)asset withSelectAssetHandler:(id /* block */)handler abandonSelectionHandler:(id /* block */)handler;
- (void)gridViewController:(id)controller didSelectAsset:(id)asset atIndexPath:(id)path isReselecting:(BOOL)reselecting;
- (void)gridViewController:(id)controller didChangeAlbumTitle:(id)title;
- (void)gridViewControllerSelectedAlbumWasRemoved:(id)removed;
- (void)gridViewController:(id)controller selectedAssetWasRemoved:(id)removed;
- (void)gridViewControllerWillLoadLibrary:(id)library;
- (void)gridViewControllerDidLoadLibrary:(id)library;
- (void)gridViewController:(id)controller didDeselectAsset:(id)asset atIndexPath:(id)path;
- (BOOL)gridViewController:(id)controller isAssetLoaded:(id)loaded;
- (void)gridViewControllerDraftsWillLoadDrafts:(id)drafts;
- (void)gridViewControllerDraftsDidLoad:(id)load draftCount:(long long)count draftsDisplayedCount:(long long)count;
- (void)gridViewControllerDidTapSecondaryButton:(id)button;
- (void)gridViewController:(id)controller firstAssetDidChange:(id)change;
- (void)gridViewController:(id)controller didClickDisabledAsset:(id)asset;
- (void)gridViewController:(id)controller didLongPressAsset:(id)asset atIndexPath:(id)path;
- (void)gridViewControllerDidTapCameraCell:(id)cell;
- (void)gridViewController:(id)controller didSwitchTabToAlbumTitle:(BOOL)title;
- (void)gridViewControllerDidShareOrDeleteScheduledContent:(id)content scheduledContentCount:(long long)count;
- (void)gridViewControllerDidScroll:(id)scroll;
- (void)gridViewControllerDidEndDragging:(id)dragging willDecelerate:(BOOL)decelerate;
- (void)gridViewControllerDidEndDecelerating:(id)decelerating;
- (void)gridViewControllerDidUpdateQuickScrub:(BOOL)scrub;
- (void)gridViewControllerWillBeginDragging:(id)dragging;
- (void)gridViewControllerWillEndDragging:(id)dragging withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(inout struct CGPoint *)offset;
- (long long)_defaultAspectRatioState;
- (void)_setAspectRatioState:(long long)state;
- (void)_updateCropRectsForAspectRatioState:(long long)state;
- (void)_setFinalCropRectsForMedia;
- (void)_panMediaLibraryToolbar:(id)toolbar;
- (void)_panCrop:(id)crop;
- (void)_tapExpandCrop:(id)crop;
- (void)_onCancelButtonTapped;
- (void)_onNextButtonTapped;
- (void)_showQuietBroadcastingWarning;
- (void)mediaCropViewToggledAspectRatio:(id)ratio aspectRatioState:(long long)state;
- (void)mediaCropView:(id)view didSelectLivePhotoConversionOption:(long long)option;
- (void)mediaCropView:(id)view updatedAssetCropRect:(struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })rect cropMode:(long long)mode fromButtonPress:(BOOL)press;
- (void)_didTapScheduledTabButton;
- (void)_didTapDraftsTabButton;
- (void)_onAlbumTitleTapped;
- (BOOL)ignoreTapEventLogging;
- (void)mediaLibraryAlbumExecuteLoading:(id)loading;
- (BOOL)canRespondToGesture:(id)gesture;
- (BOOL)accessibilityPerformEscape;
- (void)albumPickerDidSelectMediaCategory:(long long)category index:(long long)index;
- (void)albumPickerDidSelectAlbum:(id)album index:(long long)index;
- (void)albumPickerDidSelectMetaGalleryAlbum:(id)album index:(long long)index;
- (void)albumPickerDidSelectSuggestedAlbum:(id)album index:(long long)index;
- (void)albumPickerDidSelectSingleAsset:(id)asset;
- (void)metaGalleryDataSource:(id)source didChange:(id)change;
- (void)metaGalleryDataSourceDidChangeCollections:(id)collections;
- (void)metaGalleryDataSource:(id)source didUpdateCollections:(id)collections selectedCollection:(id)collection;
- (void)draftsBrowserViewControllerDidDeleteDrafts:(id)drafts;
- (void)panavisionDraftStoreDidSaveDraft:(id)draft;
- (void)panavisionDraftStoreDidUpdateNumberOfSavedDrafts:(long long)drafts;
- (void)setDraftsButtonHidden:(BOOL)hidden;
- (id)currentlySelectedAsset;
- (void)resetNavigationBarButtons;
- (void)galleryCollectionViewController:(id)controller didSelectAsset:(id)asset sourceView:(id)view;
- (void)galleryCollectionViewController:(id)controller didSelectAssets:(id)assets;
- (void)galleryCollectionViewController:(id)controller didTapBottomPreviewTrayAssetItem:(id)item atIndex:(long long)index sourceView:(id)view;
- (void)galleryCollectionViewControllerDidTapDrafts:(id)drafts;
- (void)galleryCollectionViewControllerDidTapCamera:(id)camera;
- (void)galleryCollectionViewControllerDidTapTemplates:(id)templates;
- (void)galleryCollectionViewControllerDidTapACR:(id)acr;
- (void)galleryCollectionViewController:(id)controller didSelectionTrayUpdateAssets:(id)assets;
- (void)galleryCollectionViewController:(id)controller isDraggingSelectionTrayThumbnail:(BOOL)thumbnail;
- (void)galleryCollectionViewController:(id)controller didMultiSelectAsset:(id)asset atIndexPath:(id)path;
- (void)galleryCollectionViewController:(id)controller didMultiUnselectAsset:(id)asset atIndexPath:(id)path;
- (long long)mediaSelectionLimit;
- (BOOL)galleryCollectionViewController:(id)controller canSelectAsset:(id)asset;
- (BOOL)galleryCollectionViewController:(id)controller canMultiSelectAsset:(id)asset;
- (void)galleryCollectionViewControllerDidReachSelectionLimit:(id)limit;
- (void)galleryCollectionViewControllerDidRequestPermissions:(id)permissions;
- (void)galleryCollectionViewControllerDidChangePermissions:(id)permissions granted:(BOOL)granted;
- (void)galleryCollectionViewControllerDataSourceWillLoad:(id)load;
- (void)galleryCollectionViewControllerDataSourceDidLoad:(id)load;
- (void)galleryCollectionViewControllerDataSourceDidChange:(id)change;
- (void)galleryCollectionViewControllerDataSourceDidLoadVisibleAssetImages:(id)images;
- (void)galleryCollectionViewController:(id)controller updateAlbumTitle:(id)title;
- (void)galleryCollectionViewController:(id)controller willBeginAnimatingSelectionTray:(id)tray willBeVisible:(BOOL)visible;
- (void)galleryCollectionViewController:(id)controller didCompleteAnimatingSelectionTray:(id)tray isVisible:(BOOL)visible;
- (void)galleryCollectionViewControllerDidScroll:(id)scroll scrollView:(id)view;
- (void)galleryCollectionViewControllerWillBeginDragging:(id)dragging scrollView:(id)view;
- (void)galleryCollectionViewControllerDidEndDragging:(id)dragging scrollView:(id)view willDecelerate:(BOOL)decelerate;
- (void)galleryCollectionViewControllerWillEndDragging:(id)dragging scrollView:(id)view withVelocity:(struct CGPoint { double x0; double x1; })velocity targetContentOffset:(struct CGPoint *)offset;
- (void)galleryCollectionViewControllerDidEndDecelerating:(id)decelerating scrollView:(id)view;
- (void)galleryCollectionViewControllerDidUpdateQuickScrub:(id)scrub scrubbing:(BOOL)scrubbing;
- (void)_applicationWillResignActive:(id)active;
- (void)_applicationDidBecomeActive:(id)active;
- (BOOL)galleryCollectionViewControllerShouldShowLoadingIndicatorForNextButton:(id)button;
- (void)sidecarCollectionControllerDidTapAddCell:(id)cell;
- (void)sidecarCollectionController:(id)controller didSelectCellAtIndex:(long long)index;
- (void)sidecarCollectionController:(id)controller didReorderAssetsWithFirstAsset:(id)asset;
- (void)sidecarCollectionControllerWillBeginReorderingAssets:(id)assets canDelete:(BOOL)delete;
- (void)sidecarCollectionControllerDidBeginReorderingAssets:(id)assets canDelete:(BOOL)delete;
- (void)sidecarCollectionControllerWillFinishReorderingAssets:(id)assets orderChanged:(BOOL)changed canDelete:(BOOL)delete;
- (void)sidecarCollectionController:(id)controller draggedIntoDeleteZone:(BOOL)zone;
- (void)sidecarCollectionControllerDidLongPress:(id)press;
- (void)sidecarCollectionControllerDidDeleteItem:(id)item;
- (void)sidecarCollectionController:(id)controller didCenterMediaMetadataAsset:(id)asset;
- (void)sidecarCollectionControllerDidScroll:(id)scroll;
- (void)sidecarCollectionControllerDidFinishScrolling:(id)scrolling centeredAssetIsPhoto:(BOOL)photo;
- (void)sidecarCollectionController:(id)controller didCenterAssetWithIndex:(long long)index isPhoto:(BOOL)photo;
@end

#endif /* IGMediaLibraryViewController_h */
