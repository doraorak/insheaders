//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef IGOneCameraCaptureManager_h
#define IGOneCameraCaptureManager_h
@import Foundation;

#include "IGAudioCapturing-Protocol.h"
#include "IGCaptureManaging-Protocol.h"
#include "IGMediaSharePlayerProtocol-Protocol.h"
#include "IGOCMCustomOutputComponent.h"
#include "IGOCMPhotostreamComponent.h"
#include "IGOCMVideoProcessorController.h"
#include "IGOneCameraConfiguration.h"
#include "IGOneCameraDefaultCaptureMode.h"
#include "IGOneCameraLogger.h"
#include "IGSystemAudioCaptureSessionInteractor.h"
#include "_TtP13SUPConnecting13SUPConnecting_-Protocol.h"

@class AVCaptureVideoPreviewLayer, FBCCWaterfallLoggingComponent, IGMPVideoProcessorController, NSArray, NSString, NSURL, OCMController;
@protocol FBCCAudioPipelineProviding, FBCaptureCoordinatorFilterFactoryProtocol, IGCaptureManagerAdditionalCaptureMetadataDelegate, IGCaptureManagerAudioSampleBufferDelegate, IGCaptureManagerAudioSessionDelegate, IGCaptureManagerDelegate, IGCaptureManagerPreviewSizeProvider, IGCaptureManagerVideoPreviewSampleBufferDelegate, IGCaptureManagerVideoSampleBufferDelegate, IGCaptureManagerVideoSampleBufferProcessing, IGCaptureManagerVideoSessionDelegate, IGVideoProcessorControlling;

@interface IGOneCameraCaptureManager : NSObject<IGCaptureManaging, IGAudioCapturing> {
  /* instance variables */
  OCMController *_captureController;
  IGOneCameraLogger *_logger;
  IGOneCameraDefaultCaptureMode *_defaultCaptureModeComponent;
  IGOCMCustomOutputComponent *_customOutputComponent;
  IGOCMPhotostreamComponent *_photostreamComponent;
  BOOL _preferPhotoPreset;
  BOOL _hasReceivedFirstFrame;
  BOOL _didBecomeActive;
  BOOL _alwaysEnableAudioSession;
  IGSystemAudioCaptureSessionInteractor *_audioCaptureSessionInteractor;
  NSURL *_directoryForVideoStorage;
  long long _numberOfInitialBuffersIgnored;
  long long _numberOfInitialBuffersReceived;
  NSObject<_TtP13SUPConnecting13SUPConnecting_> *_supConnector;
  NSObject<IGMediaSharePlayerProtocol> *_lastMediaSharePlayer;
  struct opaqueCMSampleBuffer * _lastSampleBuffer;
  FBCCWaterfallLoggingComponent *_waterfallLoggingComponent;
  BOOL _optimizePhotoQuality;
  BOOL _needsResume;
  IGMPVideoProcessorController *_mpVideoProcessorController;
}

@property (readonly, nonatomic) IGOneCameraConfiguration *configuration;
@property (weak, nonatomic) NSObject<IGCaptureManagerDelegate> *delegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerVideoSampleBufferProcessing> *videoSampleBufferProcessor;
@property (weak, nonatomic) NSObject<IGCaptureManagerVideoPreviewSampleBufferDelegate> *videoPreviewSampleBufferDelegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerVideoSampleBufferDelegate> *videoSampleBufferDelegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerAudioSampleBufferDelegate> *audioSampleBufferDelegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerAudioSessionDelegate> *audioSessionDelegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerVideoSessionDelegate> *videoSessionDelegate;
@property (weak, nonatomic) NSObject<IGCaptureManagerAdditionalCaptureMetadataDelegate> *additionalCaptureMetadataDelegate;
@property (nonatomic) BOOL videoMirrored;
@property (nonatomic) long long sessionPreset;
@property (nonatomic) BOOL audioEnabled;
@property (nonatomic) BOOL audioCaptureIgnoreRTCClientNotification;
@property (nonatomic) BOOL videoCapturePaused;
@property (nonatomic) BOOL hasAREffect;
@property (nonatomic) BOOL livePhotoEnabled;
@property (nonatomic) BOOL bracketedCaptureEnabled;
@property (nonatomic) BOOL consumeAudioWhenSessionStopped;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (readonly, nonatomic) NSObject<FBCaptureCoordinatorFilterFactoryProtocol> *ccFilterFactory;
@property (readonly, nonatomic) AVCaptureVideoPreviewLayer *previewLayer;
@property (weak, nonatomic) NSObject<IGCaptureManagerPreviewSizeProvider> *previewSizeProvider;
@property (weak, nonatomic) NSObject<IGMediaSharePlayerProtocol> *mediaSharePlayer;
@property (readonly, nonatomic) NSString *postARFBFilterIdentifier;
@property (readonly, nonatomic) double postARFBFilterStrength;
@property (readonly, weak, nonatomic) NSArray *captureDevices;
@property (readonly, nonatomic) BOOL multiCaptureEnabled;
@property (readonly, nonatomic) NSString *mainCameraDeviceID;
@property (nonatomic) long long cameraPosition;
@property (readonly, nonatomic) long long videoOutputOrientation;
@property (nonatomic) long long flashMode;
@property (nonatomic) long long torchMode;
@property (nonatomic) double zoom;
@property (nonatomic) double zoomScale;
@property (readonly, nonatomic) unsigned long long supportedCameraCapabilities;
@property (readonly, nonatomic) double currentISO;
@property (readonly, nonatomic) double maxISO;
@property (nonatomic) long long frameRate;
@property (nonatomic) BOOL allowHighResolutionCapture;
@property (nonatomic) BOOL hdrVideoCaptureEnabled;
@property (retain, nonatomic) NSObject<IGVideoProcessorControlling> *videoProcessorController;
@property (retain, nonatomic) NSObject<FBCCAudioPipelineProviding> *audioPipelineProvider;

/* instance methods */
- (id)initWithConfiguration:(id)configuration;
- (id)createNewVideoProcessorController;
- (void)setProductSessionId:(id)id;
- (void)setProductName:(unsigned long long)name;
- (void)logCameraEvent:(id)event extras:(id)extras error:(id)error;
- (id)videoBufferQueue;
- (id)audioBufferQueue;
- (BOOL)isUsingVideoSessionPreset;
- (BOOL)detectedLowLightConditions;
- (BOOL)currentDeviceHasFlash;
- (void)pauseCameraCaptureSession;
- (void)pauseCameraCaptureSessionAndAudio:(BOOL)audio;
- (void)resumeCameraCaptureSession;
- (BOOL)currentSessionSupportsFlash;
- (struct CGSize { double x0; double x1; })videoSizeForCurrentSessionPreset;
- (id)previewLayerForPosition:(long long)position;
- (id)previewLayerForDevice:(id)device;
- (void)setPostARFBFilterWithIdentifier:(id)identifier filterParameters:(id)parameters index:(unsigned long long)index completion:(id /* block */)completion;
- (void)updateCurrentFilterInputs:(id)inputs parameters:(id)parameters index:(unsigned long long)index completion:(id /* block */)completion;
- (BOOL)isVideoSessionRunning;
- (BOOL)isAudioCaptureRunning;
- (void)didBecomeActive;
- (void)willBecomeInactive;
- (void)captureControllerDidStartRecording;
- (void)captureControllerDidStopRecording;
- (void)setSpeakerMuted:(BOOL)muted;
- (void)setSpeakerDefaultMuted:(BOOL)muted;
- (BOOL)isSpeakerMuted;
- (void)prepareForStartSession;
- (void)startSessionWithCompletion:(id /* block */)completion;
- (void)didRenderFirstVideoFrameWithCameraSessionID:(id)id cameraDestination:(id)destination renderStartTime:(id)time renderFinishTime:(double)time previewLayerType:(unsigned long long)type;
- (void)interruptSessionWithCompletion:(id /* block */)completion;
- (void)stopAllSessionsAndCleanUpWithCompletion:(id /* block */)completion;
- (void)deactivateSystemAudioSession;
- (void)deactivateAudioSession;
- (void)deactivateAndDestroyAudioSession;
- (void)setAudioEnabled:(BOOL)enabled allowBgAudioMixing:(BOOL)mixing;
- (void)_stopAudioSession;
- (void)takePictureWithCompletionHandler:(id /* block */)handler;
- (void)takePicturesWithCaptureDevices:(id)devices useHighResolutionIfPossible:(BOOL)possible completion:(id /* block */)completion;
- (void)setShouldFrontCameraVideoMirrored:(BOOL)mirrored completion:(id /* block */)completion;
- (void)setVideoOrientation:(long long)orientation;
- (void)focusAndExposeAtPoint:(struct CGPoint { double x0; double x1; })point completion:(id /* block */)completion;
- (struct CGPoint { double x0; double x1; })captureDevicePointOfInterestForPoint:(struct CGPoint { double x0; double x1; })point view:(id)view;
- (void)lockFocusWithCompletion:(id /* block */)completion;
- (void)unlockFocusWithCompletion:(id /* block */)completion;
- (void)switchCaptureDevice:(id)device withVideoMirroredIfNeeded:(BOOL)needed completion:(id /* block */)completion;
- (void)setCaptureDevices:(id)devices useMultiCaptureIfPossible:(BOOL)possible completion:(id /* block */)completion;
- (void)captureManagerWillStartRunningSessionType:(unsigned long long)type;
- (void)captureManagerDidStartRunningSessionType:(unsigned long long)type;
- (void)captureManagerWillStopCaptureSessionType:(unsigned long long)type;
- (void)captureManagerDidStopRunningSessionType:(unsigned long long)type;
- (void)captureManagerDidBecomeInterruptedWithReason:(unsigned char)reason sessionType:(unsigned long long)type;
- (void)captureManagerDidResignInterruptedSessionType:(unsigned long long)type;
- (void)captureManagerSystemPressureLevelDidChange:(id)change;
- (void)captureManagerReactionEffectTriggered:(id)triggered;
- (void)captureManagerDidEncounterRuntimeError:(id)error willRetry:(BOOL)retry sessionType:(unsigned long long)type;
- (void)captureManagerDidReceiveFirstVideoFrameFromCaptureSessionAtTime:(double)time;
- (void)captureManagerHasFinishedLoadingCaptureSession;
- (void)captureManagerPreviewDidLoad;
- (void)captureManagerHasFinishedLoadingAudioSession;
- (void)captureManagerDidFailToLoadAudioSessionWithError:(id)error;
- (void)captureManagerHasEndedCaptureSession;
- (void)captureManagerUpdatedPreviousCaptureDevice:(id)device toCurrentCaptureDevice:(id)device;
- (void)captureManagerDidDropVideoBuffer;
- (void)captureManagerDidCaptureVideoBuffer:(struct opaqueCMSampleBuffer *)buffer metadata:(id)metadata;
- (id)cameraSLAMController;
- (id)waterfallLogger;
- (void)cameraCaptureControllerDidDropVideoFrameAtPresentationTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time withReason:(id)reason;
@end

#endif /* IGOneCameraCaptureManager_h */
