//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCCAudioPipelineController_h
#define FBCCAudioPipelineController_h
@import Foundation;

#include "FBCCAudioGraphClientProvider-Protocol.h"
#include "FBCCAudioPipelineControllerSimpleEventLogger.h"

@class FBCCAudioPipelineControllingListeningAnnouncer, NSString;
@protocol FBCCAudioPipelineRuntimeErrorDelegate, FBCameraWaterfallLogging><FBCaptureSessionWaterfallLogging><FBCCMediaEventWaterfallLogging, FBSystemAudioCaptureSessionInteracting, OS_dispatch_queue, {MTData<std::shared_ptr<cameracore::audiopipeline::IAudioPipeline>>="data_"{shared_ptr<cameracore::audiopipeline::IAudioPipeline>="__ptr_"^{IAudioPipeline}"__cntrl_"^{__shared_weak_count}}"mutex_"{SpinLockMutex="readers_"{atomic<long long>="__a_"{__cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>>="__a_value"Aq}}}}, {unique_ptr<short[], std::default_delete<short[]>>="__ptr_"{__compressed_pair<short *, std::default_delete<short[]>>="__value_"^s}};

@interface FBCCAudioPipelineController : NSObject<FBCCAudioGraphClientProvider> {
  /* instance variables */
  struct MTData<std::shared_ptr<cameracore::audiopipeline::IAudioPipeline>> { struct shared_ptr<cameracore::audiopipeline::IAudioPipeline> { struct IAudioPipeline *__ptr_; struct __shared_weak_count *__cntrl_; } data_; struct SpinLockMutex { struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } readers_; } mutex_; } _audioPipeline;
  struct AudioRoutingCallback * _audioRoutingCallback;
  struct unique_ptr<short[], std::default_delete<short[]>> { struct __compressed_pair<short *, std::default_delete<short[]>> { short *__value_; } __ptr_; } emptyBuffer_;
  BOOL _isSystemMuted;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastTimeStamp;
  struct final { BOOL enableMicInPreview; BOOL startOutputOnStartInput; BOOL startOutputOnSubgraphInsert; BOOL enableSetAudioMixing; BOOL enableFBAAllowSpeakerDuringRecording; BOOL enableFBAShouldPauseBackgroundWhenApplyingEffect; BOOL enableFBAAllowStartInputForSomeSubgraphInsertion; BOOL enablePushGraph; BOOL shouldConfigureStereoCapture; } _configuration;
  NSObject<FBSystemAudioCaptureSessionInteracting> *_systemAudioCaptureSessionInteracting;
  NSObject<OS_dispatch_queue> *_audioPipelineQueue;
  NSObject<FBCameraWaterfallLogging><FBCaptureSessionWaterfallLogging><FBCCMediaEventWaterfallLogging> *_captureSessionWaterfallLogger;
  FBCCAudioPipelineControllerSimpleEventLogger *_simpleEventLogger;
  long long _audioReactiveEffectType;
}

@property (retain, nonatomic) FBCCAudioPipelineControllingListeningAnnouncer *announcer;
@property (nonatomic) BOOL isRunning;
@property (nonatomic) struct OpaqueCMClock * clock;
@property (nonatomic) BOOL muted;
@property (weak, nonatomic) NSObject<FBCCAudioPipelineRuntimeErrorDelegate> *runtimeErrorDelegate;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithAudioPipelineConfiguration:(struct final { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; })configuration systemAudioCaptureSessionInteracting:(id)interacting cameraWaterfallLogger:(id)logger;
- (id)init;
- (void)dealloc;
- (void)createAudioPipelineIfNecessaryAndResume;
- (void)pauseAudioPipeline;
- (void)destroyAudioPipeline;
- (BOOL)startInput;
- (BOOL)stopInput;
- (void)_didEnterBackground:(id)background;
- (void)_willEnterForeground:(id)foreground;
- (void)muteSpeaker;
- (void)unmuteSpeaker;
- (void)setSystemWideMuteState:(BOOL)state;
- (void)addListener:(id)listener;
- (void)removeListener:(id)listener;
- (void)setHeadphonesPluggedInState:(BOOL)state;
- (BOOL)isMuted;
- (BOOL)isSubgraphInserted;
- (struct shared_ptr<facebook::audio::IAudioGraphClient> { struct IAudioGraphClient * x0; struct __shared_weak_count * x1; })getAudioGraphClient;
- (void)_audioSessionInterrupted:(id)interrupted;
- (void)_resume;
@end

#endif /* FBCCAudioPipelineController_h */
