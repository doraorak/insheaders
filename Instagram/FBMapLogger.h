//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBMapLogger_h
#define FBMapLogger_h
@import Foundation;

#include "FBAnalyticsLogging-Protocol.h"

@class NSString;

@interface FBMapLogger : NSObject {
  /* instance variables */
  int _surface;
  NSString *_mapSessionId;
  NSString *_entryPoint;
  int _mapType;
  NSObject<FBAnalyticsLogging> *_internalLogger;
  BOOL _mapLoaded;
  BOOL _pinsLoaded;
  BOOL _didLogMapFullyLoaded;
}

/* instance methods */
- (id)initWithSurface:(int)surface entryPoint:(id)point rendererType:(unsigned long long)type session:(id)session;
- (void)logMarkerClickWithIdentifier:(id)identifier layerIdentifier:(id)identifier mapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logMarkerClusterClickWithCluster:(struct vector<std::string, std::allocator<std::string>> { void * x0; void * x1; struct __compressed_pair<std::string *, std::allocator<std::string>> { void * x0; } x2; })cluster mapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logImpressionWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logExitWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logDidFinishPanWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logDidZoomInWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logDidZoomOutWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logMapDidLoadWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logMarkersDidLoadWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
- (void)logMapFailedtoLoadWithError:(id)error;
- (void)logMapFullyLoadedWithMapState:(struct FBMapLoggerMapState { struct FBMapCoordinateBox { struct CLLocationCoordinate2D { double x0; double x1; } x0; struct CLLocationCoordinate2D { double x0; double x1; } x1; } x0; double x1; struct unordered_map<std::string, std::vector<std::string>, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, std::vector<std::string>>>> { struct __hash_table<std::__hash_value_type<std::string, std::vector<std::string>>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, std::vector<std::string>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, std::vector<std::string>>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, std::vector<std::string>>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x2; struct vector<std::vector<std::string>, std::allocator<std::vector<std::string>>> { void * x0; void * x1; struct __compressed_pair<std::vector<std::string> *, std::allocator<std::vector<std::string>>> { void * x0; } x2; } x3; })state;
@end

#endif /* FBMapLogger_h */
