//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBActivityMonitor_h
#define FBActivityMonitor_h
@import Foundation;

#include "FBApplicationStatusProvider-Protocol.h"
#include "FBStateTimeIntervalsManager.h"
#include "OS_dispatch_source-Protocol.h"

@class NSArray, NSHashTable, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}};

@interface FBActivityMonitor : NSObject {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  NSMutableDictionary *_deviceStatusEvents;
  NSObject<OS_dispatch_source> *_deviceStatusTimer;
  NSString *_coldStartReason;
  BOOL _handlingColdStart;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _coldStartReasonMutex;
  BOOL _appVersionChanged;
  BOOL _osVersionChanged;
  FBStateTimeIntervalsManager *_timeIntervalsManager;
  NSObject<FBApplicationStatusProvider> *_applicationStatusProvider;
  NSMutableDictionary *_infoKeyValueData;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _infoKeyValueDataLock;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _appAttemptedToRestoreUIFromPreviousRun;
  NSArray *_signalHandlers;
  NSObject<OS_dispatch_queue> *_signalHandlerQueue;
  struct __darwin_sigaltstack { void *ss_sp; unsigned long long ss_size; int ss_flags; } _signalStack;
  NSString *_watchdogEventUUID;
  undefined * _restorableTerminateHandler;
  BOOL _appDelegateIsProxied;
  NSHashTable *_lifecycleNotificationObservers;
}

@property (copy) NSString *lastHardStallBreakpadConfigFilePath;
@property (copy) NSString *reboundSessionID;
@property BOOL isReboundSessionDataAvailable;
@property double reboundTime;

/* class methods */
+ (id)sharedMonitor;

/* instance methods */
- (id)init;
- (void)dealloc;
- (void)takeStacktraceAndAddToSnapshot;
- (void)_setupExceptionHandler;
- (void)_registerAllLifecycleNotifications;
- (void)_unregisterAllLifecycleNotifications;
- (void)_appDelegateWasProxied;
- (void)_registerAtExit;
- (void)setStaticDestructorMode:(long long)mode;
- (void)_meta_willBeginSystemSnapshotNotification;
- (void)_meta_didCompleteSystemSnapshotNotification;
- (void)_applicationProtectedDataWillBecomeUnavailable;
- (void)_applicationProtectedDataWillBecomeAvailable;
- (void)_protectedDataAvailableChangedAvailability:(BOOL)availability;
- (void)_backgroundRefreshStatusChangedNotification;
- (void)_contentSizeCategoryChangedNotification:(id)notification;
- (void)_direct_updatePowerState;
- (void)_powerStateChangedNotificationAndPossiblyBehindProcessInfoLock;
- (void)_direct_updateThermalState;
- (void)_thermalStateChangeNotificationAndPossiblyBehindProcessInfoLock;
- (void)restartDeviceStatusTimerForAppState:(long long)state;
- (void)_saveCurrentDeviceStatusToDisk;
- (void)_reportMetricsForPayload:(id)payload;
- (void)_reportReboundForPayload:(id)payload;
- (id)queue;
- (void)setColdStartReasonFromReason:(id)reason forcedExitReason:(id)reason;
- (BOOL)isColdStartReasonSet;
- (id)coldStartReason;
- (void)_logPayloadToAnalytics:(id)analytics withLogger:(id)logger completion:(id /* block */)completion;
- (void)reportPayload:(id)payload configuration:(id)configuration completion:(id /* block */)completion;
- (id)_buildPayloadWithMetadata:(id)metadata configuration:(id)configuration;
- (void)updateOSandAppUpdateDataForMetadata:(id)metadata;
- (id)_payloadFromSnapshot:(id)snapshot configuration:(id)configuration;
- (void)handleColdStartWithConfiguration:(id)configuration completion:(id /* block */)completion;
- (void)_handleColdStartAlreadyOnActivityMonitorQueueWithOwnedConfiguration:(id)configuration completion:(id /* block */)completion;
- (id)previousRunApplicationSnapshot;
- (id)getAppStatusSnapshot;
- (void)handleWatchdogEventBegin:(BOOL)begin timeout:(double)timeout extraTerminationInfo:(id)info;
@end

#endif /* FBActivityMonitor_h */
