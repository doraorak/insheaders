//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBAACEncoderBase_h
#define FBAACEncoderBase_h
@import Foundation;

@protocol {vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}};

@interface FBAACEncoderBase : NSObject {
  /* instance variables */
  struct AudioEncoderConfig { int sampleRate; int bitRate; int channels; unsigned char profile; BOOL useAudioASC; BOOL allowPreEncodedFrames; BOOL useAudioCBR; } _config;
  struct AudioEncoderErrorReporter { undefined * *_vptr$AudioEncoderErrorReporter; } _errorReporter;
  struct OpaqueAudioConverter * _audioConverter;
  struct vector<unsigned char, std::allocator<unsigned char>> { char *__begin_; char *__end_; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char *__value_; } __end_cap_; } _aacBuffer;
  char * _pcmBuffer;
  unsigned long long _pcmBufferSize;
  unsigned long long _pcmBufferStart;
  unsigned int _audioInputBitrate;
  unsigned int _maxOutputPacketSize;
  struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _inASBD;
  struct AudioStreamBasicDescription { double mSampleRate; unsigned int mFormatID; unsigned int mFormatFlags; unsigned int mBytesPerPacket; unsigned int mFramesPerPacket; unsigned int mBytesPerFrame; unsigned int mChannelsPerFrame; unsigned int mBitsPerChannel; unsigned int mReserved; } _outASBD;
  unsigned int _currAudioCodec;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _outDuration;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _outPts;
  BOOL _packageAACFramesIndividually;
}

/* instance methods */
- (id)initWithAudioConfig:(const struct AudioEncoderConfig *)config packageAACFramesIndividually:(BOOL)individually errorReporter:(const struct AudioEncoderErrorReporter *)reporter;
- (void)dealloc;
- (void)audioEncoderSelectedBitrate:(int)bitrate;
- (unsigned int)audioEncoderSelectedCodec:(unsigned int)codec;
- (void)teardown;
- (void)flush;
- (void)writeDescription:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })description pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })pts dts:(struct { long long x0; int x1; unsigned int x2; long long x3; })dts;
- (void)writeDescription:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })description header:(struct vector<unsigned char, std::allocator<unsigned char>> { char * x0; char * x1; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char * x0; } x2; })header pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })pts dts:(struct { long long x0; int x1; unsigned int x2; long long x3; })dts;
- (void)writeEncodedData:(const char *)data size:(unsigned long long)size pts:(struct { long long x0; int x1; unsigned int x2; long long x3; })pts dts:(struct { long long x0; int x1; unsigned int x2; long long x3; })dts duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration;
- (void)logAudioBr:(unsigned int)br inputBr:(unsigned int)br;
- (int)inInputDataProc:(struct OpaqueAudioConverter *)proc ioNumberDataPackets:(unsigned int *)packets ioData:(struct AudioBufferList *)data;
- (struct vector<unsigned char, std::allocator<unsigned char>> { char * x0; char * x1; struct __compressed_pair<unsigned char *, std::allocator<unsigned char>> { char * x0; } x2; })_getAudioMagicCookie;
- (struct Optional<unsigned int> { struct StorageTriviallyDestructible { union { char x0; unsigned int x1; } x0; BOOL x1; } x0; })_getApplicableEncodeBitrate:(unsigned int)bitrate;
- (id)configureAudioConverterWithSampleBufferIfNeeded:(struct opaqueCMSampleBuffer *)needed;
- (id)configureAudioConverterWithSampleBufferWithInASBD:(struct AudioStreamBasicDescription { double x0; unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; })asbd outASBD:(struct AudioStreamBasicDescription *)asbd;
- (id)getAudioClassDescriptionWithType:(unsigned int)type fromManufacturer:(unsigned int)manufacturer outClassDescription:(struct AudioClassDescription *)description;
- (id)encodeAudioImpl:(struct opaqueCMSampleBuffer *)impl;
- (id)encodeAudioImplUsingBulkPackaging:(struct opaqueCMSampleBuffer *)packaging;
- (id)encodeAudioImplUsingIndividualPackaging:(struct opaqueCMSampleBuffer *)packaging;
- (id)_writeAACEncodedBuffer:(struct opaqueCMSampleBuffer *)buffer;
- (BOOL)_isAACEncodedBuffer:(struct opaqueCMSampleBuffer *)buffer;
@end

#endif /* FBAACEncoderBase_h */
