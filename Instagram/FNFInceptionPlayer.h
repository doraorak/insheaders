//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFInceptionPlayer_h
#define FNFInceptionPlayer_h
@import Foundation;

#include "FNFHeadlessAudioEngine.h"
#include "FNFHeadlessDisplayEngine.h"
#include "FNFInternalPlayerDelegate-Protocol.h"
#include "FNFPictureInPictureController.h"
#include "FNFPlayerControlling-Protocol.h"
#include "FNFPlaylistBuilder.h"
#include "FNFProxyServer.h"

@class AVPlayer, AVPlayerItem, FNFExponentialBackoffTimer, FNFRealClock, FNFSynchronousPlayer, NSString, NSTimer;
@protocol CALayer<FNFAVPlayerLayer, FNFAsset;

@interface FNFInceptionPlayer : NSObject<FNFInternalPlayerDelegate, FNFPlayerControlling> {
  /* instance variables */
  NSObject<FNFInternalPlayerDelegate> *_delegate;
  AVPlayer *_player;
  CALayer<FNFAVPlayerLayer> *_playerLayer;
  AVPlayerItem *_playerItem;
  NSObject<FNFAsset> *_fnfAsset;
  FNFSynchronousPlayer *_fnfPlayer;
  struct FNFPlayerInternalState { BOOL playingRequested; BOOL isPlaying; BOOL endTimeReached; BOOL firstAudioFrameEnqueued; BOOL stoppedEnqueuingVideo; BOOL stoppedEnqueuingAudio; BOOL isFirstVideoFrame; BOOL displayEngineOnError; BOOL audioEngineInitialized; BOOL isReadyForDisplay; BOOL previousSeekCompletionBlockExecuted; BOOL muted; BOOL showCaptions; BOOL videoStalled; BOOL displayEngineDeactivated; BOOL audioStalled; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastStartingTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastRequestedStartTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastRequestedMuteTime; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedVideoPts; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedAudioPts; struct { long long value; int timescale; unsigned int flags; long long epoch; } latestEnqueuedAudioDts; double lastAudioQueueStartDuration; float lastPlayRate; struct { long long value; int timescale; unsigned int flags; long long epoch; } lastSeekToTime; float playRate; durationTimerForAsset *playbackTimeObserverForAsset; stallTimerObserver * x0; seekFrameUpdateObserver * x1; sampleBufferFlushTimerObserver * x2; levelMeterTimerObserver * x3; backgroundPauseTime * x4; struct { long long value; int timescale; unsigned int flags; long long epoch; } x5; unsigned int sampleAudioFrameSize; NSString *previousRepresentationId; NSString *representationId; NSString *previousAudioRepresentationId; NSString *audioRepresentationId; long long representationChangedTrack; struct opaqueCMFormatDescription *formatDesc; unsigned long long lastFrameSeekAttempt; long long status; struct FNFPlayerStallState { BOOL isStalled; BOOL isStartStall; BOOL audioStallOnlyEnabled; BOOL videoStalled; BOOL audioStalled; unsigned long long stallStartPositionTimeInMilliseconds; unsigned long long stallEndPositionTimeInMilliseconds; BOOL audioStallOnlyThresholdExceeded; } stallState; struct FNFPlayerSeekState { BOOL seeking; BOOL seekFinished; int seekReason; } seekState; int pauseReason; int muteReason; struct CGRect { struct CGPoint { double x; double y; } origin; struct CGSize { double width; double height; } size; } bounds; id /* block */ frameSeekCompletionBlock; playContext *loggingContext; pauseContext * x6; muteContext * x7; playerItemWarning * x8; NSError * x9; NSError *playerItemError; NSArray *playerItemLoadedTimeRanges; struct { long long value; int timescale; unsigned int flags; long long epoch; } playerItemDuration; struct FNFFrameDisplayState { double pts; double audioDisplayTime; double videoDisplayTime; } frameDisplayState; struct FNFAVSyncStatus { double offsetAverageSec; long long offsetSampleCount; } avSync; struct FNFDisplayedFrameInfo { double presentTimestamp; double displayedPlayerTimestamp; double displayedUnixTimestamp; } displayedFrameInfo; struct FNFRenderedFrameInfo { double presentTimestamp; double renderedPlayerTimestamp; BOOL isFrameStalled; } renderedFrameInfo; NSString *playlistDRMKeyId; NSString *playlistDRMPssh; unsigned long long videoStallStartTimeMs; unsigned long long videoStallDurationMs; unsigned long long audioStallStartTimeMs; unsigned long long audioStallDurationMs; NSMutableDictionary *playbackEndLoggingInfo; BOOL isAudioABREnabled; BOOL isAudioABREngine; BOOL isAudioABREligible; struct FNFFrameDropInfo { unsigned long long totalFrames; unsigned long long droppedFrames; unsigned long long droppedFramesLarge; unsigned long long droppedFramesVeryLarge; } frameDropInfo; int lastSegmentIndex; } _internalPlayerState;
  NSString *_identifier;
  FNFProxyServer *_proxyServer;
  FNFPlaylistBuilder *_playlistBuilder;
  FNFHeadlessAudioEngine *_audioEngine;
  FNFHeadlessDisplayEngine *_displayEngine;
  FNFExponentialBackoffTimer *_exponentialBackoffTimer;
  int _playerErrorRetryCount;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastSeekToTime;
  BOOL _shouldRecoverAtPlayer;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _pendingSeek;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentTimeOffset;
  struct { long long value; int timescale; unsigned int flags; long long epoch; } _currentTime;
  FNFRealClock *_clock;
  NSTimer *_audioSessionTimer;
  BOOL _isPaused;
  BOOL _enableAutoSeekForDRM;
  int _reloadCounter;
  BOOL _playRequested;
}

@property (readonly, nonatomic) FNFPictureInPictureController *pictureInPictureController;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithPlayerConfig:(struct { struct FNFPlayerConfigGen { long long x0; BOOL x1; BOOL x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; int x5; BOOL x6; BOOL x7; unsigned int x8; double x9; BOOL x10; BOOL x11; BOOL x12; int x13; unsigned long long x14; BOOL x15; int x16; int x17; double x18; long long x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; double x25; int x26; BOOL x27; BOOL x28; BOOL x29; double x30; int x31; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x32; BOOL x33; double x34; int x35; unsigned int x36; BOOL x37; BOOL x38; BOOL x39; int x40; BOOL x41; BOOL x42; BOOL x43; BOOL x44; double x45; BOOL x46; BOOL x47; BOOL x48; int x49; double x50; BOOL x51; BOOL x52; int x53; double x54; double x55; int x56; BOOL x57; BOOL x58; int x59; int x60; int x61; int x62; int x63; BOOL x64; BOOL x65; BOOL x66; int x67; BOOL x68; BOOL x69; BOOL x70; BOOL x71; int x72; BOOL x73; BOOL x74; BOOL x75; BOOL x76; unsigned long long x77; double x78; BOOL x79; BOOL x80; BOOL x81; double x82; BOOL x83; BOOL x84; BOOL x85; })config;
- (id)initWithDisplayEngine:(id)engine fnfPlayerConfig:(struct { struct FNFPlayerConfigGen { long long x0; BOOL x1; BOOL x2; } x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; int x5; BOOL x6; BOOL x7; unsigned int x8; double x9; BOOL x10; BOOL x11; BOOL x12; int x13; unsigned long long x14; BOOL x15; int x16; int x17; double x18; long long x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; double x25; int x26; BOOL x27; BOOL x28; BOOL x29; double x30; int x31; struct { BOOL x0; BOOL x1; BOOL x2; BOOL x3; } x32; BOOL x33; double x34; int x35; unsigned int x36; BOOL x37; BOOL x38; BOOL x39; int x40; BOOL x41; BOOL x42; BOOL x43; BOOL x44; double x45; BOOL x46; BOOL x47; BOOL x48; int x49; double x50; BOOL x51; BOOL x52; int x53; double x54; double x55; int x56; BOOL x57; BOOL x58; int x59; int x60; int x61; int x62; int x63; BOOL x64; BOOL x65; BOOL x66; int x67; BOOL x68; BOOL x69; BOOL x70; BOOL x71; int x72; BOOL x73; BOOL x74; BOOL x75; BOOL x76; unsigned long long x77; double x78; BOOL x79; BOOL x80; BOOL x81; double x82; BOOL x83; BOOL x84; BOOL x85; })config;
- (id)playerLayer;
- (void)dealloc;
- (void)setDelegate:(id)delegate;
- (void)setLoggingContext:(id)context;
- (void)setLogger:(id)logger;
- (void)setPSRProfiler:(id)psrprofiler;
- (void)setLiveTraceManager:(id)manager;
- (void)setUserSelectedQuality:(id)quality;
- (void)selectAudioRole:(unsigned char)role language:(id)language;
- (void)replaceCurrentItemWithPlayerItem:(id)item;
- (void)replaceCurrentItemWithPlayerItem:(id)item loggingContext:(id)context;
- (void)_replaceCurrentItemWithPlayerItemForAVPlayer:(id)avplayer;
- (void)_preparePlayer;
- (BOOL)_isProtectedContent;
- (void)_reloadIfKeyRequestTimeout;
- (void)_resetPlayer;
- (void)_handleAVPlayerError:(id)error;
- (void)_reloadPlayback;
- (void)_callPendingSeekAsApplicable;
- (void)play;
- (void)playWithContext:(id)context;
- (void)_startPictureInPictureIfEnabled;
- (void)pause;
- (void)pauseWithContext:(id)context;
- (void)pauseWithPauseReason:(int)reason context:(id)context;
- (void)setEnableAdsFrameLogging:(BOOL)logging;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time seekReason:(int)reason completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })before toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })after completionHandler:(id /* block */)handler;
- (void)seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time toleranceBefore:(struct { long long x0; int x1; unsigned int x2; long long x3; })before toleranceAfter:(struct { long long x0; int x1; unsigned int x2; long long x3; })after seekReason:(int)reason completionHandler:(id /* block */)handler;
- (void)_seekToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time seekReason:(int)reason isSkippable:(BOOL)skippable completionHandler:(id /* block */)handler;
- (BOOL)_shouldSkipBackToBackSeek:(struct { long long x0; int x1; unsigned int x2; long long x3; })seek;
- (void)setBroadcastLatencySensitivity:(long long)sensitivity;
- (void)setVolume:(float)volume rampTime:(float)time;
- (float)volume;
- (void)setMuted:(BOOL)muted isUserInitiated:(BOOL)initiated context:(id)context;
- (BOOL)isMuted;
- (void)setEnableClientBackgroundPlayback:(BOOL)playback;
- (BOOL)showCaptions;
- (void)setShowCaptions:(BOOL)captions;
- (void)setRate:(float)rate;
- (void)setRate:(float)rate context:(id)context;
- (float)rate;
- (void)setOutputEffects:(id)effects;
- (void)removeTimeObserver:(id)observer;
- (void)addTimeObserver:(id)observer;
- (void)flushTimeObserver:(id)observer;
- (id)createPeriodicTimeObserverForInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })interval followMasterClock:(BOOL)clock usingBlock:(id /* block */)block;
- (void)_registerObserverForPlayerItem:(id)item;
- (void)_removeObserverForPlayerItem:(id)item;
- (void)_resetClockToTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)playerItemDidStall:(id)stall;
- (void)playerItemDidPlayToEnd:(id)end;
- (void)playerItemDidFail:(id)fail;
- (long long)status;
- (id)currentItem;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })currentTime;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastStartingTime;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastRequestedStartTime;
- (double)lastAudioQueueStartDuration;
- (id)error;
- (void)invalidate;
- (void)applicationWillResignActive;
- (void)applicationDidBecomeActive;
- (void)addLevelMeterCallback:(id /* block */)callback timeInterval:(struct { long long x0; int x1; unsigned int x2; long long x3; })interval;
- (void)removeLevelMeterCallback;
- (void)setCaptionParser:(id)parser;
- (void)setAudioEngine:(id)engine;
- (void)setAudioDecoder:(id)decoder;
- (void)setAudioTimeDomainPitchAlgorithmEnabled:(BOOL)enabled;
- (void)setAudioVarispeedPitchAlgorithmEnabled:(BOOL)enabled;
- (void)didConnectWithExternalScreen;
- (void)didDisconnectWithExternalScreen;
- (void)didChangeScreenCaptured;
- (void)debug_simulatePlaybackInteruptionWithError:(id)error;
- (id)playerStateDebugInfo;
- (void)internalPlayer:(id)player stateUpdated:(unsigned long long)updated playerState:(struct FNFPlayerInternalState { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; BOOL x9; BOOL x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; struct { long long x0; int x1; unsigned int x2; long long x3; } x16; struct { long long x0; int x1; unsigned int x2; long long x3; } x17; struct { long long x0; int x1; unsigned int x2; long long x3; } x18; struct { long long x0; int x1; unsigned int x2; long long x3; } x19; struct { long long x0; int x1; unsigned int x2; long long x3; } x20; struct { long long x0; int x1; unsigned int x2; long long x3; } x21; double x22; float x23; struct { long long x0; int x1; unsigned int x2; long long x3; } x24; float x25; id x26; id x27; id x28; id x29; id x30; id x31; struct { long long x0; int x1; unsigned int x2; long long x3; } x32; unsigned int x33; id x34; id x35; id x36; id x37; long long x38; struct opaqueCMFormatDescription * x39; unsigned long long x40; long long x41; struct FNFPlayerStallState { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; unsigned long long x5; unsigned long long x6; BOOL x7; } x42; struct FNFPlayerSeekState { BOOL x0; BOOL x1; int x2; } x43; int x44; int x45; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x46; id /* block */ x47; id x48; id x49; id x50; id x51; id x52; id x53; id x54; struct { long long x0; int x1; unsigned int x2; long long x3; } x55; struct FNFFrameDisplayState { double x0; double x1; double x2; } x56; struct FNFAVSyncStatus { double x0; long long x1; } x57; struct FNFDisplayedFrameInfo { double x0; double x1; double x2; } x58; struct FNFRenderedFrameInfo { double x0; double x1; BOOL x2; } x59; id x60; id x61; unsigned long long x62; unsigned long long x63; unsigned long long x64; unsigned long long x65; id x66; BOOL x67; BOOL x68; BOOL x69; struct FNFFrameDropInfo { unsigned long long x0; unsigned long long x1; unsigned long long x2; unsigned long long x3; } x70; int x71; })state psrProfiler:(id)profiler loggingContext:(id)context;
- (void)dataDidBecomeAvailable;
- (void)_reloadAudioSessionAsApplicable;
- (void)_reRouteAudioSessionAtTime:(struct { long long x0; int x1; unsigned int x2; long long x3; })time;
- (void)_configAudioSession;
- (void)_handleAudioSessionConfig;
- (void)_resetAudioSessionTimer;
- (void)_syncConfigAudioSession;
- (BOOL)_isConfigAudioSessionNeeded;
- (BOOL)_isTimeToAutoSeek:(double)seek;
@end

#endif /* FNFInceptionPlayer_h */
