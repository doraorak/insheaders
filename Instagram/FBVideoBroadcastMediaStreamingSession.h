//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBVideoBroadcastMediaStreamingSession_h
#define FBVideoBroadcastMediaStreamingSession_h
@import Foundation;

#include "FBVideoBroadcastSessionBase.h"
#include "FBDiskVideoRecorder-Protocol.h"
#include "FBMediaStreamingSessionCallbacksDelegate-Protocol.h"
#include "FBVideoBroadcastRtmpSession-Protocol.h"
#include "FBVideoBroadcastSessionDelegate-Protocol.h"
#include "FBVideoStreamingLogger-Protocol.h"

@class NSSet, NSString;
@protocol FBVideoBroadcastSessionConnectionSetupDelegate, OS_dispatch_queue, {FBVideoBroadcastMediaStreamingSessionParameters="broadcastID"@"NSString""sandbox"B"forceNonSecureConnection"B"enableTcpFallback"B"connectionTimeoutMs"I"pipelineConfig"{AppleLiveStreamingPipelineConfig="threadingConfig"{AppleLiveStreamingThreadingConfig="useAsyncAudioSource"B"useAsyncVideoSource"B"useAsyncAudioEncoder"B"useAsyncVideoEncoder"B"audioEncoderHighQosClass"B"videoEncoderHighQosClass"B}"adjustDVRTimestamps"B"packageAACFramesIndividualy"B"audioEnhancementConfig"{AudioEnhancementConfig="ae_enabled"B"ae_noise_remover_enabled"B"ae_auto_eq_enabled"B"ae_voice_leveler_enabled"B"ae_noise_remover_bypass"B"ae_auto_eq_bypass"B"ae_voice_leveler_bypass"B"ae_component_noise_removal_active"B"ae_component_voice_enhancement_active"B"ae_voice_leveler_processing_amount"d"ae_auto_eq_processing_amount"d"ae_denoise_processing_amount"d"ae_denoise_complimentary_processing_amount"d"ae_prelive_recording_duration"d"sampleRate"i"numChannels"i"enableLogging"B}"audioClassifierConfig"{AudioClassifierConfig="audio_classifier_is_enabled"B}}"persistentCacheDir"@"NSString""networkLagConfig"{Optional<facebook::mobile::xplat::livestreaming::NetworkLagConfig>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"{NetworkLagConfig="stopThreshold"d"slowThreshold"d"resumeThreshold"d})"hasValue"B}}"sampleBufferQueue"@"NSObject<OS_dispatch_queue>""timingDataModel"@"FBVideoBroadcastSessionTimingDataModel""messageChannel"@"<FBVideoBroadcastOutOfBandMessageChannel>""sessionConfig"{?="rtmpURL"@"NSURL""fbLiveURL"@"NSURL""fbLiveQuicURL"@"NSURL""fbLiveFallbackPublishURL"@"NSURL""rtmpConnectionToken"{shared_ptr<const std::vector<unsigned char>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}"fbLiveConnectionToken"{shared_ptr<const std::vector<unsigned char>>="__ptr_"^v"__cntrl_"^{__shared_weak_count}}"audioConfig"{AudioConfig="sampleRate"i"bitRate"i"channels"i"profile"C"useAudioASC"B"allowPreEncodedFrames"B"useAudioCBR"B}"videoConfig"{VideoConfig="width"i"height"i"bitRate"i"fps"i"allowBFrames"B"keyFrameIntervalFrames"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"keyFrameIntervalSeconds"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"useMainProfile"B"codecType"C"allowPreEncodedFrames"B}"networkConfig"{?="sendHardTimeoutMsec"i"sendCheckTimeoutMsec"i"queueCapacityInBytes"i"queueVideoCapacityInSeconds"d"percentageOfCapacityToDrop"i"connectionRetryCount"i"connectionRetryDelay"i"speedTestPayloadSize"i"speedTestPayloadChunkSize"i"speedTestWaitResponseTimeoutInSeconds"i"measurementsIntervalInMs"Q"speedTestMinimumBandwidthThreshold"d"speedTestRetryMaxCount"i"speedTestRetryTimeDelay"d"speedTestDisable"B"cancelSpeedTestOnStart"B"waitForSpeedTest"B"shouldProbeRTTWithPings"B"useSSLFactory"B"use1RTTconnectionSetup"B"useVideoProtocol"B"enableQuic"B"quicStreamConfig"i"quicCongestionControlType"@"NSString""copaLatencyFactor"d"sendBufferSize"q"connectTimeoutMs"i"useExperimentalLowLatencyMode"B"quicSocketDrainTimeoutMs"i"sendStreamInterruptionEnded"B"enableQuicTcpRacing"B"tcpConnectDelayMs"i"statsReportingIntervalMs"i"quicMaxSendBufferSizeBytes"q"enableRushGoAwayFrame"B"enableStallStateProbeFrame"B"stallStateProbeFrameIntervalMs"i"enableRushClockSync"B"throughputMonitorConfig"{ThroughputMonitorConfig="type"c"lowPassEMAUpThreshold"d"lowPassEMADownThreshold"d}"enableTransportLatencyLogging"B"enableUrlFallback"B"urlSwapInterval"i"enableActiveUrlFallback"B"enableEncoderMetadata"B"enableULLEventMessage"B"broadcasterULLLatencyEventMessageIntervalMs"i"useUnifiedRushClient"B}"throughputMonitorConfig"{ThroughputMonitorConfig="type"c"lowPassEMAUpThreshold"d"lowPassEMADownThreshold"d}"adaptiveBitrateConfig"{AdaptiveBitrateConfig="enabled"B"minBitrate"i"maxBitrate"i"maxBitrateWifi"i"maxBitrate4G"i"statisticsWindowSize"i"statisticsSmoothFactor"d"qualityQueryFrameInterval"i"resolutionMappingBppJsonString"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"useThroughputLowPassEMA"B"throughputLowPassEMAUpThreshold"d"throughputLowPassEMADownThreshold"d"maxIncreaseBitrateForSmallQueueFactor"d"timeSinceLastBitrateIncreaseThresholdMs"i"timeSinceLastBitrateDecreaseThresholdMs"i"ibpHybridModelConfigJsonString"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"enableIbpHybridModel"B"abrAlgoType"i"experimentalParameters"{AdaptiveBitrateExperimentalParameters="timeSinceLastResolutionChangeThresholdMs"i"bitsPerPixelRatio"f}"bandwidthBasedAbrParameters"{AdaptiveBitrateBandwidthBasedParameters="smallQueueSizeMs"i"bigQueueSizeMs"i"decreaseBitrateAmountBps"i"increaseBitrateAmountBps"i"timeSinceLastBitrateChangeThresholdMs"i}}"diskRecordingConfig"{DiskVideoRecorderConfig="availableSpaceThresholdInMB"i"checkAvailableSpaceIntervalInSeconds"{duration<double, std::ratio<1>>="__rep_"d}"movieFragmentIntervalInSeconds"{duration<double, std::ratio<1>>="__rep_"d}"videoConfig"{VideoConfig="width"i"height"i"bitRate"i"fps"i"allowBFrames"B"keyFrameIntervalFrames"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"keyFrameIntervalSeconds"{Optional<int>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"i)"hasValue"B}}"useMainProfile"B"codecType"C"allowPreEncodedFrames"B}"audioConfig"{AudioConfig="sampleRate"i"bitRate"i"channels"i"profile"C"useAudioASC"B"allowPreEncodedFrames"B"useAudioCBR"B}"enablePartialRecordingIfNoEnoughSpace"B"minValidDurationMs"i"maxValidDvrLiveDurationDiffMs"i"frameCheckRateThreshold"d"frameCheckTimePeriod"i"wifiDVRUploadFileSizeThresholdInBytes"Q"lteDVRUploadFileSizeThresholdInBytes"Q"cellDVRUploadFileSizeThresholdInBytes"Q"offlineStreamingDVRFileSizeLimitInBytes"Q"enableSmartDVRUpload"B"enableDebugLogging"B"thermalThreshold"i"batteryLevelThreshold"i"dvrMaxDurationMs"i"adaptiveBitratePredictionThreshold"d}"recordOnDisk"B"timestampConfig"{FBVideoBroadcastSessionTimestampConfig="shiftTimestampBase"B"collapseGapsInAudio"B"collapseGapsInVideo"B}"liveTraceConfig"{LiveTraceConfig="enabled"B"sampleIntervalInSeconds"i"samplingSource"i}"enableVPLogForSdk"B"isLatencySensitive"B"latencyTargetType"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"roiType"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"initialBitratePrediction"{unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>>="__table_"{__hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}"qualityModelParameters"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"riskModelParameters"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"dhoModelParameters"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}}"videoValidatorParams"{VideoValidatorParams="enabled"B"timestampForwardJumpToleranceUpperBound"{duration<double, std::ratio<1>>="__rep_"d}"timestampForwardJumpToleranceLowerBound"{duration<double, std::ratio<1>>="__rep_"d}"loggerEpochDuration"{duration<double, std::ratio<1>>="__rep_"d}"loggerSamplesPerEpoch"i}"audioValidatorParams"{AudioValidatorParams="enabled"B"timestampForwardJumpToleranceUpperBound"{duration<double, std::ratio<1>>="__rep_"d}"timestampForwardJumpToleranceLowerBound"{duration<double, std::ratio<1>>="__rep_"d}"loggerEpochDuration"{duration<double, std::ratio<1>>="__rep_"d}"loggerSamplesPerEpoch"i}"variableFPSConfig"{vector<std::pair<int, int>, std::allocator<std::pair<int, int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<int, int> *, std::allocator<std::pair<int, int>>>="__value_"^v}}"adapterConfig"{AppleVideoAdapterConfig="minFPS"i"maxFPS"i"allowPreEncodedFrames"B}"liveEncoderHardLimit"{HardLimit="enabled"B"bitrateMultiplier"d"timeInterval"{duration<double, std::ratio<1>>="__rep_"d}}"resourceTrackingPoolCapacity"i"sdkMinInterruptionLimitInSecs"q"sdkMaxInterruptionLimitInSecs"q"initialBitratePredictionConfig"{InitialBitratePredictionConfig="initialBitrateKbpsPredictions"{unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>>="__table_"{__hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>>="__value_"f}}}"selection"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"policy"{basic_string<char, std::char_traits<char>, std::allocator<char>>="__r_"{__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>="__value_"{__rep=""(?="__l"{__long="__data_"*"__size_"Q"__cap_"b63"__is_long_"b1}"__s"{__short="__data_"[23c]"__padding_"[0C]"__size_"b7"__is_long_"b1}"__r"{__raw="__words"[3Q]})}}}"useInitialBitratePrediction"B}"gopSizeRecomendationOnCellSeconds"{Optional<double>="storage_"{StorageTriviallyDestructible=""(?="emptyState"c"value"d)"hasValue"B}}"smartDVRUploadDecisionQuery"@?"respectColorInfo"B"audioRecoverConfig"{AudioRecoverConfig="enableAudioRecoverService"B"enableAudioSessionResetAfterServiceLost"B"enableAudioSessionResetAfterServiceReset"B}"steadyClockPipelineLatencyLogging"B}, {atomic<int>="__a_"{__cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>>="__a_value"Ai}}, {atomic<long long>="__a_"{__cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>>="__a_value"Aq}}, {shared_ptr<(anonymous namespace)::FBEventMessageInputSource>="__ptr_"^{FBEventMessageInputSource}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<(anonymous namespace)::FBVideoBroadcastInputSource>="__ptr_"^{FBVideoBroadcastInputSource}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::AppleBroadcastSessionStatsProvider>="__ptr_"^{AppleBroadcastSessionStatsProvider}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::AppleLiveStreamingClient>="__ptr_"^{AppleLiveStreamingClient}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::AppleStreamingSessionCallbacksHybrid>="__ptr_"^{AppleStreamingSessionCallbacksHybrid}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::DvrManagerService>="__ptr_"^{DvrManagerService}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::LiveStreamingTsLogServiceProvider>="__ptr_"^{LiveStreamingTsLogServiceProvider}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::StreamingHealthCallbacksHybrid>="__ptr_"^{StreamingHealthCallbacksHybrid}"__cntrl_"^{__shared_weak_count}}, {shared_ptr<mediastreaming::TransportCallbacksHybryd>="__ptr_"^{TransportCallbacksHybryd}"__cntrl_"^{__shared_weak_count}}, {time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>>="__d_"{duration<long long, std::ratio<1, 1000000000>>="__rep_"q}};

@interface FBVideoBroadcastMediaStreamingSession : FBVideoBroadcastSessionBase<FBMediaStreamingSessionCallbacksDelegate, FBVideoBroadcastRtmpSession> {
  /* instance variables */
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _stateMutex;
  NSObject<OS_dispatch_queue> *_sampleBufferQueue;
  struct FBVideoBroadcastMediaStreamingSessionParameters { NSString *broadcastID; BOOL sandbox; BOOL forceNonSecureConnection; BOOL enableTcpFallback; unsigned int connectionTimeoutMs; struct AppleLiveStreamingPipelineConfig { struct AppleLiveStreamingThreadingConfig { BOOL useAsyncAudioSource; BOOL useAsyncVideoSource; BOOL useAsyncAudioEncoder; BOOL useAsyncVideoEncoder; BOOL audioEncoderHighQosClass; BOOL videoEncoderHighQosClass; } threadingConfig; BOOL adjustDVRTimestamps; BOOL packageAACFramesIndividualy; struct AudioEnhancementConfig { BOOL ae_enabled; BOOL ae_noise_remover_enabled; BOOL ae_auto_eq_enabled; BOOL ae_voice_leveler_enabled; BOOL ae_noise_remover_bypass; BOOL ae_auto_eq_bypass; BOOL ae_voice_leveler_bypass; BOOL ae_component_noise_removal_active; BOOL ae_component_voice_enhancement_active; double ae_voice_leveler_processing_amount; double ae_auto_eq_processing_amount; double ae_denoise_processing_amount; double ae_denoise_complimentary_processing_amount; double ae_prelive_recording_duration; int sampleRate; int numChannels; BOOL enableLogging; } audioEnhancementConfig; struct AudioClassifierConfig { BOOL audio_classifier_is_enabled; } audioClassifierConfig; } pipelineConfig; NSString *persistentCacheDir; struct Optional<facebook::mobile::xplat::livestreaming::NetworkLagConfig> { struct StorageTriviallyDestructible { union { char emptyState; struct NetworkLagConfig { double stopThreshold; double slowThreshold; double resumeThreshold; } value; } x0; BOOL hasValue; } storage_; } networkLagConfig; NSObject<OS_dispatch_queue> *sampleBufferQueue; FBVideoBroadcastSessionTimingDataModel *timingDataModel; <FBVideoBroadcastOutOfBandMessageChannel> *messageChannel; struct { NSURL *rtmpURL; NSURL *fbLiveURL; NSURL *fbLiveQuicURL; NSURL *fbLiveFallbackPublishURL; struct shared_ptr<const std::vector<unsigned char>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } rtmpConnectionToken; struct shared_ptr<const std::vector<unsigned char>> { void *__ptr_; struct __shared_weak_count *__cntrl_; } fbLiveConnectionToken; struct AudioConfig { int sampleRate; int bitRate; int channels; unsigned char profile; BOOL useAudioASC; BOOL allowPreEncodedFrames; BOOL useAudioCBR; } audioConfig; struct VideoConfig { int width; int height; int bitRate; int fps; BOOL allowBFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalSeconds; BOOL useMainProfile; unsigned char codecType; BOOL allowPreEncodedFrames; } videoConfig; struct { int sendHardTimeoutMsec; int sendCheckTimeoutMsec; int queueCapacityInBytes; double queueVideoCapacityInSeconds; int percentageOfCapacityToDrop; int connectionRetryCount; int connectionRetryDelay; int speedTestPayloadSize; int speedTestPayloadChunkSize; int speedTestWaitResponseTimeoutInSeconds; unsigned long long measurementsIntervalInMs; double speedTestMinimumBandwidthThreshold; int speedTestRetryMaxCount; double speedTestRetryTimeDelay; BOOL speedTestDisable; BOOL cancelSpeedTestOnStart; BOOL waitForSpeedTest; BOOL shouldProbeRTTWithPings; BOOL useSSLFactory; BOOL use1RTTconnectionSetup; BOOL useVideoProtocol; BOOL enableQuic; int quicStreamConfig; NSString *quicCongestionControlType; double copaLatencyFactor; long long sendBufferSize; int connectTimeoutMs; BOOL useExperimentalLowLatencyMode; int quicSocketDrainTimeoutMs; BOOL sendStreamInterruptionEnded; BOOL enableQuicTcpRacing; int tcpConnectDelayMs; int statsReportingIntervalMs; long long quicMaxSendBufferSizeBytes; BOOL enableRushGoAwayFrame; BOOL enableStallStateProbeFrame; int stallStateProbeFrameIntervalMs; BOOL enableRushClockSync; struct ThroughputMonitorConfig { char type; double lowPassEMAUpThreshold; double lowPassEMADownThreshold; } throughputMonitorConfig; BOOL enableTransportLatencyLogging; BOOL enableUrlFallback; int urlSwapInterval; BOOL enableActiveUrlFallback; BOOL enableEncoderMetadata; BOOL enableULLEventMessage; int broadcasterULLLatencyEventMessageIntervalMs; BOOL useUnifiedRushClient; } networkConfig; struct ThroughputMonitorConfig { char type; double lowPassEMAUpThreshold; double lowPassEMADownThreshold; } throughputMonitorConfig; struct AdaptiveBitrateConfig { BOOL enabled; int minBitrate; int maxBitrate; int maxBitrateWifi; int maxBitrate4G; int statisticsWindowSize; double statisticsSmoothFactor; int qualityQueryFrameInterval; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } resolutionMappingBppJsonString; BOOL useThroughputLowPassEMA; double throughputLowPassEMAUpThreshold; double throughputLowPassEMADownThreshold; double maxIncreaseBitrateForSmallQueueFactor; int timeSinceLastBitrateIncreaseThresholdMs; int timeSinceLastBitrateDecreaseThresholdMs; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } ibpHybridModelConfigJsonString; BOOL enableIbpHybridModel; int abrAlgoType; struct AdaptiveBitrateExperimentalParameters { int timeSinceLastResolutionChangeThresholdMs; float bitsPerPixelRatio; } experimentalParameters; struct AdaptiveBitrateBandwidthBasedParameters { int smallQueueSizeMs; int bigQueueSizeMs; int decreaseBitrateAmountBps; int increaseBitrateAmountBps; int timeSinceLastBitrateChangeThresholdMs; } bandwidthBasedAbrParameters; } adaptiveBitrateConfig; struct DiskVideoRecorderConfig { int availableSpaceThresholdInMB; struct duration<double, std::ratio<1>> { double __rep_; } checkAvailableSpaceIntervalInSeconds; struct duration<double, std::ratio<1>> { double __rep_; } movieFragmentIntervalInSeconds; struct VideoConfig { int width; int height; int bitRate; int fps; BOOL allowBFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalFrames; struct Optional<int> { struct StorageTriviallyDestructible { union { char emptyState; int value; } x0; BOOL hasValue; } storage_; } keyFrameIntervalSeconds; BOOL useMainProfile; unsigned char codecType; BOOL allowPreEncodedFrames; } videoConfig; struct AudioConfig { int sampleRate; int bitRate; int channels; unsigned char profile; BOOL useAudioASC; BOOL allowPreEncodedFrames; BOOL useAudioCBR; } audioConfig; BOOL enablePartialRecordingIfNoEnoughSpace; int minValidDurationMs; int maxValidDvrLiveDurationDiffMs; double frameCheckRateThreshold; int frameCheckTimePeriod; unsigned long long wifiDVRUploadFileSizeThresholdInBytes; unsigned long long lteDVRUploadFileSizeThresholdInBytes; unsigned long long cellDVRUploadFileSizeThresholdInBytes; unsigned long long offlineStreamingDVRFileSizeLimitInBytes; BOOL enableSmartDVRUpload; BOOL enableDebugLogging; int thermalThreshold; int batteryLevelThreshold; int dvrMaxDurationMs; double adaptiveBitratePredictionThreshold; } diskRecordingConfig; BOOL recordOnDisk; struct FBVideoBroadcastSessionTimestampConfig { BOOL shiftTimestampBase; BOOL collapseGapsInAudio; BOOL collapseGapsInVideo; } timestampConfig; struct LiveTraceConfig { BOOL enabled; int sampleIntervalInSeconds; int samplingSource; } liveTraceConfig; BOOL enableVPLogForSdk; BOOL isLatencySensitive; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } latencyTargetType; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } roiType; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } initialBitratePrediction; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } qualityModelParameters; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } riskModelParameters; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } dhoModelParameters; } sessionConfig; struct VideoValidatorParams { BOOL enabled; struct duration<double, std::ratio<1>> { double __rep_; } timestampForwardJumpToleranceUpperBound; struct duration<double, std::ratio<1>> { double __rep_; } timestampForwardJumpToleranceLowerBound; struct duration<double, std::ratio<1>> { double __rep_; } loggerEpochDuration; int loggerSamplesPerEpoch; } videoValidatorParams; struct AudioValidatorParams { BOOL enabled; struct duration<double, std::ratio<1>> { double __rep_; } timestampForwardJumpToleranceUpperBound; struct duration<double, std::ratio<1>> { double __rep_; } timestampForwardJumpToleranceLowerBound; struct duration<double, std::ratio<1>> { double __rep_; } loggerEpochDuration; int loggerSamplesPerEpoch; } audioValidatorParams; struct vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> { void *__begin_; void *__end_; struct __compressed_pair<std::pair<int, int> *, std::allocator<std::pair<int, int>>> { void *__value_; } __end_cap_; } variableFPSConfig; struct AppleVideoAdapterConfig { int minFPS; int maxFPS; BOOL allowPreEncodedFrames; } adapterConfig; struct HardLimit { BOOL enabled; double bitrateMultiplier; struct duration<double, std::ratio<1>> { double __rep_; } timeInterval; } liveEncoderHardLimit; int resourceTrackingPoolCapacity; long long sdkMinInterruptionLimitInSecs; long long sdkMaxInterruptionLimitInSecs; struct InitialBitratePredictionConfig { struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float __value_; } __p3_; } __table_; } initialBitrateKbpsPredictions; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } selection; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char *__data_; unsigned long long __size_; unsigned int x :63 __cap_; unsigned int x :1 __is_long_; } __l; struct __short { char x[23] __data_; unsigned char x[0] __padding_; unsigned int x :7 __size_; unsigned int x :1 __is_long_; } __s; struct __raw { unsigned long long x[3] __words; } __r; } x0; } __value_; } __r_; } policy; BOOL useInitialBitratePrediction; } initialBitratePredictionConfig; struct Optional<double> { struct StorageTriviallyDestructible { union { char emptyState; double value; } x0; BOOL hasValue; } storage_; } gopSizeRecomendationOnCellSeconds; id /* block */ smartDVRUploadDecisionQuery; BOOL respectColorInfo; struct AudioRecoverConfig { BOOL enableAudioRecoverService; BOOL enableAudioSessionResetAfterServiceLost; BOOL enableAudioSessionResetAfterServiceReset; } audioRecoverConfig; BOOL steadyClockPipelineLatencyLogging; } _sessionParameters;
  struct shared_ptr<mediastreaming::AppleLiveStreamingClient> { struct AppleLiveStreamingClient *__ptr_; struct __shared_weak_count *__cntrl_; } _client;
  NSObject<FBVideoStreamingLogger> *_logger;
  NSObject<FBDiskVideoRecorder> *_diskRecorder;
  struct shared_ptr<(anonymous namespace)::FBVideoBroadcastInputSource> { struct FBVideoBroadcastInputSource *__ptr_; struct __shared_weak_count *__cntrl_; } _videoInputSource;
  struct shared_ptr<(anonymous namespace)::FBVideoBroadcastInputSource> { struct FBVideoBroadcastInputSource *__ptr_; struct __shared_weak_count *__cntrl_; } _audioInputSource;
  struct shared_ptr<(anonymous namespace)::FBEventMessageInputSource> { struct FBEventMessageInputSource *__ptr_; struct __shared_weak_count *__cntrl_; } _eventMessageInputSource;
  struct shared_ptr<mediastreaming::AppleStreamingSessionCallbacksHybrid> { struct AppleStreamingSessionCallbacksHybrid *__ptr_; struct __shared_weak_count *__cntrl_; } _sessionCallbacks;
  struct shared_ptr<mediastreaming::TransportCallbacksHybryd> { struct TransportCallbacksHybryd *__ptr_; struct __shared_weak_count *__cntrl_; } _transportCallbacks;
  struct shared_ptr<mediastreaming::StreamingHealthCallbacksHybrid> { struct StreamingHealthCallbacksHybrid *__ptr_; struct __shared_weak_count *__cntrl_; } _healthCallbacks;
  struct shared_ptr<mediastreaming::AppleBroadcastSessionStatsProvider> { struct AppleBroadcastSessionStatsProvider *__ptr_; struct __shared_weak_count *__cntrl_; } _sessionStatsProvider;
  struct shared_ptr<mediastreaming::LiveStreamingTsLogServiceProvider> { struct LiveStreamingTsLogServiceProvider *__ptr_; struct __shared_weak_count *__cntrl_; } _tslogServiceProvider;
  struct shared_ptr<mediastreaming::DvrManagerService> { struct DvrManagerService *__ptr_; struct __shared_weak_count *__cntrl_; } _dvrManager;
  double _initialDuration;
  BOOL _swapIsInProgress;
  BOOL _hasSentMediaDataToServer;
  id /* block */ _clientBuilderBlock;
  struct atomic<long long> { struct __cxx_atomic_impl<long long, std::__cxx_atomic_base_impl<long long>> { atomic  __a_value; long long x0; } __a_; } _speedTestBandwidth;
  struct atomic<int> { struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> { atomic  __a_value; int x0; } __a_; } _flowState;
  struct time_point<std::chrono::steady_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> { struct duration<long long, std::ratio<1, 1000000000>> { long long __rep_; } __d_; } _lastDebugOverlayUpdateTime;
  struct FBVideoBroadcastStreamDurationAdjuster { struct FBVideoBroadcastStreamTimestampGapTracker { struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastAudioPTS; struct { long long value; int timescale; unsigned int flags; long long epoch; } _lastAudioDuration; BOOL _shouldCalculateGap; } _tracker; struct { long long value; int timescale; unsigned int flags; long long epoch; } _accumulatedDuration; } _durationAdjuster;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;
@property (weak) NSObject<FBVideoBroadcastSessionDelegate> *delegate;
@property (weak) NSObject<FBVideoBroadcastSessionConnectionSetupDelegate> *connectionSetupDelegate;
@property (readonly, copy, nonatomic) NSSet *currentOrInvitedGuests;

/* instance methods */
- (id)initWithParams:(struct FBVideoBroadcastMediaStreamingSessionParameters { id x0; BOOL x1; BOOL x2; BOOL x3; unsigned int x4; struct AppleLiveStreamingPipelineConfig { struct AppleLiveStreamingThreadingConfig { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; } x0; BOOL x1; BOOL x2; struct AudioEnhancementConfig { BOOL x0; BOOL x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; BOOL x6; BOOL x7; BOOL x8; double x9; double x10; double x11; double x12; double x13; int x14; int x15; BOOL x16; } x3; struct AudioClassifierConfig { BOOL x0; } x4; } x5; id x6; struct Optional<facebook::mobile::xplat::livestreaming::NetworkLagConfig> { struct StorageTriviallyDestructible { union { char x0; struct NetworkLagConfig { double x0; double x1; double x2; } x1; } x0; BOOL x1; } x0; } x7; id x8; id x9; id x10; struct { id x0; id x1; id x2; id x3; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x4; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x5; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x6; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x7; struct { int x0; int x1; int x2; double x3; int x4; int x5; int x6; int x7; int x8; int x9; unsigned long long x10; double x11; int x12; double x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; id x23; double x24; long long x25; int x26; BOOL x27; int x28; BOOL x29; BOOL x30; int x31; int x32; long long x33; BOOL x34; BOOL x35; int x36; BOOL x37; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x38; BOOL x39; BOOL x40; int x41; BOOL x42; BOOL x43; BOOL x44; int x45; BOOL x46; } x8; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x9; struct AdaptiveBitrateConfig { BOOL x0; int x1; int x2; int x3; int x4; int x5; double x6; int x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x8; BOOL x9; double x10; double x11; double x12; int x13; int x14; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x15; BOOL x16; int x17; struct AdaptiveBitrateExperimentalParameters { int x0; float x1; } x18; struct AdaptiveBitrateBandwidthBasedParameters { int x0; int x1; int x2; int x3; int x4; } x19; } x10; struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x11; BOOL x12; struct FBVideoBroadcastSessionTimestampConfig { BOOL x0; BOOL x1; BOOL x2; } x13; struct LiveTraceConfig { BOOL x0; int x1; int x2; } x14; BOOL x15; BOOL x16; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x17; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x18; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x19; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x20; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x21; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x22; } x11; struct VideoValidatorParams { BOOL x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct duration<double, std::ratio<1>> { double x0; } x3; int x4; } x12; struct AudioValidatorParams { BOOL x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct duration<double, std::ratio<1>> { double x0; } x3; int x4; } x13; struct vector<std::pair<int, int>, std::allocator<std::pair<int, int>>> { void * x0; void * x1; struct __compressed_pair<std::pair<int, int> *, std::allocator<std::pair<int, int>>> { void * x0; } x2; } x14; struct AppleVideoAdapterConfig { int x0; int x1; BOOL x2; } x15; struct HardLimit { BOOL x0; double x1; struct duration<double, std::ratio<1>> { double x0; } x2; } x16; int x17; long long x18; long long x19; struct InitialBitratePredictionConfig { struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x0; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x1; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x2; BOOL x3; } x20; struct Optional<double> { struct StorageTriviallyDestructible { union { char x0; double x1; } x0; BOOL x1; } x0; } x21; id /* block */ x22; BOOL x23; struct AudioRecoverConfig { BOOL x0; BOOL x1; BOOL x2; } x24; BOOL x25; })params logger:(id)logger clientBuilderBlock:(id /* block */)block;
- (void)dealloc;
- (void)streamingSessionOnInitialized;
- (void)streamingSessionOnStarted;
- (void)streamingSessionOnStopped;
- (void)streamingSessionOnReleased;
- (void)streamingSessionOnPaused;
- (void)streamingSessionOnResumed;
- (void)streamingSessionOnError:(const void *)error;
- (void)transportDidConnectWithSpeedTestStatus:(const void *)status;
- (void)transportDidFinish;
- (void)transportCompletedSpeedTestWithStatus:(const void *)status;
- (void)transportDidFailWithError:(const void *)error;
- (void)transportWillReconnectDueToError:(const void *)error;
- (void)transportWriteDidTimeout;
- (void)transportDidSendPackets;
- (void)transportDidDropPackets:(struct shared_ptr<std::vector<facebook::mobile::xplat::livestreaming::DroppedFrame>> { void * x0; struct __shared_weak_count * x1; })packets dropReason:(const void *)reason;
- (void)transportDidUpdateStreamingInfo:(const void *)info;
- (void)transportOnTransportEvent:(int)event reason:(const void *)reason;
- (void)audioStallDidHappen;
- (void)audioDataDidDry:(int)dry;
- (void)onDeviceHealthCriticalMessage:(int)message;
- (void)transportEventMessageAckReceived;
- (void)processEventMessage:(unsigned long long)message payload:(id)payload;
- (void)processEventMessage:(unsigned long long)message duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration payload:(id)payload;
- (void)processEventMessage:(unsigned long long)message duration:(struct { long long x0; int x1; unsigned int x2; long long x3; })duration delay:(struct { long long x0; int x1; unsigned int x2; long long x3; })delay payload:(id)payload;
- (void)processAudio:(struct opaqueCMSampleBuffer *)audio;
- (void)processVideo:(struct opaqueCMSampleBuffer *)video;
- (void)connectAndImmediatelyAllowStreaming:(BOOL)streaming;
- (void)finallyFetchedBroadcastID:(id)id withRTCSessionConfig:(struct { struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x0; BOOL x1; BOOL x2; BOOL x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; id x18; BOOL x19; BOOL x20; BOOL x21; BOOL x22; BOOL x23; BOOL x24; BOOL x25; BOOL x26; BOOL x27; BOOL x28; })config rtmpConfig:(struct { id x0; id x1; id x2; id x3; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x4; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x5; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x6; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x7; struct { int x0; int x1; int x2; double x3; int x4; int x5; int x6; int x7; int x8; int x9; unsigned long long x10; double x11; int x12; double x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; id x23; double x24; long long x25; int x26; BOOL x27; int x28; BOOL x29; BOOL x30; int x31; int x32; long long x33; BOOL x34; BOOL x35; int x36; BOOL x37; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x38; BOOL x39; BOOL x40; int x41; BOOL x42; BOOL x43; BOOL x44; int x45; BOOL x46; } x8; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x9; struct AdaptiveBitrateConfig { BOOL x0; int x1; int x2; int x3; int x4; int x5; double x6; int x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x8; BOOL x9; double x10; double x11; double x12; int x13; int x14; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x15; BOOL x16; int x17; struct AdaptiveBitrateExperimentalParameters { int x0; float x1; } x18; struct AdaptiveBitrateBandwidthBasedParameters { int x0; int x1; int x2; int x3; int x4; } x19; } x10; struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x11; BOOL x12; struct FBVideoBroadcastSessionTimestampConfig { BOOL x0; BOOL x1; BOOL x2; } x13; struct LiveTraceConfig { BOOL x0; int x1; int x2; } x14; BOOL x15; BOOL x16; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x17; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x18; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x19; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x20; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x21; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x22; })config rtmpMessageChannel:(id)channel;
- (void)updateRtmpConfig:(struct { id x0; id x1; id x2; id x3; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x4; struct shared_ptr<const std::vector<unsigned char>> { void * x0; struct __shared_weak_count * x1; } x5; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x6; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x7; struct { int x0; int x1; int x2; double x3; int x4; int x5; int x6; int x7; int x8; int x9; unsigned long long x10; double x11; int x12; double x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; BOOL x21; int x22; id x23; double x24; long long x25; int x26; BOOL x27; int x28; BOOL x29; BOOL x30; int x31; int x32; long long x33; BOOL x34; BOOL x35; int x36; BOOL x37; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x38; BOOL x39; BOOL x40; int x41; BOOL x42; BOOL x43; BOOL x44; int x45; BOOL x46; } x8; struct ThroughputMonitorConfig { char x0; double x1; double x2; } x9; struct AdaptiveBitrateConfig { BOOL x0; int x1; int x2; int x3; int x4; int x5; double x6; int x7; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x8; BOOL x9; double x10; double x11; double x12; int x13; int x14; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x15; BOOL x16; int x17; struct AdaptiveBitrateExperimentalParameters { int x0; float x1; } x18; struct AdaptiveBitrateBandwidthBasedParameters { int x0; int x1; int x2; int x3; int x4; } x19; } x10; struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; } x11; BOOL x12; struct FBVideoBroadcastSessionTimestampConfig { BOOL x0; BOOL x1; BOOL x2; } x13; struct LiveTraceConfig { BOOL x0; int x1; int x2; } x14; BOOL x15; BOOL x16; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x17; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x18; struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x19; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x20; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x21; struct basic_string<char, std::char_traits<char>, std::allocator<char>> { struct __compressed_pair<std::basic_string<char>::__rep, std::allocator<char>> { struct __rep { union { struct __long { char * x0; unsigned long long x1; unsigned int x2 :63; unsigned int x3 :1; } x0; struct __short { char x0[23] unsigned char x1[0] unsigned int x2 :7; unsigned int x3 :1; } x1; struct __raw { unsigned long long x0[3] } x2; } x0; } x0; } x0; } x22; })config;
- (void)stop:(BOOL)stop;
- (void)pause:(BOOL)pause;
- (void)resumeAndUpload:(BOOL)upload;
- (void)cameraWillChange;
- (void)cameraDidChange;
- (void)swapVideoWidthAndHeightAfterOrientationChange;
- (void)updateAudioEnhancementEngineForNoiseRemover:(BOOL)remover andVoiceEnhancer:(BOOL)enhancer;
- (void)setAudioEnhancementPreLiveRecording:(BOOL)recording;
- (void)setAudioEnhancementPreLiveRecordingReset;
- (void)setAudioEnhancementPreLivePlayback:(BOOL)playback;
- (void)setAudioEnhancementPreLivePlaybackRewind;
- (BOOL)hasSentMediaDataToServer;
- (BOOL)supportOfflineStreaming;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastAudioSampleBufferPts;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })lastVideoSampleBufferPts;
- (struct FBVideoBroadcastSessionStats { struct unordered_map<std::string, double, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, double>>> { struct __hash_table<std::__hash_value_type<std::string, double>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>, std::allocator<std::__hash_value_type<std::string, double>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>>> { void * * x0; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> *>> { unsigned long long x0; } x0; } x1; } x0; } x0; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, double>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<std::string, double>, void *> *> { void * x0; } x0; } x1; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, double>, std::hash<std::string>, std::equal_to<std::string>>> { unsigned long long x0; } x2; struct __compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, double>, std::equal_to<std::string>, std::hash<std::string>>> { float x0; } x3; } x0; } x0; struct { long long x0; int x1; unsigned int x2; long long x3; } x1; struct { long long x0; int x1; unsigned int x2; long long x3; } x2; struct { long long x0; int x1; unsigned int x2; long long x3; } x3; double x4; unsigned long long x5; unsigned long long x6; struct { long long x0; int x1; unsigned int x2; long long x3; } x7; struct { long long x0; int x1; unsigned int x2; long long x3; } x8; double x9; double x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; double x14; long long x15; unsigned long long x16; unsigned long long x17; unsigned long long x18; unsigned long long x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; BOOL x23; BOOL x24; unsigned int x25; unsigned int x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; })stats;
- (void)onInterruptionForReasonBackground:(BOOL)background;
- (void)onInterruptionEnded;
- (Class)videoEncoderClass;
- (struct { long long x0; int x1; unsigned int x2; long long x3; })baseTimestamp;
- (struct DiskVideoRecorderConfig { int x0; struct duration<double, std::ratio<1>> { double x0; } x1; struct duration<double, std::ratio<1>> { double x0; } x2; struct VideoConfig { int x0; int x1; int x2; int x3; BOOL x4; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x5; struct Optional<int> { struct StorageTriviallyDestructible { union { char x0; int x1; } x0; BOOL x1; } x0; } x6; BOOL x7; unsigned char x8; BOOL x9; } x3; struct AudioConfig { int x0; int x1; int x2; unsigned char x3; BOOL x4; BOOL x5; BOOL x6; } x4; BOOL x5; int x6; int x7; double x8; int x9; unsigned long long x10; unsigned long long x11; unsigned long long x12; unsigned long long x13; BOOL x14; BOOL x15; int x16; int x17; int x18; double x19; })diskVideoRecorderConfig;
- (id)diskRecorder;
- (id)newDiskRecorder;
- (void)setDiskRecorder:(id)recorder;
- (struct FBVideoBroadcastRtmpSwapStats { double x0; double x1; double x2; double x3; double x4; double x5; double x6; })swapStats;
- (void)disconnectWithoutSealing:(BOOL)sealing skipFlush:(BOOL)flush;
- (struct CGSize { double x0; double x1; })currentRtmpResolutionToSendToCS;
- (void)disableSpeedTest;
- (BOOL)prepareForSwapWithStartingInputBitrate:(double)bitrate;
- (void)swapFinished;
@end

#endif /* FBVideoBroadcastMediaStreamingSession_h */
