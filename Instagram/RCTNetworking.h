//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef RCTNetworking_h
#define RCTNetworking_h
@import Foundation;

#include "RCTEventEmitter.h"
#include "NativeNetworkingIOSSpec-Protocol.h"
#include "RCTBridge.h"
#include "RCTBundleManager.h"
#include "RCTCallableJSModules.h"
#include "RCTModuleRegistry.h"
#include "RCTViewRegistry.h"

@class NSArray, NSMutableArray, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface RCTNetworking : RCTEventEmitter<NativeNetworkingIOSSpec> {
  /* instance variables */
  NSMutableDictionary *_tasksByRequestID;
  struct mutex { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } __m_; } _handlersLock;
  NSArray *_handlers;
  id /* block */ _handlersProvider;
  NSMutableArray *_requestHandlers;
  NSMutableArray *_responseHandlers;
  NSObject<OS_dispatch_queue> *_requestQueue;
}

@optional
@property (weak, nonatomic) RCTModuleRegistry *moduleRegistry;
@optional
@property (weak, nonatomic) RCTViewRegistry *viewRegistry_DEPRECATED;
@optional
@property (weak, nonatomic) RCTBundleManager *bundleManager;
@optional
@property (weak, nonatomic) RCTCallableJSModules *callableJSModules;
@optional
@property (readonly, weak, nonatomic) RCTBridge *bridge;
@optional
@property (readonly, nonatomic) NSObject<OS_dispatch_queue> *methodQueue;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)moduleName;
+ (void)load;
+ (BOOL)requiresMainQueueSetup;
+ (id)decodeTextData:(id)data fromResponse:(id)response withCarryData:(id)data;
+ (const struct RCTMethodInfo *)__rct_export__7210;
+ (const struct RCTMethodInfo *)__rct_export__7591;
+ (const struct RCTMethodInfo *)__rct_export__7672;

/* instance methods */
- (id)init;
- (id)initWithHandlersProvider:(id /* block */)provider;
- (void)invalidate;
- (id)supportedEvents;
- (id)handlerForRequest:(id)request;
- (id)prioritizedHandlers;
- (id)stripNullsInRequestHeaders:(id)headers;
- (id /* block */)buildRequest:(id)request completionBlock:(id /* block */)block;
- (BOOL)canHandleRequest:(id)request;
- (id /* block */)processDataForHTTPQuery:(id)httpquery callback:(id /* block */)callback;
- (void)sendData:(id)data responseType:(id)type response:(id)response forTask:(id)task;
- (void)sendRequest:(id)request responseType:(id)type incrementalUpdates:(BOOL)updates responseSender:(id /* block */)sender;
- (void)addRequestHandler:(id)handler;
- (void)addResponseHandler:(id)handler;
- (void)removeRequestHandler:(id)handler;
- (void)removeResponseHandler:(id)handler;
- (id)networkTaskWithRequest:(id)request completionBlock:(id /* block */)block;
- (void)sendRequest:(struct SpecSendRequestQuery *)request callback:(id /* block */)callback;
- (void)abortRequest:(double)request;
- (void)clearCookies:(id /* block */)cookies;
- (id)requestQueue;
- (struct shared_ptr<facebook::react::TurboModule> { struct TurboModule * x0; struct __shared_weak_count * x1; })getTurboModule:(const void *)module;
@end

#endif /* RCTNetworking_h */
