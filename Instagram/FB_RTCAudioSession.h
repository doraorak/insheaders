//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FB_RTCAudioSession_h
#define FB_RTCAudioSession_h
@import Foundation;

#include "FB_RTCAudioSessionActivationDelegate-Protocol.h"

@class AVAudioSession, AVAudioSessionDataSourceDescription, AVAudioSessionRouteDescription, NSArray, NSString;
@protocol struct vector<__weak id<RTCAudioSessionDelegate>, std::allocator<__weak id<RTCAudioSessionDelegate>>> { id * x0; id * x1; struct __compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::allocator<__weak id<RTCAudioSessionDelegate>>> { id * x0; } x2; }, {AsyncInvoker="_vptr$MessageHandler"^^?"auto_cleanup_"B"pending_invocations_"{atomic<int>="__a_"{__cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>>="__a_value"Ai}}"invocation_complete_"{scoped_refptr<rtc_legacy::RefCountedObject<rtc_legacy::Event>>="ptr_"^v}"destroying_"{atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}}}, {vector<__weak id<RTCAudioSessionDelegate>, std::allocator<__weak id<RTCAudioSessionDelegate>>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::allocator<__weak id<RTCAudioSessionDelegate>>>="__value_"^@}};

@interface FB_RTCAudioSession : NSObject<FB_RTCAudioSessionActivationDelegate> {
  /* instance variables */
  struct RecursiveCriticalSection { struct _opaque_pthread_mutex_t { long long __sig; char x[56] __opaque; } mutex_; struct _opaque_pthread_t *thread_; int recursion_count_; } _crit;
  int _lockRecursionCount;
  long long _lastResetTimeMs;
  struct AsyncInvoker { undefined * *_vptr$MessageHandler; BOOL auto_cleanup_; struct atomic<int> { struct __cxx_atomic_impl<int, std::__cxx_atomic_base_impl<int>> { atomic  __a_value; int x0; } __a_; } pending_invocations_; struct scoped_refptr<rtc_legacy::RefCountedObject<rtc_legacy::Event>> { void *ptr_; } invocation_complete_; struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } destroying_; } _asyncInvoker;
  unsigned int _setActiveCount;
}

@property (readonly, nonatomic) int activationCount;
@property (readonly, nonatomic) int webRTCSessionCount;
@property (readonly) BOOL canPlayOrRecord;
@property (nonatomic) BOOL isInterrupted;
@property (readonly, nonatomic) struct vector<__weak id<RTCAudioSessionDelegate>, std::allocator<__weak id<RTCAudioSessionDelegate>>> { id * x0; id * x1; struct __compressed_pair<__weak id<RTCAudioSessionDelegate> *, std::allocator<__weak id<RTCAudioSessionDelegate>>> { id * x0; } x2; } delegates;
@property (readonly, nonatomic) AVAudioSession *session;
@property (readonly, nonatomic) BOOL isActive;
@property (readonly, nonatomic) BOOL isLocked;
@property (nonatomic) BOOL useManualAudio;
@property (nonatomic) BOOL isAudioEnabled;
@property (nonatomic) BOOL enableMediaServicesResetFixes;
@property (nonatomic) BOOL enableSetNumChannelsFix;
@property (readonly) NSString *category;
@property (readonly) unsigned long long categoryOptions;
@property (readonly) NSString *mode;
@property (readonly) BOOL secondaryAudioShouldBeSilencedHint;
@property (readonly) AVAudioSessionRouteDescription *currentRoute;
@property (readonly) long long maximumInputNumberOfChannels;
@property (readonly) long long maximumOutputNumberOfChannels;
@property (readonly) float inputGain;
@property (readonly) BOOL inputGainSettable;
@property (readonly) BOOL inputAvailable;
@property (readonly) NSArray *inputDataSources;
@property (readonly) AVAudioSessionDataSourceDescription *inputDataSource;
@property (readonly) NSArray *outputDataSources;
@property (readonly) AVAudioSessionDataSourceDescription *outputDataSource;
@property (readonly) double sampleRate;
@property (readonly) double preferredSampleRate;
@property (readonly) long long inputNumberOfChannels;
@property (readonly) long long outputNumberOfChannels;
@property (readonly) float outputVolume;
@property (readonly) double inputLatency;
@property (readonly) double outputLatency;
@property (readonly) double IOBufferDuration;
@property (readonly) double preferredIOBufferDuration;
@property (nonatomic) BOOL ignoresPreferredAttributeConfigurationErrors;
@property (nonatomic) BOOL enableRtcInterruptionLogicFix;
@property (nonatomic) unsigned int setConfigurationCount;
@property (nonatomic) BOOL enableAVAudioSessionRealtimeCheck;
@property (nonatomic) long long pauseStallRecoveryStartMs;
@property (nonatomic) long long pauseStallRecoveryDurationMs;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedInstance;
+ (id)lockError;

/* instance methods */
- (id)init;
- (id)initWithAudioSession:(id)session;
- (void)dealloc;
- (BOOL)isEnableQpl;
- (int)getAudioDeviceAutoStartDelay;
- (void)logAudioSessionStates;
- (void)addDelegate:(id)delegate;
- (void)removeDelegate:(id)delegate;
- (void)lockForConfiguration;
- (void)unlockForConfiguration;
- (BOOL)setActive:(BOOL)active error:(id *)error;
- (BOOL)setActiveForceful:(BOOL)forceful error:(id *)error;
- (BOOL)_doSetActive:(BOOL)active error:(id *)error withForce:(BOOL)force;
- (BOOL)setCategory:(id)category withOptions:(unsigned long long)options error:(id *)error;
- (BOOL)setMode:(id)mode error:(id *)error;
- (BOOL)setInputGain:(float)gain error:(id *)error;
- (BOOL)setPreferredSampleRate:(double)rate error:(id *)error;
- (BOOL)setPreferredIOBufferDuration:(double)duration error:(id *)error;
- (BOOL)setPreferredInputNumberOfChannels:(long long)channels error:(id *)error;
- (BOOL)setPreferredOutputNumberOfChannels:(long long)channels error:(id *)error;
- (BOOL)overrideOutputAudioPort:(unsigned long long)port error:(id *)error;
- (BOOL)setPreferredInput:(id)input error:(id *)error;
- (BOOL)setInputDataSource:(id)source error:(id *)error;
- (BOOL)setOutputDataSource:(id)source error:(id *)error;
- (void)handleInterruptionNotification:(id)notification;
- (void)handleRouteChangeNotification:(id)notification;
- (void)handleMediaServicesWereLost:(id)lost;
- (void)handleMediaServicesWereReset:(id)reset;
- (void)handleSilenceSecondaryAudioHintNotification:(id)notification;
- (void)handleApplicationDidBecomeActive:(id)active;
- (void)pushDelegate:(id)delegate;
- (void)removeZeroedDelegates;
- (int)incrementActivationCount;
- (long long)decrementActivationCount;
- (BOOL)checkLock:(id *)lock;
- (BOOL)beginWebRTCSession:(id *)rtcsession;
- (BOOL)endWebRTCSession:(id *)rtcsession;
- (BOOL)configureWebRTCSession:(id *)rtcsession;
- (BOOL)unconfigureWebRTCSession:(id *)rtcsession;
- (id)configurationErrorWithDescription:(id)description;
- (void)updateAudioSessionAfterEvent;
- (void)_resetAudioSessionAfterEvent;
- (void)updateCanPlayOrRecord;
- (void)audioSessionDidActivate:(id)activate;
- (void)audioSessionDidDeactivate:(id)deactivate;
- (void)observeValueForKeyPath:(id)path ofObject:(id)object change:(id)change context:(void *)context;
- (void)notifyDidBeginInterruption;
- (void)notifyDidEndInterruptionWithShouldResumeSession:(BOOL)session;
- (void)notifyDidChangeRouteWithReason:(unsigned long long)reason previousRoute:(id)route;
- (void)notifyMediaServicesWereLost;
- (void)notifyMediaServicesWereReset;
- (void)notifyDidChangeCanPlayOrRecord:(BOOL)record;
- (void)notifyDidStartPlayOrRecord;
- (void)notifyDidStopPlayOrRecord;
- (void)notifyDidChangeOutputVolume:(float)volume;
- (void)notifyDidDetectPlayoutGlitch:(long long)glitch;
- (void)notifyWillSetActive:(BOOL)active;
- (void)notifyDidSetActive:(BOOL)active;
- (void)notifyFailedToSetActive:(BOOL)active error:(id)error;
- (long long)getCurrentTimeInMilliseconds;
- (void)resetAudioSessionWithRetries:(unsigned long long)retries retryIntervalMs:(unsigned long long)ms completion:(id /* block */)completion;
- (void)_resetAudioSessionWithRetries:(unsigned long long)retries currentAttempt:(unsigned long long)attempt retryIntervalMs:(unsigned long long)ms fullReset:(BOOL)reset completion:(id /* block */)completion;
- (void)setLastResetTime:(long long)time;
- (id)getPortsInfo:(id)info;
- (void)startQplTrace;
- (void)endQplTrace;
- (void)addMarkerPoint:(id)point data:(id)data;
- (BOOL)isEnableMediaServicesResetFixes;
- (BOOL)isEnableSetNumChannelsFix;
- (BOOL)isEnableRtcInterruptionLogicFix;
@end

#endif /* FB_RTCAudioSession_h */
