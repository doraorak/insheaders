//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef RCTShadowView_h
#define RCTShadowView_h
@import Foundation;

#include "RCTComponent-Protocol.h"
#include "RCTRootShadowView.h"
#include "RCTShadowView.h"

@class NSDictionary, NSMutableArray, NSNumber, NSString;

@interface RCTShadowView : NSObject<RCTComponent> {
  /* instance variables */
  NSDictionary *_lastParentProperties;
  NSMutableArray *_reactSubviews;
  BOOL _recomputePadding;
  BOOL _recomputeMargin;
  BOOL _recomputeBorder;
  struct YGValue { float value; int unit; } _paddingMetaProps[9];
  struct YGValue { float value; int unit; } _marginMetaProps[9];
  struct YGValue { float value; int unit; } _borderMetaProps[9];
}

@property (readonly, weak, nonatomic) RCTRootShadowView *rootView;
@property (readonly, weak, nonatomic) RCTShadowView *superview;
@property (readonly, nonatomic) struct YGNode * yogaNode;
@property (copy, nonatomic) NSString *viewName;
@property (copy, nonatomic) id /* block */ onLayout;
@property (nonatomic) struct RCTLayoutMetrics { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x2; long long x3; long long x4; } layoutMetrics;
@property (nonatomic) BOOL newView;
@property (nonatomic) struct YGValue { float x0; int x1; } top;
@property (nonatomic) struct YGValue { float x0; int x1; } left;
@property (nonatomic) struct YGValue { float x0; int x1; } bottom;
@property (nonatomic) struct YGValue { float x0; int x1; } right;
@property (nonatomic) struct YGValue { float x0; int x1; } start;
@property (nonatomic) struct YGValue { float x0; int x1; } end;
@property (nonatomic) struct YGValue { float x0; int x1; } width;
@property (nonatomic) struct YGValue { float x0; int x1; } height;
@property (nonatomic) struct YGValue { float x0; int x1; } minWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } maxWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } minHeight;
@property (nonatomic) struct YGValue { float x0; int x1; } maxHeight;
@property (nonatomic) struct CGSize { double x0; double x1; } size;
@property (nonatomic) float borderWidth;
@property (nonatomic) float borderTopWidth;
@property (nonatomic) float borderLeftWidth;
@property (nonatomic) float borderBottomWidth;
@property (nonatomic) float borderRightWidth;
@property (nonatomic) float borderStartWidth;
@property (nonatomic) float borderEndWidth;
@property (nonatomic) struct YGValue { float x0; int x1; } margin;
@property (nonatomic) struct YGValue { float x0; int x1; } marginVertical;
@property (nonatomic) struct YGValue { float x0; int x1; } marginHorizontal;
@property (nonatomic) struct YGValue { float x0; int x1; } marginTop;
@property (nonatomic) struct YGValue { float x0; int x1; } marginLeft;
@property (nonatomic) struct YGValue { float x0; int x1; } marginBottom;
@property (nonatomic) struct YGValue { float x0; int x1; } marginRight;
@property (nonatomic) struct YGValue { float x0; int x1; } marginStart;
@property (nonatomic) struct YGValue { float x0; int x1; } marginEnd;
@property (nonatomic) struct YGValue { float x0; int x1; } padding;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingVertical;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingHorizontal;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingTop;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingLeft;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingBottom;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingRight;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingStart;
@property (nonatomic) struct YGValue { float x0; int x1; } paddingEnd;
@property (nonatomic) int flexDirection;
@property (nonatomic) int justifyContent;
@property (nonatomic) int alignSelf;
@property (nonatomic) int alignItems;
@property (nonatomic) int alignContent;
@property (nonatomic) int position;
@property (nonatomic) int flexWrap;
@property (nonatomic) int display;
@property (nonatomic) float flex;
@property (nonatomic) float flexGrow;
@property (nonatomic) float rowGap;
@property (nonatomic) float columnGap;
@property (nonatomic) float gap;
@property (nonatomic) float flexShrink;
@property (nonatomic) struct YGValue { float x0; int x1; } flexBasis;
@property (nonatomic) float aspectRatio;
@property (nonatomic) int direction;
@property (nonatomic) int overflow;
@property (nonatomic) struct CGSize { double x0; double x1; } intrinsicContentSize;
@property (copy, nonatomic) NSNumber *reactTag;
@property (copy, nonatomic) NSNumber *rootTag;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (struct YGConfig *)yogaConfig;

/* instance methods */
- (struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })measureLayoutRelativeToAncestor:(id)ancestor;
- (BOOL)viewIsDescendantOf:(id)of;
- (id)init;
- (BOOL)isReactRootView;
- (void)dealloc;
- (BOOL)canHaveSubviews;
- (BOOL)isYogaLeafNode;
- (void)insertReactSubview:(id)subview atIndex:(long long)index;
- (void)removeReactSubview:(id)subview;
- (id)reactSubviews;
- (id)reactSuperview;
- (void)layoutWithMinimumSize:(struct CGSize { double x0; double x1; })size maximumSize:(struct CGSize { double x0; double x1; })size layoutDirection:(long long)direction layoutContext:(struct RCTLayoutContext { struct CGPoint { double x0; double x1; } x0; id x1; id x2; })context;
- (void)layoutWithMetrics:(struct RCTLayoutMetrics { struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x0; struct CGRect { struct CGPoint { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; struct UIEdgeInsets { double x0; double x1; double x2; double x3; } x2; long long x3; long long x4; })metrics layoutContext:(struct RCTLayoutContext { struct CGPoint { double x0; double x1; } x0; id x1; id x2; })context;
- (void)layoutSubviewsWithContext:(struct RCTLayoutContext { struct CGPoint { double x0; double x1; } x0; id x1; id x2; })context;
- (struct CGSize { double x0; double x1; })sizeThatFitsMinimumSize:(struct CGSize { double x0; double x1; })size maximumSize:(struct CGSize { double x0; double x1; })size;
- (id)reactTagAtPoint:(struct CGPoint { double x0; double x1; })point;
- (void)addRecursiveDescriptionToString:(id)string atLevel:(unsigned long long)level;
- (id)recursiveDescription;
- (void)setLocalData:(id)data;
- (void)didUpdateReactSubviews;
- (void)didSetProps:(id)props;
- (BOOL)isNewView;
@end

#endif /* RCTShadowView_h */
