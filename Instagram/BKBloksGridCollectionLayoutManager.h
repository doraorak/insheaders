//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef BKBloksGridCollectionLayoutManager_h
#define BKBloksGridCollectionLayoutManager_h
@import Foundation;

#include "BKBloksCollectionComponentController.h"
#include "NSObject-Protocol.h"

@class BKModel, NSString;
@protocol {BKGridLayoutPositionMatrix="cellPositionIndexes"{unordered_map<BKClientID *, BKGridCellPositionIndex, RC::hash<BKClientID *>, std::equal_to<BKClientID *>, std::allocator<std::pair<BKClientID *const, BKGridCellPositionIndex>>>="__table_"{__hash_table<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::__unordered_map_hasher<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, RC::hash<BKClientID *>, std::equal_to<BKClientID *>>, std::__unordered_map_equal<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::equal_to<BKClientID *>, RC::hash<BKClientID *>>, std::allocator<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, RC::hash<BKClientID *>, std::equal_to<BKClientID *>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::equal_to<BKClientID *>, RC::hash<BKClientID *>>>="__value_"f}}}"positionLayoutMatrix"{unordered_map<int, std::vector<BKModel *>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, std::vector<BKModel *>>>>="__table_"{__hash_table<std::__hash_value_type<int, std::vector<BKModel *>>, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::hash<int>, std::equal_to<int>>, std::__unordered_map_equal<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::equal_to<int>, std::hash<int>>, std::allocator<std::__hash_value_type<int, std::vector<BKModel *>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::hash<int>, std::equal_to<int>>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::equal_to<int>, std::hash<int>>>="__value_"f}}}};

@interface BKBloksGridCollectionLayoutManager : NSObject<NSObject> {
  /* instance variables */
  BKBloksCollectionComponentController *_collectionController;
  struct BKBloksGridCollectionSpacings { double itemMainAxisSpacing; double itemCrossAxisSpacing; struct UIEdgeInsets { double top; double left; double bottom; double right; } padding; } _spacings;
  BKModel *_gridLayoutConfig;
  struct BKGridLayoutPositionMatrix { struct unordered_map<BKClientID *, BKGridCellPositionIndex, RC::hash<BKClientID *>, std::equal_to<BKClientID *>, std::allocator<std::pair<BKClientID *const, BKGridCellPositionIndex>>> { struct __hash_table<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::__unordered_map_hasher<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, RC::hash<BKClientID *>, std::equal_to<BKClientID *>>, std::__unordered_map_equal<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::equal_to<BKClientID *>, RC::hash<BKClientID *>>, std::allocator<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, RC::hash<BKClientID *>, std::equal_to<BKClientID *>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<BKClientID *, std::__hash_value_type<BKClientID *, BKGridCellPositionIndex>, std::equal_to<BKClientID *>, RC::hash<BKClientID *>>> { float __value_; } __p3_; } __table_; } cellPositionIndexes; struct unordered_map<int, std::vector<BKModel *>, std::hash<int>, std::equal_to<int>, std::allocator<std::pair<const int, std::vector<BKModel *>>>> { struct __hash_table<std::__hash_value_type<int, std::vector<BKModel *>>, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::hash<int>, std::equal_to<int>>, std::__unordered_map_equal<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::equal_to<int>, std::hash<int>>, std::allocator<std::__hash_value_type<int, std::vector<BKModel *>>>> { struct unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>> { struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>>> { void * *__value_; struct __bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>> { struct __compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> *>> { unsigned long long __value_; } __data_; } __value_; } __ptr_; } __bucket_list_; struct __compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *>>> { struct __hash_node_base<std::__hash_node<std::__hash_value_type<int, std::vector<BKModel *>>, void *> *> { void *__next_; } __value_; } __p1_; struct __compressed_pair<unsigned long, std::__unordered_map_hasher<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::hash<int>, std::equal_to<int>>> { unsigned long long __value_; } __p2_; struct __compressed_pair<float, std::__unordered_map_equal<int, std::__hash_value_type<int, std::vector<BKModel *>>, std::equal_to<int>, std::hash<int>>> { float __value_; } __p3_; } __table_; } positionLayoutMatrix; } _gridLayoutMatrix;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (double)mainAxisSpacing;
- (double)crossAxisSpacing;
- (struct UIEdgeInsets { double x0; double x1; double x2; double x3; })collectionInsets;
- (id)layoutConfig;
- (BOOL)updateLayoutManager:(id)manager;
- (struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })sizeRangeForItem:(id)item atIndexPath:(id)path;
- (struct Optional<RCSizeRange> { struct Storage<RCSizeRange, true, true, true> { BOOL x0; struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; } x1; } x0; })sizeRangeForItemRemeasure:(id)remeasure previousSizeRange:(struct RCSizeRange { struct CGSize { double x0; double x1; } x0; struct CGSize { double x0; double x1; } x1; })range previousComputedSize:(struct CGSize { double x0; double x1; })size;
- (struct CGSize { double x0; double x1; })computedAndResolvedSizeForItem:(id)item atIndexPath:(id)path shouldResolveSize:(BOOL)size traceType:(unsigned long long)type;
- (id)layoutControllerForItem:(id)item;
- (void)performUpdatesAnimated:(BOOL)animated newItems:(id)items;
@end

#endif /* BKBloksGridCollectionLayoutManager_h */
