//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FBCLLocationManager_h
#define FBCLLocationManager_h
@import Foundation;

#include "CLLocationManagerDelegate-Protocol.h"
#include "FBBackgroundStateManaging-Protocol.h"
#include "FBCLLocationCache.h"

@class CLLocationManager, FBTimer, NSError, NSMutableDictionary, NSMutableSet, NSString;
@protocol FBCLAuthorizationHandler, FBCLLocationHandler, FBCLRegionHandler, FBCLVisitHandler, OS_dispatch_queue, {atomic<CLAuthorizationStatus>="__a_"{__cxx_atomic_impl<CLAuthorizationStatus, std::__cxx_atomic_base_impl<CLAuthorizationStatus>>="__a_value"Ai}}, {atomic<bool>="__a_"{__cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>>="__a_value"AB}};

@interface FBCLLocationManager : NSObject<CLLocationManagerDelegate> {
  /* instance variables */
  NSObject<OS_dispatch_queue> *_queue;
  NSObject<FBBackgroundStateManaging> *_applicationStateManager;
  struct atomic<CLAuthorizationStatus> { struct __cxx_atomic_impl<CLAuthorizationStatus, std::__cxx_atomic_base_impl<CLAuthorizationStatus>> { atomic  __a_value; int x0; } __a_; } _authorizationStatus;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _isAuthorizedForPreciseLocation;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _authorizationStatusInitialized;
  struct atomic<bool> { struct __cxx_atomic_impl<bool, std::__cxx_atomic_base_impl<bool>> { atomic  __a_value; BOOL x0; } __a_; } _locationUpdatesStarted;
  CLLocationManager *_locationManager;
  FBCLLocationCache *_locationCache;
  NSMutableDictionary *_regionStateByRegionIdentifier;
  NSMutableSet *_rangedBeaconRegionIdentifiers;
  id _applicationWillResignActiveObserver;
  id _applicationDidBecomeActiveObserver;
  id _applicationDidEnterInBackgroundObserver;
  BOOL _isLocationManagerSuspended;
  NSString *_sessionID;
  double _initializationTimestamp;
}

@property (retain, nonatomic) NSError *lastError;
@property (retain, nonatomic) FBTimer *restartTimer;
@property (retain, nonatomic) FBTimer *errorHandlerTimer;
@property (weak, nonatomic) NSObject<FBCLAuthorizationHandler> *authorizationHandler;
@property (weak, nonatomic) NSObject<FBCLLocationHandler> *locationHandler;
@property (weak, nonatomic) NSObject<FBCLRegionHandler> *regionHandler;
@property (weak, nonatomic) NSObject<FBCLVisitHandler> *visitHandler;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* class methods */
+ (id)sharedManager;

/* instance methods */
- (id)initWithLocationManager:(id)manager locationCache:(id)cache applicationStateManager:(id)manager queue:(id)queue;
- (id)initWithLocationManagerProvider:(id /* block */)provider locationCache:(id)cache applicationStateManager:(id)manager queue:(id)queue;
- (void)dealloc;
- (int)authorizationStatus;
- (BOOL)locationServicesEnabled;
- (void)startUpdatingLocation;
- (void)stopUpdatingLocation;
- (void)setDesiredAccuracy:(double)accuracy;
- (void)setAllowsBackgroundLocationUpdates:(BOOL)updates;
- (void)startMonitoringSignificantLocationChanges;
- (void)stopMonitoringSignificantLocationChanges;
- (void)startMonitoringForRegion:(id)region;
- (void)stopMonitoringForRegion:(id)region;
- (void)startMonitoringVisits;
- (void)stopMonitoringVisits;
- (void)onApplicationWillResignActive:(id)active;
- (void)onApplicationDidBecomeActive:(id)active;
- (void)locationManager:(id)manager didUpdateLocations:(id)locations;
- (void)locationManager:(id)manager didFailWithError:(id)error;
- (void)locationManager:(id)manager didChangeAuthorizationStatus:(int)status;
- (void)locationManager:(id)manager didVisit:(id)visit;
- (void)locationManager:(id)manager didDetermineState:(long long)state forRegion:(id)region;
- (void)locationManager:(id)manager monitoringDidFailForRegion:(id)region withError:(id)error;
- (void)locationManager:(id)manager didRangeBeacons:(id)beacons inRegion:(id)region;
- (void)locationManager:(id)manager rangingBeaconsDidFailForRegion:(id)region withError:(id)error;
- (id)_systemLocation_POSSIBLE_HANG_ON_MAIN_QUEUE_withLocationManager:(id)manager;
- (id)sessionID;
@end

#endif /* FBCLLocationManager_h */
