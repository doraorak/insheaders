//
//   Generated by https://github.com/blacktop/ipsw (Version: 3.1.468, BuildCommit: a1243d3a18f9b0e29af55a12ad74ccd2cd1f0abc)
//
//    - LC_BUILD_VERSION:  Platform: iOS, MinOS: 15.0, SDK: 17.4, Tool: ld (16.0)
//    - LC_SOURCE_VERSION: 
//
#ifndef FNFQueuePlayerAssetOrchestrator_h
#define FNFQueuePlayerAssetOrchestrator_h
@import Foundation;

#include "FNFAvatarEmbodimentBehaviorGraph.h"
#include "FNFQueuePlayerItem.h"
#include "NSObject-Protocol.h"

@class FNFQueuePlayer, NSArray, NSMutableArray, NSString;
@protocol FNFAssetResourceLoaderDelegateWithQueue, FNFQueuePlayerAssetOrchestratorDelegate, OS_dispatch_queue;

@interface FNFQueuePlayerAssetOrchestrator : NSObject<NSObject> {
  /* instance variables */
  FNFQueuePlayer *_queuePlayer;
  double _playerWidth;
  double _playerHeight;
  struct { unsigned long long moovAtomSize; unsigned long long moovAtomSizeForReattempt; unsigned long long bitrate; double fetchBufferSizeInSeconds; double unstallBufferSizeInSeconds; double stallBufferSizeInSeconds; double firstFetchSizeInSeconds; double firstUnstallBufferSizeInSeconds; double firstStallBufferSizeInSeconds; double fetchBufferMultiplier; double unstallBufferMultiplier; BOOL enableMp4AssetSeekingFix; BOOL enableMp4AssetEditListSeekingFix; BOOL enableHEVCSupport; BOOL enableWhatsAppStreaming; BOOL enableDataTracking; BOOL shouldApplyRotationTransform; BOOL shouldCacheLoadedData; BOOL enableFrameAttributes; BOOL updateHttpPriorityOnPausePlay; BOOL removeFrequencyIndexCheck; } _mp4Config;
  NSObject<FNFAssetResourceLoaderDelegateWithQueue> *_mp4ResourceLoaderDelegate;
  NSObject<OS_dispatch_queue> *_delegateQueue;
  FNFAvatarEmbodimentBehaviorGraph *_behaviorGraph;
  NSMutableArray *_currentItems;
  unsigned int _nextItemsIndex;
  NSString *_currentTrigger;
  NSString *_currentState;
  NSString *_currentSentiment;
  NSString *_currentIntensity;
  NSString *_currentAction;
  NSString *_previousInputTrigger;
  NSString *_previousTriggeringAction;
  NSString *_previousTriggeringSentiment;
  NSString *_previousTriggeringIntensity;
  NSObject<FNFQueuePlayerAssetOrchestratorDelegate> *_delegate;
  NSArray *_prefetchPlayerItems;
  unsigned int _prefetchItemsIndex;
  FNFQueuePlayerItem *_currentPrefetchingItem;
  BOOL _hasInFlightPlaybackRequest;
}

@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

/* instance methods */
- (id)initWithQueuePlayer:(id)player playerWidth:(double)width playerHeight:(double)height mp4Config:(struct { unsigned long long x0; unsigned long long x1; unsigned long long x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; BOOL x11; BOOL x12; BOOL x13; BOOL x14; BOOL x15; BOOL x16; BOOL x17; BOOL x18; BOOL x19; BOOL x20; })config mp4ResourceLoaderDelegate:(id)delegate delegateQueue:(id)queue;
- (void)setDelegate:(id)delegate;
- (void)setBehaviorGraph:(id)graph;
- (void)handleTrigger:(id)trigger;
- (void)handleTrigger:(id)trigger action:(id)action sentiment:(id)sentiment intensity:(id)intensity;
- (void)play;
- (void)pause;
- (void)reset;
- (void)queuedPlaybackAboutToFinish;
- (void)updateHasInFlightPlaybackRequest:(BOOL)request;
- (void)firstItemLoaded;
- (void)currentPlaybackEndedWithPlaybackStartLatencyMS:(float)ms playbackTime:(double)time stallCount:(unsigned int)count totalStallTimeMS:(float)ms playbackError:(id)error queuedContext:(id)context isNextVideoNotReady:(BOOL)ready nextVideoNotReadyDuration:(double)duration;
- (void)dataFetchedWithVideoID:(id)id fetchedTime:(double)time retryCount:(unsigned long long)count bytesDownloaded:(unsigned long long)downloaded totalMediaBytes:(unsigned long long)bytes error:(id)error statusCode:(long long)code;
- (void)_advanceToNextPlayerItem;
- (void)_updateCurrentPlayerItemsWithAppendMode:(long long)mode queuedContext:(id)context;
- (void)_loadItemWithQueuedContext:(id)context appendMode:(long long)mode;
- (void)_loadItem:(id)item appendMode:(long long)mode isPrefetch:(BOOL)prefetch queuedContext:(id)context;
- (void)_assetLoaded:(id)loaded appendMode:(long long)mode isPrefetch:(BOOL)prefetch queuedContext:(id)context;
- (void)_setPrefetchPlayerItems:(id)items;
- (void)_prefetchIfApplicable;
@end

#endif /* FNFQueuePlayerAssetOrchestrator_h */
